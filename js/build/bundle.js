/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _jquery = __webpack_require__(1);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\n__webpack_require__(11);\n\n__webpack_require__(15);\n\n__webpack_require__(19);\n\n__webpack_require__(20);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9tYWluLmpzPzc3YWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuLy8gaW1wb3J0ICcuL2FwcC9wdy10b2dnbGUnO1xuLy8gaW1wb3J0ICcuL2FwcC9wdy1zdHJlbmd0aCc7XG5pbXBvcnQgJy4vYXBwL2Zvcm0tdmFsaWRhdGlvbic7XG5pbXBvcnQgJy4vYXBwL2Zvcm0tZmllbGQtZm9ybWF0JztcbmltcG9ydCAnLi9hcHAvaWR2LWZpbmFuY2UtaGVscGVyJztcblxuaW1wb3J0ICcuL21vY2t1cC9maW5hbmNpYWwtZm9ybSdcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGpzL21haW4uanNcbiAqKi8iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7O0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.1.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-09-22T22:30Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n\tfunction DOMEval( code, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.1.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t// strings and numbers (primitives or objects)\n\t\t// that can be coerced to finite numbers (gh-2662)\n\t\tvar type = jQuery.type( obj );\n\t\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN( obj - parseFloat( obj ) );\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE <=9 - 11, Edge 12 - 13\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Simple selector that can be filtered directly, removing non-Elements\n\tif ( risSimple.test( qualifier ) ) {\n\t\treturn jQuery.filter( qualifier, elements, not );\n\t}\n\n\t// Complex selector, compare the two sets, removing non-Elements\n\tqualifier = jQuery.filter( qualifier, elements );\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Support: Android 4.0 only\n\t\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\t\tresolve.call( undefined, value );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.call( undefined, value );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ jQuery.camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( jQuery.camelCase );\n\t\t\t} else {\n\t\t\t\tkey = jQuery.camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: jQuery.isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\nfunction manipulationTarget( elem, content ) {\n\tif ( jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn elem.getElementsByTagName( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdiv.style.cssText =\n\t\t\t\"box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// Support: IE <=9 only\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i,\n\t\tval = 0;\n\n\t// If we already have the right measurement, avoid augmentation\n\tif ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\ti = 4;\n\n\t// Otherwise initialize for horizontal or vertical properties\n\t} else {\n\t\ti = name === \"width\" ? 1 : 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar val,\n\t\tvalueIsBorderBox = true,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Support: IE <=11 only\n\t// Running getBoundingClientRect on a disconnected node\n\t// in IE throws an error.\n\tif ( elem.getClientRects().length ) {\n\t\tval = elem.getBoundingClientRect()[ name ];\n\t}\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction raf() {\n\tif ( timerId ) {\n\t\twindow.requestAnimationFrame( raf );\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off or if document is hidden\n\tif ( jQuery.fx.off || document.hidden ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.requestAnimationFrame ?\n\t\t\twindow.requestAnimationFrame( raf ) :\n\t\t\twindow.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\tif ( window.cancelAnimationFrame ) {\n\t\twindow.cancelAnimationFrame( timerId );\n\t} else {\n\t\twindow.clearInterval( timerId );\n\t}\n\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( jQuery.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win, rect, doc,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\trect = elem.getBoundingClientRect();\n\n\t\t// Make sure element is not hidden (display: none)\n\t\tif ( rect.width || rect.height ) {\n\t\t\tdoc = elem.ownerDocument;\n\t\t\twin = getWindow( doc );\n\t\t\tdocElem = doc.documentElement;\n\n\t\t\treturn {\n\t\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t\t};\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden elements (gh-2310)\n\t\treturn rect;\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset = {\n\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n\t\t\t};\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\njQuery.parseJSON = JSON.parse;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\treturn jQuery;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\n\nreturn jQuery;\n} );\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _h5f = __webpack_require__(12);\n\nvar _h5f2 = _interopRequireDefault(_h5f);\n\nvar _validateField = __webpack_require__(13);\n\nvar _validateField2 = _interopRequireDefault(_validateField);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar validate = {\n  init: function init() {\n    this.form = document.querySelector('form');\n    if (!this.form) return;\n    this.form.noValidate = true;\n    this.btn = this.form.querySelector('[type=submit]');\n\n    _h5f2.default.setup(this.form, {\n      validClass: 'valid',\n      invalidClass: 'invalid',\n      requiredClass: 'required',\n      placeholderClass: 'placeholder'\n    });\n\n    this.addEvents();\n  },\n  addEvents: function addEvents() {\n    var _this = this;\n\n    this.form.addEventListener('change', function (e) {\n      return (0, _validateField2.default)(e.target);\n    });\n    this.form.addEventListener('submit', function (e) {\n      return _this.validateForm(e);\n    });\n  },\n  validateForm: function validateForm(e) {\n    if (!this.form.checkValidity()) {\n      if (this.pageUnloader) {\n        window.onbeforeunload = this.pageUnloader;\n      }\n      e.preventDefault();\n    } else {\n      this.pageUnloader = window.onbeforeunload;\n      window.onbeforeunload = false;\n    }\n\n    var fields = this.form.querySelectorAll('.field');\n    for (var i = 0; i < fields.length; i++) {\n      (0, _validateField2.default)(fields[i]);\n    }\n\n    // add focus to first invalid input\n    var invalidField = this.form.querySelector('.invalid, .interacted.required');\n    if (invalidField) invalidField.focus();\n  }\n};\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  return validate.init();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvYXBwL2Zvcm0tdmFsaWRhdGlvbi5qcz84NzZmIiwid2VicGFjazovLy8/ZDQxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaDVmIGZyb20gJ2g1Zic7XG5cbmltcG9ydCB2YWxpZGF0ZUZpZWxkIGZyb20gJy4vdmFsaWRhdGUtZmllbGQnO1xuXG5cbmNvbnN0IHZhbGlkYXRlID0ge1xuICBpbml0KCkge1xuICAgIHRoaXMuZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcbiAgICBpZiAoIXRoaXMuZm9ybSkgcmV0dXJuO1xuICAgIHRoaXMuZm9ybS5ub1ZhbGlkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLmJ0biA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKCdbdHlwZT1zdWJtaXRdJyk7XG5cbiAgICBoNWYuc2V0dXAodGhpcy5mb3JtLCB7XG4gICAgICB2YWxpZENsYXNzOiAndmFsaWQnLFxuICAgICAgaW52YWxpZENsYXNzOiAnaW52YWxpZCcsXG4gICAgICByZXF1aXJlZENsYXNzOiAncmVxdWlyZWQnLFxuICAgICAgcGxhY2Vob2xkZXJDbGFzczogJ3BsYWNlaG9sZGVyJyxcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkRXZlbnRzKCk7XG4gIH0sXG5cbiAgYWRkRXZlbnRzKCkge1xuICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBlID0+IHZhbGlkYXRlRmllbGQoZS50YXJnZXQpKTtcbiAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSA9PiB0aGlzLnZhbGlkYXRlRm9ybShlKSk7XG4gIH0sXG5cbiAgdmFsaWRhdGVGb3JtKGUpIHtcbiAgICBpZiAoIXRoaXMuZm9ybS5jaGVja1ZhbGlkaXR5KCkpIHtcbiAgICAgIGlmICh0aGlzLnBhZ2VVbmxvYWRlcikge1xuICAgICAgICB3aW5kb3cub25iZWZvcmV1bmxvYWQgPSB0aGlzLnBhZ2VVbmxvYWRlcjtcbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYWdlVW5sb2FkZXIgPSB3aW5kb3cub25iZWZvcmV1bmxvYWQ7XG4gICAgICB3aW5kb3cub25iZWZvcmV1bmxvYWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWVsZHMgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLmZpZWxkJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbGlkYXRlRmllbGQoZmllbGRzW2ldKTtcbiAgICB9XG5cbiAgICAvLyBhZGQgZm9jdXMgdG8gZmlyc3QgaW52YWxpZCBpbnB1dFxuICAgIGNvbnN0IGludmFsaWRGaWVsZCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKCcuaW52YWxpZCwgLmludGVyYWN0ZWQucmVxdWlyZWQnKTtcbiAgICBpZiAoaW52YWxpZEZpZWxkKSBpbnZhbGlkRmllbGQuZm9jdXMoKTtcbiAgfSxcbn07XG5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHZhbGlkYXRlLmluaXQoKSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBqcy9hcHAvZm9ybS12YWxpZGF0aW9uLmpzXG4gKiovIiwidW5kZWZpbmVkXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7OztBQUNBO0FBQ0E7Ozs7O0FBRUE7QUFDQTtBQ0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFDQTtBQU1BO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF6Q0E7QUFDQTtBQTRDQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! H5F\n* https://github.com/ryanseddon/H5F/\n* Copyright (c) Ryan Seddon | Licensed MIT */\n\n(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof module === 'object' && module.exports)  {\n        // CommonJS\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.H5F = factory();\n    }\n}(this, function () {\n\n    var d = document,\n        field = d.createElement(\"input\"),\n        emailPatt = /^[a-zA-Z0-9.!#$%&'*+-\\/=?\\^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n        urlPatt = /[a-z][\\-\\.+a-z]*:\\/\\//i,\n        nodes = /^(input|select|textarea)$/i,\n        isSubmit, bypassSubmit, usrPatt, curEvt, args,\n        // Methods\n        setup, validation, validity, checkField, bypassChecks, checkValidity, setCustomValidity, support, pattern, placeholder, range, required, valueMissing, listen, unlisten, preventActions, getTarget, addClass, removeClass, isHostMethod, isSiblingChecked;\n\n    setup = function(form, settings) {\n        var isCollection = !form.nodeType || false;\n\n        var opts = {\n            validClass : \"valid\",\n            invalidClass : \"error\",\n            requiredClass : \"required\",\n            placeholderClass : \"placeholder\",\n            onSubmit : Function.prototype,\n            onInvalid : Function.prototype\n        };\n\n        if(typeof settings === \"object\") {\n            for (var i in opts) {\n                if(typeof settings[i] === \"undefined\") { settings[i] = opts[i]; }\n            }\n        }\n\n        args = settings || opts;\n\n        if(isCollection) {\n            for(var k=0,len=form.length;k<len;k++) {\n                validation(form[k]);\n            }\n        } else {\n            validation(form);\n        }\n    };\n\n    validation = function(form) {\n        var f = form.elements,\n            flen = f.length,\n            isRequired,\n            noValidate = !!(form.attributes[\"novalidate\"]);\n\n        listen(form,\"invalid\",checkField,true);\n        listen(form,\"blur\",checkField,true);\n        listen(form,\"input\",checkField,true);\n        listen(form,\"keyup\",checkField,true);\n        listen(form,\"focus\",checkField,true);\n        listen(form,\"change\",checkField,true);\n        listen(form,\"click\",bypassChecks,true);\n\n        listen(form,\"submit\",function(e){\n            isSubmit = true;\n            if(!bypassSubmit && !noValidate && !form.checkValidity()) {\n                preventActions(e);\n                return;\n            }\n            args.onSubmit.call(form, e);\n        },false);\n\n        if(!support()) {\n            form.checkValidity = function() { return checkValidity(form); };\n\n            while(flen--) {\n                isRequired = !!(f[flen].attributes[\"required\"]);\n                // Firefox includes fieldsets inside elements nodelist so we filter it out.\n                if(f[flen].nodeName.toLowerCase() !== \"fieldset\") {\n                    validity(f[flen]); // Add validity object to field\n                }\n            }\n        }\n    };\n    validity = function(el) {\n        var elem = el,\n            missing = valueMissing(elem),\n            attrs = {\n                type: elem.getAttribute(\"type\"),\n                pattern: elem.getAttribute(\"pattern\"),\n                placeholder: elem.getAttribute(\"placeholder\")\n            },\n            isType = /^(email|url)$/i,\n            evt = /^(input|keyup)$/i,\n            fType = ((isType.test(attrs.type)) ? attrs.type : ((attrs.pattern) ? attrs.pattern : false)),\n            patt = pattern(elem,fType),\n            step = range(elem,\"step\"),\n            min = range(elem,\"min\"),\n            max = range(elem,\"max\"),\n            customError = !( elem.validationMessage === \"\" || elem.validationMessage === undefined );\n\n        elem.checkValidity = function() { return checkValidity.call(this,elem); };\n        elem.setCustomValidity = function(msg) { setCustomValidity.call(elem,msg); };\n\n        elem.validity = {\n            valueMissing: missing,\n            patternMismatch: patt,\n            rangeUnderflow: min,\n            rangeOverflow: max,\n            stepMismatch: step,\n            customError: customError,\n            valid: (!missing && !patt && !step && !min && !max && !customError)\n        };\n\n        if(attrs.placeholder && !evt.test(curEvt)) { placeholder(elem); }\n    };\n    checkField = function(e) {\n        var el = getTarget(e) || e, // checkValidity method passes element not event\n            events = /^(input|keyup|focusin|focus|change)$/i,\n            ignoredTypes = /^(submit|image|button|reset)$/i,\n            specialTypes = /^(checkbox|radio)$/i,\n            checkForm = true;\n\n        if(nodes.test(el.nodeName) && !(ignoredTypes.test(el.type) || ignoredTypes.test(el.nodeName))) {\n            curEvt = e.type;\n\n            if(!support()) {\n                validity(el);\n            }\n\n            if(el.validity.valid && (el.value !== \"\" || specialTypes.test(el.type)) || (el.value !== el.getAttribute(\"placeholder\") && el.validity.valid)) {\n                removeClass(el,[args.invalidClass,args.requiredClass]);\n                addClass(el,args.validClass);\n            } else if(!events.test(curEvt)) {\n                if(el.validity.valueMissing) {\n                    removeClass(el,[args.invalidClass,args.validClass]);\n                    addClass(el,args.requiredClass);\n                } else if(!el.validity.valid) {\n                    removeClass(el,[args.validClass,args.requiredClass]);\n                    addClass(el,args.invalidClass);\n                }\n            } else if(el.validity.valueMissing) {\n                removeClass(el,[args.requiredClass,args.invalidClass,args.validClass]);\n            }\n            if(curEvt === \"input\" && checkForm) {\n                // If input is triggered remove the keyup event\n                unlisten(el.form,\"keyup\",checkField,true);\n                checkForm = false;\n            }\n        }\n    };\n    checkValidity = function(el) {\n        var f, ff, isDisabled, isRequired, hasPattern, invalid = false;\n\n        if(el.nodeName.toLowerCase() === \"form\") {\n            f = el.elements;\n\n            for(var i = 0,len = f.length;i < len;i++) {\n                ff = f[i];\n\n                isDisabled = !!(ff.attributes[\"disabled\"]);\n                isRequired = !!(ff.attributes[\"required\"]);\n                hasPattern = !!(ff.attributes[\"pattern\"]);\n\n                if(ff.nodeName.toLowerCase() !== \"fieldset\" && !isDisabled && (isRequired || hasPattern && isRequired)) {\n                    checkField(ff);\n                    if(!ff.validity.valid && !invalid) {\n                        if(isSubmit) { // If it's not a submit event the field shouldn't be focused\n                            ff.focus();\n                        }\n                        invalid = true;\n                        args.onInvalid.call(el, ff);\n                    }\n                }\n            }\n            return !invalid;\n        } else {\n            checkField(el);\n            return el.validity.valid;\n        }\n    };\n    setCustomValidity = function(msg) {\n        var el = this;\n\n        el.validationMessage = msg;\n    };\n\n    bypassChecks = function(e) {\n        // handle formnovalidate attribute\n        var el = getTarget(e);\n\n        if(el.attributes[\"formnovalidate\"] && el.type === \"submit\") {\n            bypassSubmit = true;\n        }\n    };\n\n    support = function() {\n        return (isHostMethod(field,\"validity\") && isHostMethod(field,\"checkValidity\"));\n    };\n\n    // Create helper methods to emulate attributes in older browsers\n    pattern = function(el, type) {\n        if(type === \"email\") {\n            return !emailPatt.test(el.value);\n        } else if(type === \"url\") {\n            return !urlPatt.test(el.value);\n        } else if(!type) {\n            return false;\n        } else {\n            var placeholder = el.getAttribute(\"placeholder\"),\n                val = el.value;\n\n            usrPatt = new RegExp('^(?:' + type + ')$');\n\n            if(val === placeholder) {\n                return false;\n            } else if(val === \"\") {\n                return false;\n            } else {\n                return !usrPatt.test(el.value);\n            }\n        }\n    };\n    placeholder = function(el) {\n        var attrs = { placeholder: el.getAttribute(\"placeholder\") },\n            focus = /^(focus|focusin|submit)$/i,\n            node = /^(input|textarea)$/i,\n            ignoredType = /^password$/i,\n            isNative = !!(\"placeholder\" in field);\n\n        if(!isNative && node.test(el.nodeName) && !ignoredType.test(el.type)) {\n            if(el.value === \"\" && !focus.test(curEvt)) {\n                el.value = attrs.placeholder;\n                listen(el.form,'submit', function () {\n                  curEvt = 'submit';\n                  placeholder(el);\n                }, true);\n                addClass(el,args.placeholderClass);\n            } else if(el.value === attrs.placeholder && focus.test(curEvt)) {\n                el.value = \"\";\n                removeClass(el,args.placeholderClass);\n            }\n        }\n    };\n    range = function(el, type) {\n        // Emulate min, max and step\n        var min = parseInt(el.getAttribute(\"min\"),10) || 0,\n            max = parseInt(el.getAttribute(\"max\"),10) || false,\n            step = parseInt(el.getAttribute(\"step\"),10) || 1,\n            val = parseInt(el.value,10),\n            mismatch = (val-min)%step;\n\n        if(!valueMissing(el) && !isNaN(val)) {\n            if(type === \"step\") {\n                return (el.getAttribute(\"step\")) ? (mismatch !== 0) : false;\n            } else if(type === \"min\") {\n                return (el.getAttribute(\"min\")) ? (val < min) : false;\n            } else if(type === \"max\") {\n                return (el.getAttribute(\"max\")) ? (val > max) : false;\n            }\n        } else if(el.getAttribute(\"type\") === \"number\") {\n            return true;\n        } else {\n            return false;\n        }\n    };\n    required = function(el) {\n        var required = !!(el.attributes[\"required\"]);\n\n        return (required) ? valueMissing(el) : false;\n    };\n    valueMissing = function(el) {\n        var placeholder = el.getAttribute(\"placeholder\"),\n            specialTypes = /^(checkbox|radio)$/i,\n            isRequired = !!(el.attributes[\"required\"]);\n        return !!(isRequired && (el.value === \"\" || el.value === placeholder || (specialTypes.test(el.type) && !isSiblingChecked(el))));\n    };\n\n    /* Util methods */\n    listen = function (node,type,fn,capture) {\n        if(isHostMethod(window,\"addEventListener\")) {\n            /* FF & Other Browsers */\n            node.addEventListener( type, fn, capture );\n        } else if(isHostMethod(window,\"attachEvent\") && typeof window.event !== \"undefined\") {\n            /* Internet Explorer way */\n            if(type === \"blur\") {\n                type = \"focusout\";\n            } else if(type === \"focus\") {\n                type = \"focusin\";\n            }\n            node.attachEvent( \"on\" + type, fn );\n        }\n    };\n    unlisten = function (node,type,fn,capture) {\n        if(isHostMethod(window,\"removeEventListener\")) {\n            /* FF & Other Browsers */\n            node.removeEventListener( type, fn, capture );\n        } else if(isHostMethod(window,\"detachEvent\") && typeof window.event !== \"undefined\") {\n            /* Internet Explorer way */\n            node.detachEvent( \"on\" + type, fn );\n        }\n    };\n    preventActions = function (evt) {\n        evt = evt || window.event;\n\n        if(evt.stopPropagation && evt.preventDefault) {\n            evt.stopPropagation();\n            evt.preventDefault();\n        } else {\n            evt.cancelBubble = true;\n            evt.returnValue = false;\n        }\n    };\n    getTarget = function (evt) {\n        evt = evt || window.event;\n        return evt.target || evt.srcElement;\n    };\n    addClass = function (e,c) {\n        var re;\n        if (!e.className) {\n            e.className = c;\n        }\n        else {\n            re = new RegExp('(^|\\\\s)' + c + '(\\\\s|$)');\n            if (!re.test(e.className)) { e.className += ' ' + c; }\n        }\n    };\n    removeClass = function (e,c) {\n        var re, m, arr = (typeof c === \"object\") ? c.length : 1, len = arr;\n        if (e.className) {\n            if (e.className === c) {\n                e.className = '';\n            } else {\n                while(arr--) {\n                    re = new RegExp('(^|\\\\s)' + ((len > 1) ? c[arr] : c) + '(\\\\s|$)');\n                    m = e.className.match(re);\n                    if (m && m.length === 3) { e.className = e.className.replace(re, (m[1] && m[2])?' ':''); }\n                }\n            }\n        }\n    };\n    isHostMethod = function(o, m) {\n        var t = typeof o[m], reFeaturedMethod = new RegExp('^function|object$', 'i');\n        return !!((reFeaturedMethod.test(t) && o[m]) || t === 'unknown');\n    };\n    /* Checking if one of the radio siblings is checked */\n    isSiblingChecked = function(el) {\n        var siblings = document.getElementsByName(el.name);\n        for(var i=0; i<siblings.length; i++){\n            if(siblings[i].checked){\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Since all methods are only used internally no need to expose globally\n    return {\n        setup: setup\n    };\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__webpack_require__(14);\n\nvar msgs = {\n  missing: 'Please fill in this field.',\n  mismatch: 'Please match the requested format.'\n};\n\nfunction addInvalidMarkup(f) {\n  f.setAttribute('aria-invalid', 'true');\n  f.setAttribute('aria-describedby', 'alert_' + f.id);\n\n  if (f.validity.valueMissing) f.setCustomValidity(msgs.missing);else if (f.validity.patternMismatch || f.validity.typeMismatch) f.setCustomValidity(msgs.mismatch);else f.setCustomValidity('');\n\n  f.insertAdjacentHTML('afterend', '<div role=\\'alert\\' class=\\'mt-tiny h6 red error-message\\' id=\\'alert_' + f.id + '\\'>\\n      ' + f.validationMessage + '\\n    </div>');\n}\n\nfunction removeInvalidMarkup(f) {\n  f.parentNode.classList.remove('has-error');\n  f.removeAttribute('aria-invalid');\n  f.removeAttribute('aria-describedby');\n}\n\nfunction validateField(f) {\n  f.classList.add('interacted');\n\n  var parent = f.parentNode;\n  var errorMsg = parent.querySelector('.error-message');\n\n  if (errorMsg !== null) parent.removeChild(errorMsg);\n\n  if (!f.validity.valid) addInvalidMarkup(f);else removeInvalidMarkup(f);\n}\n\nexports.default = validateField;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvYXBwL3ZhbGlkYXRlLWZpZWxkLmpzP2NjNmYiLCJ3ZWJwYWNrOi8vLz9kNDFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnY2xhc3NsaXN0LmpzJztcblxuXG5jb25zdCBtc2dzID0ge1xuICBtaXNzaW5nOiAnUGxlYXNlIGZpbGwgaW4gdGhpcyBmaWVsZC4nLFxuICBtaXNtYXRjaDogJ1BsZWFzZSBtYXRjaCB0aGUgcmVxdWVzdGVkIGZvcm1hdC4nLFxufTtcblxuZnVuY3Rpb24gYWRkSW52YWxpZE1hcmt1cChmKSB7XG4gIGYuc2V0QXR0cmlidXRlKCdhcmlhLWludmFsaWQnLCAndHJ1ZScpO1xuICBmLnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIGBhbGVydF8ke2YuaWR9YCk7XG5cbiAgaWYgKGYudmFsaWRpdHkudmFsdWVNaXNzaW5nKSBmLnNldEN1c3RvbVZhbGlkaXR5KG1zZ3MubWlzc2luZyk7XG4gIGVsc2UgaWYgKGYudmFsaWRpdHkucGF0dGVybk1pc21hdGNoXG4gICAgfHwgZi52YWxpZGl0eS50eXBlTWlzbWF0Y2gpIGYuc2V0Q3VzdG9tVmFsaWRpdHkobXNncy5taXNtYXRjaCk7XG4gIGVsc2UgZi5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG5cbiAgZi5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgJ2FmdGVyZW5kJyxcbiAgICBgPGRpdiByb2xlPSdhbGVydCcgY2xhc3M9J210LXRpbnkgaDYgcmVkIGVycm9yLW1lc3NhZ2UnIGlkPSdhbGVydF8ke2YuaWR9Jz5cbiAgICAgICR7Zi52YWxpZGF0aW9uTWVzc2FnZX1cbiAgICA8L2Rpdj5gXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUludmFsaWRNYXJrdXAoZikge1xuICBmLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWVycm9yJyk7XG4gIGYucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWludmFsaWQnKTtcbiAgZi5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVGaWVsZChmKSB7XG4gIGYuY2xhc3NMaXN0LmFkZCgnaW50ZXJhY3RlZCcpO1xuXG4gIGNvbnN0IHBhcmVudCA9IGYucGFyZW50Tm9kZTtcbiAgY29uc3QgZXJyb3JNc2cgPSBwYXJlbnQucXVlcnlTZWxlY3RvcignLmVycm9yLW1lc3NhZ2UnKTtcblxuICBpZiAoZXJyb3JNc2cgIT09IG51bGwpIHBhcmVudC5yZW1vdmVDaGlsZChlcnJvck1zZyk7XG5cbiAgaWYgKCFmLnZhbGlkaXR5LnZhbGlkKSBhZGRJbnZhbGlkTWFya3VwKGYpO1xuICBlbHNlIHJlbW92ZUludmFsaWRNYXJrdXAoZik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlRmllbGQ7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBqcy9hcHAvdmFsaWRhdGUtZmllbGQuanNcbiAqKi8iLCJ1bmRlZmluZWRcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBcbiAqKi8iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQUNBO0FDQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 14 */
/***/ function(module, exports) {

	eval("/*\n * classList.js: Cross-browser full element.classList implementation.\n * 1.1.20150312\n *\n * By Eli Grey, http://eligrey.com\n * License: Dedicated to the public domain.\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\nif (\"document\" in self) {\n\n// Full polyfill for browsers with no classList support\n// Including IE < Edge missing SVGElement.classList\nif (!(\"classList\" in document.createElement(\"_\")) \n\t|| document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\"))) {\n\n(function (view) {\n\n\"use strict\";\n\nif (!('Element' in view)) return;\n\nvar\n\t  classListProp = \"classList\"\n\t, protoProp = \"prototype\"\n\t, elemCtrProto = view.Element[protoProp]\n\t, objCtr = Object\n\t, strTrim = String[protoProp].trim || function () {\n\t\treturn this.replace(/^\\s+|\\s+$/g, \"\");\n\t}\n\t, arrIndexOf = Array[protoProp].indexOf || function (item) {\n\t\tvar\n\t\t\t  i = 0\n\t\t\t, len = this.length\n\t\t;\n\t\tfor (; i < len; i++) {\n\t\t\tif (i in this && this[i] === item) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t// Vendors: please allow content code to instantiate DOMExceptions\n\t, DOMEx = function (type, message) {\n\t\tthis.name = type;\n\t\tthis.code = DOMException[type];\n\t\tthis.message = message;\n\t}\n\t, checkTokenAndGetIndex = function (classList, token) {\n\t\tif (token === \"\") {\n\t\t\tthrow new DOMEx(\n\t\t\t\t  \"SYNTAX_ERR\"\n\t\t\t\t, \"An invalid or illegal string was specified\"\n\t\t\t);\n\t\t}\n\t\tif (/\\s/.test(token)) {\n\t\t\tthrow new DOMEx(\n\t\t\t\t  \"INVALID_CHARACTER_ERR\"\n\t\t\t\t, \"String contains an invalid character\"\n\t\t\t);\n\t\t}\n\t\treturn arrIndexOf.call(classList, token);\n\t}\n\t, ClassList = function (elem) {\n\t\tvar\n\t\t\t  trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")\n\t\t\t, classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []\n\t\t\t, i = 0\n\t\t\t, len = classes.length\n\t\t;\n\t\tfor (; i < len; i++) {\n\t\t\tthis.push(classes[i]);\n\t\t}\n\t\tthis._updateClassName = function () {\n\t\t\telem.setAttribute(\"class\", this.toString());\n\t\t};\n\t}\n\t, classListProto = ClassList[protoProp] = []\n\t, classListGetter = function () {\n\t\treturn new ClassList(this);\n\t}\n;\n// Most DOMException implementations don't allow calling DOMException's toString()\n// on non-DOMExceptions. Error's toString() is sufficient here.\nDOMEx[protoProp] = Error[protoProp];\nclassListProto.item = function (i) {\n\treturn this[i] || null;\n};\nclassListProto.contains = function (token) {\n\ttoken += \"\";\n\treturn checkTokenAndGetIndex(this, token) !== -1;\n};\nclassListProto.add = function () {\n\tvar\n\t\t  tokens = arguments\n\t\t, i = 0\n\t\t, l = tokens.length\n\t\t, token\n\t\t, updated = false\n\t;\n\tdo {\n\t\ttoken = tokens[i] + \"\";\n\t\tif (checkTokenAndGetIndex(this, token) === -1) {\n\t\t\tthis.push(token);\n\t\t\tupdated = true;\n\t\t}\n\t}\n\twhile (++i < l);\n\n\tif (updated) {\n\t\tthis._updateClassName();\n\t}\n};\nclassListProto.remove = function () {\n\tvar\n\t\t  tokens = arguments\n\t\t, i = 0\n\t\t, l = tokens.length\n\t\t, token\n\t\t, updated = false\n\t\t, index\n\t;\n\tdo {\n\t\ttoken = tokens[i] + \"\";\n\t\tindex = checkTokenAndGetIndex(this, token);\n\t\twhile (index !== -1) {\n\t\t\tthis.splice(index, 1);\n\t\t\tupdated = true;\n\t\t\tindex = checkTokenAndGetIndex(this, token);\n\t\t}\n\t}\n\twhile (++i < l);\n\n\tif (updated) {\n\t\tthis._updateClassName();\n\t}\n};\nclassListProto.toggle = function (token, force) {\n\ttoken += \"\";\n\n\tvar\n\t\t  result = this.contains(token)\n\t\t, method = result ?\n\t\t\tforce !== true && \"remove\"\n\t\t:\n\t\t\tforce !== false && \"add\"\n\t;\n\n\tif (method) {\n\t\tthis[method](token);\n\t}\n\n\tif (force === true || force === false) {\n\t\treturn force;\n\t} else {\n\t\treturn !result;\n\t}\n};\nclassListProto.toString = function () {\n\treturn this.join(\" \");\n};\n\nif (objCtr.defineProperty) {\n\tvar classListPropDesc = {\n\t\t  get: classListGetter\n\t\t, enumerable: true\n\t\t, configurable: true\n\t};\n\ttry {\n\t\tobjCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t} catch (ex) { // IE 8 doesn't support enumerable:true\n\t\tif (ex.number === -0x7FF5EC54) {\n\t\t\tclassListPropDesc.enumerable = false;\n\t\t\tobjCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t\t}\n\t}\n} else if (objCtr[protoProp].__defineGetter__) {\n\telemCtrProto.__defineGetter__(classListProp, classListGetter);\n}\n\n}(self));\n\n} else {\n// There is full or partial native classList support, so just check if we need\n// to normalize the add/remove and toggle APIs.\n\n(function () {\n\t\"use strict\";\n\n\tvar testElement = document.createElement(\"_\");\n\n\ttestElement.classList.add(\"c1\", \"c2\");\n\n\t// Polyfill for IE 10/11 and Firefox <26, where classList.add and\n\t// classList.remove exist but support only one argument at a time.\n\tif (!testElement.classList.contains(\"c2\")) {\n\t\tvar createMethod = function(method) {\n\t\t\tvar original = DOMTokenList.prototype[method];\n\n\t\t\tDOMTokenList.prototype[method] = function(token) {\n\t\t\t\tvar i, len = arguments.length;\n\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\ttoken = arguments[i];\n\t\t\t\t\toriginal.call(this, token);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t\tcreateMethod('add');\n\t\tcreateMethod('remove');\n\t}\n\n\ttestElement.classList.toggle(\"c3\", false);\n\n\t// Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n\t// support the second argument.\n\tif (testElement.classList.contains(\"c3\")) {\n\t\tvar _toggle = DOMTokenList.prototype.toggle;\n\n\t\tDOMTokenList.prototype.toggle = function(token, force) {\n\t\t\tif (1 in arguments && !this.contains(token) === !force) {\n\t\t\t\treturn force;\n\t\t\t} else {\n\t\t\t\treturn _toggle.call(this, token);\n\t\t\t}\n\t\t};\n\n\t}\n\n\ttestElement = null;\n}());\n\n}\n\n}\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _fieldKit = __webpack_require__(16);\n\nvar _validateField = __webpack_require__(13);\n\nvar _validateField2 = _interopRequireDefault(_validateField);\n\nvar _dateFormatter = __webpack_require__(17);\n\nvar _dateFormatter2 = _interopRequireDefault(_dateFormatter);\n\nvar _zipCodeFormatter = __webpack_require__(18);\n\nvar _zipCodeFormatter2 = _interopRequireDefault(_zipCodeFormatter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction formatForm() {\n  var formats = [['.dob', new _dateFormatter2.default()], ['[type=tel]', new _fieldKit.PhoneFormatter()], ['.ssn', new _fieldKit.SocialSecurityNumberFormatter()], ['.zipcode', new _zipCodeFormatter2.default()]];\n\n  formats.forEach(function (f) {\n    var _f = _slicedToArray(f, 2);\n\n    var el = _f[0];\n    var formatter = _f[1];\n\n    var input = document.querySelector(el);\n    if (input) {\n      /* eslint-disable no-new, no-shadow */\n      var field = new _fieldKit.TextField(input, formatter);\n\n      // add date format placeholders only to .dob fields\n      if (el === '.dob') {\n        field.setFocusedPlaceholder('');\n        field.setUnfocusedPlaceholder('mm/dd/yyyy');\n      }\n\n      // removes focus set by field-kit bug https://github.com/square/field-kit/issues/62\n      document.activeElement.blur();\n      field.setDelegate({\n        textFieldDidEndEditing: function textFieldDidEndEditing(field) {\n          // prevents IE from thinking empty field has changed\n          if (field.element.value !== '') {\n            (0, _validateField2.default)(field.element);\n          }\n        }\n      });\n    }\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', formatForm);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvYXBwL2Zvcm0tZmllbGQtZm9ybWF0LmpzPzc0OGMiLCJ3ZWJwYWNrOi8vLz9kNDFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBob25lRm9ybWF0dGVyLCBTb2NpYWxTZWN1cml0eU51bWJlckZvcm1hdHRlciwgVGV4dEZpZWxkIH0gZnJvbSAnZmllbGQta2l0JztcblxuaW1wb3J0IHZhbGlkYXRlRmllbGQgZnJvbSAnLi92YWxpZGF0ZS1maWVsZCc7XG5pbXBvcnQgRGF0ZUZvcm1hdHRlciBmcm9tICcuL21vZHVsZXMvZGF0ZS1mb3JtYXR0ZXInO1xuaW1wb3J0IFppcENvZGVGb3JtYXR0ZXIgZnJvbSAnLi9tb2R1bGVzL3ppcC1jb2RlLWZvcm1hdHRlcic7XG5cblxuZnVuY3Rpb24gZm9ybWF0Rm9ybSgpIHtcbiAgY29uc3QgZm9ybWF0cyA9IFtcbiAgICBbJy5kb2InLCBuZXcgRGF0ZUZvcm1hdHRlcigpXSxcbiAgICBbJ1t0eXBlPXRlbF0nLCBuZXcgUGhvbmVGb3JtYXR0ZXIoKV0sXG4gICAgWycuc3NuJywgbmV3IFNvY2lhbFNlY3VyaXR5TnVtYmVyRm9ybWF0dGVyKCldLFxuICAgIFsnLnppcGNvZGUnLCBuZXcgWmlwQ29kZUZvcm1hdHRlcigpXSxcbiAgXTtcblxuICBmb3JtYXRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgIGNvbnN0IFtlbCwgZm9ybWF0dGVyXSA9IGY7XG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLW5ldywgbm8tc2hhZG93ICovXG4gICAgICBjb25zdCBmaWVsZCA9IG5ldyBUZXh0RmllbGQoaW5wdXQsIGZvcm1hdHRlcik7XG5cbiAgICAgIC8vIGFkZCBkYXRlIGZvcm1hdCBwbGFjZWhvbGRlcnMgb25seSB0byAuZG9iIGZpZWxkc1xuICAgICAgaWYgKGVsID09PSAnLmRvYicpIHtcbiAgICAgICAgZmllbGQuc2V0Rm9jdXNlZFBsYWNlaG9sZGVyKCcnKTtcbiAgICAgICAgZmllbGQuc2V0VW5mb2N1c2VkUGxhY2Vob2xkZXIoJ21tL2RkL3l5eXknKTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVtb3ZlcyBmb2N1cyBzZXQgYnkgZmllbGQta2l0IGJ1ZyBodHRwczovL2dpdGh1Yi5jb20vc3F1YXJlL2ZpZWxkLWtpdC9pc3N1ZXMvNjJcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgZmllbGQuc2V0RGVsZWdhdGUoe1xuICAgICAgICB0ZXh0RmllbGREaWRFbmRFZGl0aW5nKGZpZWxkKSB7XG4gICAgICAgICAgLy8gcHJldmVudHMgSUUgZnJvbSB0aGlua2luZyBlbXB0eSBmaWVsZCBoYXMgY2hhbmdlZFxuICAgICAgICAgIGlmIChmaWVsZC5lbGVtZW50LnZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgdmFsaWRhdGVGaWVsZChmaWVsZC5lbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmb3JtYXRGb3JtKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGpzL2FwcC9mb3JtLWZpZWxkLWZvcm1hdC5qc1xuICoqLyIsInVuZGVmaW5lZFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIFxuICoqLyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUVBO0FBQ0E7QUFDQTtBQ01BO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	eval("var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.FieldKit = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(_dereq_,module,exports){\n(function (process){\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('InputSim', ['exports'], factory);\n  } else if (typeof exports !== 'undefined') {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.InputSim = mod.exports;\n  }\n})(this, function (exports) {\n  /*! jshint esnext:true, undef:true, unused:true */\n\n  /** @private */\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  var A = 65;\n  /** @private */\n  var Y = 89;\n  /** @private */\n  var Z = 90;\n  /** @private */\n  var ZERO = 48;\n  /** @private */\n  var NINE = 57;\n  /** @private */\n  var LEFT = 37;\n  /** @private */\n  var RIGHT = 39;\n  /** @private */\n  var UP = 38;\n  /** @private */\n  var DOWN = 40;\n  /** @private */\n  var BACKSPACE = 8;\n  /** @private */\n  var DELETE = 46;\n  /** @private */\n  var TAB = 9;\n  /** @private */\n  var ENTER = 13;\n\n  /**\n   * @namespace KEYS\n   */\n  var KEYS = {\n    A: A,\n    Y: Y,\n    Z: Z,\n    ZERO: ZERO,\n    NINE: NINE,\n    LEFT: LEFT,\n    RIGHT: RIGHT,\n    UP: UP,\n    DOWN: DOWN,\n    BACKSPACE: BACKSPACE,\n    DELETE: DELETE,\n    TAB: TAB,\n    ENTER: ENTER,\n\n    /**\n     * @param {number} keyCode\n     * @returns {boolean}\n     */\n    isDigit: function isDigit(keyCode) {\n      return ZERO <= keyCode && keyCode <= NINE;\n    },\n\n    /**\n     * Is an arrow keyCode.\n     *\n     * @param {number} keyCode\n     * @returns {boolean}\n     */\n    isDirectional: function isDirectional(keyCode) {\n      return keyCode === LEFT || keyCode === RIGHT || keyCode === UP || keyCode === DOWN;\n    }\n  };\n\n  var CTRL = 1 << 0;\n  var META = 1 << 1;\n  var ALT = 1 << 2;\n  var SHIFT = 1 << 3;\n\n  var cache = {};\n\n  /**\n   * Builds a BindingSet based on the current platform.\n   *\n   * @param {string} platform A string name of a platform (e.g. \"OSX\").\n   * @returns {BindingSet} keybindings appropriate for the given platform.\n   */\n  function keyBindingsForPlatform(platform) {\n    var osx = platform === 'OSX';\n    var ctrl = osx ? META : CTRL;\n\n    if (!cache[platform]) {\n      cache[platform] = build(function (bind) {\n        bind(A, ctrl, 'selectAll');\n        bind(LEFT, null, 'moveLeft');\n        bind(LEFT, ALT, 'moveWordLeft');\n        bind(LEFT, SHIFT, 'moveLeftAndModifySelection');\n        bind(LEFT, ALT | SHIFT, 'moveWordLeftAndModifySelection');\n        bind(RIGHT, null, 'moveRight');\n        bind(RIGHT, ALT, 'moveWordRight');\n        bind(RIGHT, SHIFT, 'moveRightAndModifySelection');\n        bind(RIGHT, ALT | SHIFT, 'moveWordRightAndModifySelection');\n        bind(UP, null, 'moveUp');\n        bind(UP, ALT, 'moveToBeginningOfParagraph');\n        bind(UP, SHIFT, 'moveUpAndModifySelection');\n        bind(UP, ALT | SHIFT, 'moveParagraphBackwardAndModifySelection');\n        bind(DOWN, null, 'moveDown');\n        bind(DOWN, ALT, 'moveToEndOfParagraph');\n        bind(DOWN, SHIFT, 'moveDownAndModifySelection');\n        bind(DOWN, ALT | SHIFT, 'moveParagraphForwardAndModifySelection');\n        bind(BACKSPACE, null, 'deleteBackward');\n        bind(BACKSPACE, SHIFT, 'deleteBackward');\n        bind(BACKSPACE, ALT, 'deleteWordBackward');\n        bind(BACKSPACE, ALT | SHIFT, 'deleteWordBackward');\n        bind(BACKSPACE, ctrl, 'deleteBackwardToBeginningOfLine');\n        bind(BACKSPACE, ctrl | SHIFT, 'deleteBackwardToBeginningOfLine');\n        bind(DELETE, null, 'deleteForward');\n        bind(DELETE, ALT, 'deleteWordForward');\n        bind(TAB, null, 'insertTab');\n        bind(TAB, SHIFT, 'insertBackTab');\n        bind(ENTER, null, 'insertNewline');\n        bind(Z, ctrl, 'undo');\n\n        if (osx) {\n          bind(LEFT, META, 'moveToBeginningOfLine');\n          bind(LEFT, META | SHIFT, 'moveToBeginningOfLineAndModifySelection');\n          bind(RIGHT, META, 'moveToEndOfLine');\n          bind(RIGHT, META | SHIFT, 'moveToEndOfLineAndModifySelection');\n          bind(UP, META, 'moveToBeginningOfDocument');\n          bind(UP, META | SHIFT, 'moveToBeginningOfDocumentAndModifySelection');\n          bind(DOWN, META, 'moveToEndOfDocument');\n          bind(DOWN, META | SHIFT, 'moveToEndOfDocumentAndModifySelection');\n          bind(BACKSPACE, CTRL, 'deleteBackwardByDecomposingPreviousCharacter');\n          bind(BACKSPACE, CTRL | SHIFT, 'deleteBackwardByDecomposingPreviousCharacter');\n          bind(Z, META | SHIFT, 'redo');\n        } else {\n          bind(Y, CTRL, 'redo');\n        }\n      });\n    }\n\n    return cache[platform];\n  }\n\n  function build(callback) {\n    var result = new BindingSet();\n    callback(function () {\n      return result.bind.apply(result, arguments);\n    });\n    return result;\n  }\n\n  /**\n   * @private\n   */\n\n  var BindingSet = (function () {\n    function BindingSet() {\n      _classCallCheck(this, BindingSet);\n\n      this.bindings = {};\n    }\n\n    /**\n     * Enum for text direction affinity.\n     *\n     * @const\n     * @enum {number}\n     * @private\n     */\n\n    /**\n     * @param {number} keyCode\n     * @param {number} modifiers\n     * @param {string} action\n     */\n\n    _createClass(BindingSet, [{\n      key: 'bind',\n      value: function bind(keyCode, modifiers, action) {\n        if (!this.bindings[keyCode]) {\n          this.bindings[keyCode] = {};\n        }\n        this.bindings[keyCode][modifiers || 0] = action;\n      }\n\n      /**\n       * @param {Event} event\n       * @returns {?string}\n       */\n    }, {\n      key: 'actionForEvent',\n      value: function actionForEvent(event) {\n        var bindingsForKeyCode = this.bindings[event.keyCode];\n        if (bindingsForKeyCode) {\n          var modifiers = 0;\n          if (event.altKey) {\n            modifiers |= ALT;\n          }\n          if (event.ctrlKey) {\n            modifiers |= CTRL;\n          }\n          if (event.metaKey) {\n            modifiers |= META;\n          }\n          if (event.shiftKey) {\n            modifiers |= SHIFT;\n          }\n          return bindingsForKeyCode[modifiers];\n        }\n      }\n    }]);\n\n    return BindingSet;\n  })();\n\n  var Affinity = {\n    UPSTREAM: 0,\n    DOWNSTREAM: 1,\n    NONE: null\n  };\n\n  /**\n   * Tests is string passed in is a single word.\n   *\n   * @param {string} chr\n   * @returns {boolean}\n   * @private\n   */\n  function isWordChar(chr) {\n    return chr && /^\\w$/.test(chr);\n  }\n\n  /**\n   * Checks if char to the left of {index} in {string}\n   * is a break (non-char).\n   *\n   * @param {string} text\n   * @param {number} index\n   * @returns {boolean}\n   * @private\n   */\n  function hasLeftWordBreakAtIndex(text, index) {\n    if (index === 0) {\n      return true;\n    } else {\n      return !isWordChar(text[index - 1]) && isWordChar(text[index]);\n    }\n  }\n\n  /**\n   * Checks if char to the right of {index} in {string}\n   * is a break (non-char).\n   *\n   * @param {string} text\n   * @param {number} index\n   * @returns {boolean}\n   * @private\n   */\n  function hasRightWordBreakAtIndex(text, index) {\n    if (index === text.length - 1) {\n      return true;\n    } else {\n      return isWordChar(text[index]) && !isWordChar(text[index + 1]);\n    }\n  }\n\n  var Input = (function () {\n    /**\n      * Sets up the initial properties of the TextField and\n      * sets  up the event listeners\n      *\n      * @param {string} value\n      * @param {Object} range ({start: 0, length: 0})\n      */\n\n    function Input(value, range) {\n      _classCallCheck(this, Input);\n\n      this._value = '';\n      this._selectedRange = {\n        start: 0,\n        length: 0\n      };\n      this.shouldCancelEvents = true;\n      this.selectionAffinity = Affinity.NONE;\n\n      if (value) {\n        this.setText(value);\n      }\n      if (range) {\n        this.setSelectedRange(range);\n      }\n      this._buildKeybindings();\n    }\n\n    /**\n     * Clears all characters in the existing selection.\n     *\n     * @example\n     *     // 12|34567|8\n     *     clearSelection();\n     *     // 12|8\n     *\n     */\n\n    _createClass(Input, [{\n      key: 'clearSelection',\n      value: function clearSelection() {\n        this.replaceSelection('');\n      }\n\n      /**\n       * Deletes backward one character or clears a non-empty selection.\n       *\n       * @example\n       *\n       *     // |What's up, doc?\n       *     deleteBackward(event);\n       *     // |What's up, doc?\n       *\n       *     // What'|s up, doc?\n       *     deleteBackward(event);\n       *     // What|s up, doc?\n       *\n       *     // |What's| up, doc?\n       *     deleteBackward(event);\n       *     // | up, doc?\n       */\n    }, {\n      key: 'deleteBackward',\n      value: function deleteBackward(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        if (range.length === 0) {\n          range.start--;\n          range.length++;\n          this.setSelectedRange(range);\n        }\n        this.clearSelection();\n      }\n\n      /**\n       * Deletes backward one word or clears a non-empty selection.\n       *\n       * @example\n       *     // |What's up, doc?\n       *     deleteWordBackward(event);\n       *     // |What's up, doc?\n       *\n       *     // What'|s up, doc?\n       *     deleteWordBackward(event);\n       *     // |s up, doc?\n       *\n       *     // |What's| up, doc?\n       *     deleteWordBackward(event);\n       *     // | up, doc?\n       */\n    }, {\n      key: 'deleteWordBackward',\n      value: function deleteWordBackward(event) {\n        if (this.hasSelection()) {\n          this.deleteBackward(event);\n        } else {\n          this._handleEvent(event);\n          var range = this.selectedRange();\n          var start = this._lastWordBreakBeforeIndex(range.start);\n          range.length += range.start - start;\n          range.start = start;\n          this.setSelectedRange(range);\n          this.clearSelection();\n        }\n      }\n\n      /**\n       * Deletes backward one character, clears a non-empty selection, or decomposes\n       * an accented character to its simple form.\n       *\n       * @TODO Make this work as described.\n       *\n       * @example\n       *     // |fiancée\n       *     deleteBackwardByDecomposingPreviousCharacter(event);\n       *     // |What's up, doc?\n       *\n       *     // fianc|é|e\n       *     deleteBackwardByDecomposingPreviousCharacter(event);\n       *     // fianc|e\n       *\n       *     // fiancé|e\n       *     deleteBackwardByDecomposingPreviousCharacter(event);\n       *     // fiance|e\n       *\n       */\n    }, {\n      key: 'deleteBackwardByDecomposingPreviousCharacter',\n      value: function deleteBackwardByDecomposingPreviousCharacter(event) {\n        this.deleteBackward(event);\n      }\n\n      /**\n       * Deletes all characters before the cursor or clears a non-empty selection.\n       *\n       * @example\n       *     // The quick |brown fox.\n       *     deleteBackwardToBeginningOfLine(event);\n       *     // |brown fox.\n       *\n       *     // The |quick |brown fox.\n       *     deleteBackwardToBeginningOfLine(event);\n       *     // The brown fox.\n       *\n       */\n    }, {\n      key: 'deleteBackwardToBeginningOfLine',\n      value: function deleteBackwardToBeginningOfLine(event) {\n        if (this.hasSelection()) {\n          this.deleteBackward(event);\n        } else {\n          this._handleEvent(event);\n          var range = this.selectedRange();\n          range.length = range.start;\n          range.start = 0;\n          this.setSelectedRange(range);\n          this.clearSelection();\n        }\n      }\n\n      /**\n       * Deletes forward one character or clears a non-empty selection.\n       *\n       * @example\n       *     // What's up, doc?|\n       *     deleteForward(event);\n       *     // What's up, doc?|\n       *\n       *     // What'|s up, doc?\n       *     deleteForward(event);\n       *     // What'| up, doc?\n       *\n       *     // |What's| up, doc?\n       *     deleteForward(event);\n       *     // | up, doc?\n       *\n       */\n    }, {\n      key: 'deleteForward',\n      value: function deleteForward(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        if (range.length === 0) {\n          range.length++;\n          this.setSelectedRange(range);\n        }\n        this.clearSelection();\n      }\n\n      /**\n       * Deletes forward one word or clears a non-empty selection.\n       *\n       * @example\n       *     // What's up, doc?|\n       *     deleteWordForward(event);\n       *     // What's up, doc?|\n       *\n       *     // What's |up, doc?\n       *     deleteWordForward(event);\n       *     // What's |, doc?\n       *\n       *     // |What's| up, doc?\n       *     deleteWordForward(event);\n       *     // | up, doc?\n       */\n    }, {\n      key: 'deleteWordForward',\n      value: function deleteWordForward(event) {\n        if (this.hasSelection()) {\n          return this.deleteForward(event);\n        } else {\n          this._handleEvent(event);\n          var range = this.selectedRange();\n          var end = this._nextWordBreakAfterIndex(range.start + range.length);\n          this.setSelectedRange({\n            start: range.start,\n            length: end - range.start\n          });\n          this.clearSelection();\n        }\n      }\n    }, {\n      key: 'handleEvent',\n      value: function handleEvent(event) {\n        if (typeof event === 'undefined') {\n          throw new Error('cannot handle and event that isn\\'t passed');\n        }\n        var action = this._bindings.actionForEvent(event);\n        if (action) this[action](event);\n        return action;\n      }\n\n      /**\n       * Determines whether this field has any selection.\n       *\n       * @returns {boolean} true if there is at least one character selected\n       */\n    }, {\n      key: 'hasSelection',\n      value: function hasSelection() {\n        return this.selectedRange().length !== 0;\n      }\n\n      /**\n       * Handles the back tab key.\n       *\n       */\n    }, {\n      key: 'insertBackTab',\n      value: function insertBackTab() {}\n\n      /**\n       * Handles a key event could be trying to end editing.\n       *\n       */\n    }, {\n      key: 'insertNewline',\n      value: function insertNewline() {}\n\n      /**\n       * Handles the tab key.\n       *\n       */\n    }, {\n      key: 'insertTab',\n      value: function insertTab() {}\n\n      /**\n       * Handles a event that is trying to insert a character.\n       *\n       * @param {string} text\n       */\n    }, {\n      key: 'insertText',\n      value: function insertText(text) {\n        var range;\n        if (this.hasSelection()) {\n          this.clearSelection();\n        }\n\n        this.replaceSelection(text);\n        range = this.selectedRange();\n        range.start += range.length;\n        range.length = 0;\n        this.setSelectedRange(range);\n      }\n\n      /**\n       * Moves the cursor up, which because this is a single-line text field, means\n       * moving to the beginning of the value.\n       *\n       * @example\n       *     // Hey guys|\n       *     moveUp(event);\n       *     // |Hey guys\n       *\n       *     // Hey |guys|\n       *     moveUp(event);\n       *     // |Hey guys\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveUp',\n      value: function moveUp(event) {\n        this._handleEvent(event);\n        this.setSelectedRange({\n          start: 0,\n          length: 0\n        });\n      }\n\n      /**\n       * Moves the cursor up to the beginning of the current paragraph, which because\n       * this is a single-line text field, means moving to the beginning of the\n       * value.\n       *\n       * @example\n       *     // Hey guys|\n       *     moveToBeginningOfParagraph(event)\n       *     // |Hey guys\n       *\n       *     // Hey |guys|\n       *     moveToBeginningOfParagraph(event)\n       *     // |Hey guys\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToBeginningOfParagraph',\n      value: function moveToBeginningOfParagraph(event) {\n        this.moveUp(event);\n      }\n\n      /**\n       * Moves the cursor up, keeping the current anchor point and extending the\n       * selection to the beginning as moveUp would.\n       *\n       * @example\n       *     // rightward selections are shrunk\n       *     // Hey guys, |where> are you?\n       *     moveUpAndModifySelection(event);\n       *     // <Hey guys, |where are you?\n       *\n       *     // leftward selections are extended\n       *     // Hey guys, <where| are you?\n       *     moveUpAndModifySelection(event);\n       *     // <Hey guys, where| are you?\n       *\n       *     // neutral selections are extended\n       *     // Hey guys, |where| are you?\n       *     moveUpAndModifySelection(event);\n       *     // <Hey guys, where| are you?\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveUpAndModifySelection',\n      value: function moveUpAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        switch (this.selectionAffinity) {\n          case Affinity.UPSTREAM:\n          case Affinity.NONE:\n            // 12<34 56|78  =>  <1234 56|78\n            range.length += range.start;\n            range.start = 0;\n            break;\n          case Affinity.DOWNSTREAM:\n            // 12|34 56>78   =>   <12|34 5678\n            range.length = range.start;\n            range.start = 0;\n            break;\n        }\n        this.setSelectedRangeWithAffinity(range, Affinity.UPSTREAM);\n      }\n\n      /**\n       * Moves the free end of the selection to the beginning of the paragraph, or\n       * since this is a single-line text field to the beginning of the line.\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveParagraphBackwardAndModifySelection',\n      value: function moveParagraphBackwardAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        switch (this.selectionAffinity) {\n          case Affinity.UPSTREAM:\n          case Affinity.NONE:\n            // 12<34 56|78  =>  <1234 56|78\n            range.length += range.start;\n            range.start = 0;\n            break;\n          case Affinity.DOWNSTREAM:\n            // 12|34 56>78  =>  12|34 5678\n            range.length = 0;\n            break;\n        }\n        this.setSelectedRangeWithAffinity(range, Affinity.UPSTREAM);\n      }\n\n      /**\n       * Moves the cursor to the beginning of the document.\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToBeginningOfDocument',\n      value: function moveToBeginningOfDocument(event) {\n        // Since we only support a single line this is just an alias.\n        this.moveToBeginningOfLine(event);\n      }\n\n      /**\n       * Moves the selection start to the beginning of the document.\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToBeginningOfDocumentAndModifySelection',\n      value: function moveToBeginningOfDocumentAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        range.length += range.start;\n        range.start = 0;\n        this.setSelectedRangeWithAffinity(range, Affinity.UPSTREAM);\n      }\n\n      /**\n       * Moves the cursor down, which because this is a single-line text field, means\n       * moving to the end of the value.\n       *\n       * @example\n       *     // Hey |guys\n       *     moveDown(event)\n       *     // Hey guys|\n       *\n       *     // |Hey| guys\n       *     moveDown(event)\n       *     // Hey guys|\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveDown',\n      value: function moveDown(event) {\n        this._handleEvent(event);\n        // 12|34 56|78  =>  1234 5678|\n        var range = {\n          start: this.text().length,\n          length: 0\n        };\n        this.setSelectedRangeWithAffinity(range, Affinity.NONE);\n      }\n\n      /**\n       * Moves the cursor up to the end of the current paragraph, which because this\n       * is a single-line text field, means moving to the end of the value.\n       *\n       * @example\n       *     // |Hey guys\n       *     moveToEndOfParagraph(event)\n       *     // Hey guys|\n       *\n       *     // Hey |guys|\n       *     moveToEndOfParagraph(event)\n       *     // Hey guys|\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToEndOfParagraph',\n      value: function moveToEndOfParagraph(event) {\n        this.moveDown(event);\n      }\n\n      /**\n       * Moves the cursor down, keeping the current anchor point and extending the\n       * selection to the end as moveDown would.\n       *\n       * @example\n       *     // leftward selections are shrunk\n       *     // Hey guys, <where| are you?\n       *     moveDownAndModifySelection(event)\n       *     // Hey guys, where| are you?>\n       *\n       *     // rightward selections are extended\n       *     // Hey guys, |where> are you?\n       *     moveDownAndModifySelection(event)\n       *     // Hey guys, |where are you?>\n       *\n       *     // neutral selections are extended\n       *     // Hey guys, |where| are you?\n       *     moveDownAndModifySelection(event)\n       *     // Hey guys, |where are you?>\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveDownAndModifySelection',\n      value: function moveDownAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        var end = this.text().length;\n        if (this.selectionAffinity === Affinity.UPSTREAM) {\n          range.start += range.length;\n        }\n        range.length = end - range.start;\n        this.setSelectedRangeWithAffinity(range, Affinity.DOWNSTREAM);\n      }\n\n      /**\n       * Moves the free end of the selection to the end of the paragraph, or since\n       * this is a single-line text field to the end of the line.\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveParagraphForwardAndModifySelection',\n      value: function moveParagraphForwardAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        switch (this.selectionAffinity) {\n          case Affinity.DOWNSTREAM:\n          case Affinity.NONE:\n            // 12|34 56>78  =>  12|34 5678>\n            range.length = this.text().length - range.start;\n            break;\n          case Affinity.UPSTREAM:\n            // 12<34 56|78  =>  12|34 5678\n            range.start += range.length;\n            range.length = 0;\n            break;\n        }\n        this.setSelectedRangeWithAffinity(range, Affinity.DOWNSTREAM);\n      }\n\n      /**\n       * Moves the cursor to the end of the document.\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToEndOfDocument',\n      value: function moveToEndOfDocument(event) {\n        // Since we only support a single line this is just an alias.\n        this.moveToEndOfLine(event);\n      }\n\n      /**\n       * Moves the selection end to the end of the document.\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToEndOfDocumentAndModifySelection',\n      value: function moveToEndOfDocumentAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        range.length = this.text().length - range.start;\n        this.setSelectedRangeWithAffinity(range, Affinity.DOWNSTREAM);\n      }\n\n      /**\n       * Moves the cursor to the left, counting selections as a thing to move past.\n       *\n       * @example\n       *     // no selection just moves the cursor left\n       *     // Hey guys|\n       *     moveLeft(event)\n       *     // Hey guy|s\n       *\n       *     // selections are removed\n       *     // Hey |guys|\n       *     moveLeft(event)\n       *     // Hey |guys\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveLeft',\n      value: function moveLeft(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        if (range.length !== 0) {\n          range.length = 0;\n        } else {\n          range.start--;\n        }\n        this.setSelectedRangeWithAffinity(range, Affinity.NONE);\n      }\n\n      /**\n       * Moves the free end of the selection one to the left.\n       *\n       * @example\n       *     // no selection just selects to the left\n       *     // Hey guys|\n       *     moveLeftAndModifySelection(event)\n       *     // Hey guy<s|\n       *\n       *     // left selections are extended\n       *     // Hey <guys|\n       *     moveLeftAndModifySelection(event)\n       *     // Hey< guys|\n       *\n       *     // right selections are shrunk\n       *     // Hey |guys>\n       *     moveLeftAndModifySelection(event)\n       *     // Hey |guy>s\n       *\n       *     // neutral selections are extended\n       *     // Hey |guys|\n       *     moveLeftAndModifySelection(event)\n       *     //Hey< guys|\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveLeftAndModifySelection',\n      value: function moveLeftAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        switch (this.selectionAffinity) {\n          case Affinity.UPSTREAM:\n          case Affinity.NONE:\n            this.selectionAffinity = Affinity.UPSTREAM;\n            range.start--;\n            range.length++;\n            break;\n          case Affinity.DOWNSTREAM:\n            range.length--;\n            break;\n        }\n        this.setSelectedRange(range);\n      }\n\n      /**\n       * Moves the cursor left until the start of a word is found.\n       *\n       * @example\n       *     // no selection just moves the cursor left\n       *     // Hey guys|\n       *     moveWordLeft(event)\n       *     // Hey |guys\n       *\n       *     // selections are removed\n       *     // Hey |guys|\n       *     moveWordLeft(event)\n       *     // |Hey guys\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveWordLeft',\n      value: function moveWordLeft(event) {\n        this._handleEvent(event);\n        var index = this._lastWordBreakBeforeIndex(this.selectedRange().start - 1);\n        this.setSelectedRange({ start: index, length: 0 });\n      }\n\n      /**\n       * Moves the free end of the current selection to the beginning of the previous\n       * word.\n       *\n       * @example\n       *     // no selection just selects to the left\n       *     // Hey guys|\n       *     moveWordLeftAndModifySelection(event)\n       *     // Hey <guys|\n       *\n       *     // left selections are extended\n       *     // Hey <guys|\n       *     moveWordLeftAndModifySelection(event)\n       *     // <Hey guys|\n       *\n       *     // right selections are shrunk\n       *     // |Hey guys>\n       *     moveWordLeftAndModifySelection(event)\n       *     // |Hey >guys\n       *\n       *     // neutral selections are extended\n       *     // Hey |guys|\n       *     moveWordLeftAndModifySelection(event)\n       *     // <Hey guys|\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveWordLeftAndModifySelection',\n      value: function moveWordLeftAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        switch (this.selectionAffinity) {\n          case Affinity.UPSTREAM:\n          case Affinity.NONE:\n            this.selectionAffinity = Affinity.UPSTREAM;\n            var start = this._lastWordBreakBeforeIndex(range.start - 1);\n            range.length += range.start - start;\n            range.start = start;\n            break;\n          case Affinity.DOWNSTREAM:\n            var end = this._lastWordBreakBeforeIndex(range.start + range.length);\n            if (end < range.start) {\n              end = range.start;\n            }\n            range.length -= range.start + range.length - end;\n            break;\n        }\n        this.setSelectedRange(range);\n      }\n\n      /**\n       * Moves the cursor to the beginning of the current line.\n       *\n       * @example\n       *     // Hey guys, where| are ya?\n       *     moveToBeginningOfLine(event)\n       *     // |Hey guys, where are ya?\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToBeginningOfLine',\n      value: function moveToBeginningOfLine(event) {\n        this._handleEvent(event);\n        this.setSelectedRange({ start: 0, length: 0 });\n      }\n\n      /**\n       * Select from the free end of the selection to the beginning of line.\n       *\n       * @example\n       *     // Hey guys, where| are ya?\n       *     moveToBeginningOfLineAndModifySelection(event)\n       *     // <Hey guys, where| are ya?\n       *\n       *     // Hey guys, where| are> ya?\n       *     moveToBeginningOfLineAndModifySelection(event)\n       *     // <Hey guys, where are| ya?\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToBeginningOfLineAndModifySelection',\n      value: function moveToBeginningOfLineAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        range.length += range.start;\n        range.start = 0;\n        this.setSelectedRangeWithAffinity(range, Affinity.UPSTREAM);\n      }\n\n      /**\n       * Moves the cursor to the right, counting selections as a thing to move past.\n       *\n       * @example\n       *     // no selection just moves the cursor right\n       *     // Hey guy|s\n       *     moveRight(event)\n       *     // Hey guys|\n       *\n       *     // selections are removed\n       *     // Hey |guys|\n       *     moveRight(event)\n       *     // Hey guys|\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveRight',\n      value: function moveRight(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        if (range.length !== 0) {\n          range.start += range.length;\n          range.length = 0;\n        } else {\n          range.start++;\n        }\n        this.setSelectedRangeWithAffinity(range, Affinity.NONE);\n      }\n\n      /**\n       * Moves the free end of the selection one to the right.\n       *\n       * @example\n       *     // no selection just selects to the right\n       *     // Hey |guys\n       *     moveRightAndModifySelection(event)\n       *     // Hey |g>uys\n       *\n       *     // right selections are extended\n       *     // Hey |gu>ys\n       *     moveRightAndModifySelection(event)\n       *     // Hey |guy>s\n       *\n       *     // left selections are shrunk\n       *     // <Hey |guys\n       *     moveRightAndModifySelection(event)\n       *     // H<ey |guys\n       *\n       *     // neutral selections are extended\n       *     // |Hey| guys\n       *     moveRightAndModifySelection(event)\n       *     // |Hey >guys\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveRightAndModifySelection',\n      value: function moveRightAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        switch (this.selectionAffinity) {\n          case Affinity.UPSTREAM:\n            range.start++;\n            range.length--;\n            break;\n          case Affinity.DOWNSTREAM:\n          case Affinity.NONE:\n            this.selectionAffinity = Affinity.DOWNSTREAM;\n            range.length++;\n            break;\n        }\n        this.setSelectedRange(range);\n      }\n\n      /**\n       * Moves the cursor right until the end of a word is found.\n       *\n       * @example\n       *     // no selection just moves the cursor right\n       *     // Hey| guys\n       *     moveWordRight(event)\n       *     // Hey guys|\n       *\n       *     // selections are removed\n       *     // |Hey| guys\n       *     moveWordRight(event)\n       *     // Hey guys|\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveWordRight',\n      value: function moveWordRight(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        var index = this._nextWordBreakAfterIndex(range.start + range.length);\n        this.setSelectedRange({ start: index, length: 0 });\n      }\n\n      /**\n       * Moves the free end of the current selection to the next end of word.\n       *\n       * @example\n       *     // no selection just selects to the right\n       *     // Hey |guys\n       *     moveWordRightAndModifySelection(event)\n       *     // Hey |guys|\n       *\n       *     // right selections are extended\n       *     // Hey |g>uys\n       *     moveWordRightAndModifySelection(event)\n       *     // Hey |guys>\n       *\n       *     // left selections are shrunk\n       *     // He<y |guys\n       *     moveWordRightAndModifySelection(event)\n       *     // Hey< |guys\n       *\n       *     // neutral selections are extended\n       *     // He|y |guys\n       *     moveWordRightAndModifySelection(event)\n       *     // He|y guys>\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveWordRightAndModifySelection',\n      value: function moveWordRightAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        var start = range.start;\n        var end = range.start + range.length;\n        switch (this.selectionAffinity) {\n          case Affinity.UPSTREAM:\n            start = Math.min(this._nextWordBreakAfterIndex(start), end);\n            break;\n          case Affinity.DOWNSTREAM:\n          case Affinity.NONE:\n            this.selectionAffinity = Affinity.DOWNSTREAM;\n            end = this._nextWordBreakAfterIndex(range.start + range.length);\n            break;\n        }\n        this.setSelectedRange({ start: start, length: end - start });\n      }\n\n      /**\n       * Moves the cursor to the end of the current line.\n       *\n       * @example\n       *     // Hey guys, where| are ya?\n       *     moveToEndOfLine(event)\n       *     // |Hey guys, where are ya?\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToEndOfLine',\n      value: function moveToEndOfLine(event) {\n        this._handleEvent(event);\n        this.setSelectedRange({ start: this.text().length, length: 0 });\n      }\n\n      /**\n       * Moves the free end of the selection to the end of the current line.\n       *\n       * @example\n       *     // Hey guys, where| are ya?\n       *     moveToEndOfLineAndModifySelection(event)\n       *     // Hey guys, where| are ya?>\n       *\n       *     // Hey guys, <where| are ya?\n       *     moveToEndOfLineAndModifySelection(event)\n       *     // Hey guys, |where are ya?>\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'moveToEndOfLineAndModifySelection',\n      value: function moveToEndOfLineAndModifySelection(event) {\n        this._handleEvent(event);\n        var range = this.selectedRange();\n        range.length = this.text().length - range.start;\n        this.setSelectedRangeWithAffinity(range, Affinity.DOWNSTREAM);\n      }\n\n      /**\n       * Replaces the characters within the selection with given text.\n       *\n       * @example\n       *     // 12|34567|8\n       *     replaceSelection('00')\n       *     // 12|00|8\n       *\n       * @param {string} replacement\n       */\n    }, {\n      key: 'replaceSelection',\n      value: function replaceSelection(replacement) {\n        var range = this.selectedRange();\n        var end = range.start + range.length;\n        var text = this.text();\n        text = text.substring(0, range.start) + replacement + text.substring(end);\n        range.length = replacement.length;\n        this.setText(text);\n        this.setSelectedRangeWithAffinity(range, Affinity.NONE);\n      }\n\n      /**\n       * Find ends of 'words' for navigational purposes.\n       *\n       * @example\n       *     // given value of '123456789' and text of '123-45-6789'\n       *     rightWordBreakIndexes()\n       *     //=> [3, 5, 9]\n       *\n       * @returns {number[]}\n       */\n    }, {\n      key: 'rightWordBreakIndexes',\n      value: function rightWordBreakIndexes() {\n        var result = [];\n        var text = this.text();\n        for (var i = 0, l = text.length; i < l; i++) {\n          if (hasRightWordBreakAtIndex(text, i)) {\n            result.push(i + 1);\n          }\n        }\n        return result;\n      }\n\n      /**\n       * Expands the selection to contain all the characters in the content.\n       *\n       * @example\n       *     // 123|45678\n       *     selectAll(event)\n       *     // |12345678|\n       *\n       * @param {Event} event\n       */\n    }, {\n      key: 'selectAll',\n      value: function selectAll(event) {\n        this._handleEvent(event);\n        this.setSelectedRangeWithAffinity({\n          start: 0,\n          length: this.text().length\n        }, Affinity.NONE);\n      }\n\n      /**\n       * Gets the object value. This is the value that should be considered the\n       * 'real' value of the field.\n       *\n       * @returns {String}\n       */\n    }, {\n      key: 'text',\n      value: function text() {\n        return this._value;\n      }\n\n      /**\n       * Sets the object value of the field.\n       *\n       * @param {string} value\n       */\n    }, {\n      key: 'setText',\n      value: function setText(value) {\n        this._value = '' + value;\n        this.setSelectedRange({\n          start: this._value.length,\n          length: 0\n        });\n      }\n\n      /**\n       * Gets the range of the current selection.\n       *\n       * @returns {Object} {start: number, length: number}\n       */\n    }, {\n      key: 'selectedRange',\n      value: function selectedRange() {\n        return this._selectedRange;\n      }\n\n      /**\n       * Sets the range of the current selection without changing the affinity.\n       * @param {Object} range ({start: 0, length: 0})\n       */\n    }, {\n      key: 'setSelectedRange',\n      value: function setSelectedRange(range) {\n        this.setSelectedRangeWithAffinity(range, this.selectionAffinity);\n      }\n\n      /**\n       * Sets the range of the current selection and the selection affinity.\n       *\n       * @param {Object} range {start: number, length: number}\n       * @param {Affinity} affinity\n       * @returns {Object} {start: 0, length: 0}\n       */\n    }, {\n      key: 'setSelectedRangeWithAffinity',\n      value: function setSelectedRangeWithAffinity(range, affinity) {\n        var min = 0;\n        var max = this.text().length;\n        var caret = {\n          start: Math.max(min, Math.min(max, range.start)),\n          end: Math.max(min, Math.min(max, range.start + range.length))\n        };\n        this._selectedRange = {\n          start: caret.start,\n          length: caret.end - caret.start\n        };\n        this.selectionAffinity = range.length === 0 ? Affinity.NONE : affinity;\n        return this._selectedRange;\n      }\n\n      /**\n       * Gets the position of the current selection's anchor point, i.e. the point\n       * that the selection extends from, if any.\n       *\n       * @returns {number}\n       */\n    }, {\n      key: 'selectionAnchor',\n      value: function selectionAnchor() {\n        var range = this.selectedRange();\n        switch (this.selectionAffinity) {\n          case Affinity.UPSTREAM:\n            return range.start + range.length;\n          case Affinity.DOWNSTREAM:\n            return range.start;\n          default:\n            return Affinity.NONE;\n        }\n      }\n\n      /**\n       * Builds the key bindings for platform\n       *\n       * @TODO: Make this better\n       * @private\n       */\n    }, {\n      key: '_buildKeybindings',\n      value: function _buildKeybindings() {\n        var osx;\n\n        if (typeof navigator !== 'undefined') {\n          osx = /^Mozilla\\/[\\d\\.]+ \\(Macintosh/.test(navigator.userAgent);\n        } else if (typeof process !== 'undefined') {\n          osx = /darwin/.test(process.platform);\n        }\n        this._bindings = keyBindingsForPlatform(osx ? 'OSX' : 'Default');\n      }\n\n      /**\n       * Handles the event based on the `shouldCancelEvents` prop.\n       *\n       * @param {Event} event\n       * @private\n       */\n    }, {\n      key: '_handleEvent',\n      value: function _handleEvent(event) {\n        if (event && this.shouldCancelEvents) {\n          event.preventDefault();\n        }\n      }\n\n      /**\n       * Finds the start of the 'word' before index.\n       *\n       * @param {number} index position at which to start looking\n       * @returns {number} index in value less than or equal to the given index\n       * @private\n       */\n    }, {\n      key: '_lastWordBreakBeforeIndex',\n      value: function _lastWordBreakBeforeIndex(index) {\n        var indexes = this._leftWordBreakIndexes();\n        var result = indexes[0];\n        for (var i = 0, l = indexes.length; i < l; i++) {\n          var wordBreakIndex = indexes[i];\n          if (index > wordBreakIndex) {\n            result = wordBreakIndex;\n          } else {\n            break;\n          }\n        }\n        return result;\n      }\n\n      /**\n       * Find starts of 'words' for navigational purposes.\n       *\n       * @example\n       *     // given value of '123456789' and text of '123-45-6789'\n       *     leftWordBreakIndexes()\n       *     // => [0, 3, 5]\n       *\n       * @returns {number[]} indexes in value of word starts.\n       * @private\n       */\n    }, {\n      key: '_leftWordBreakIndexes',\n      value: function _leftWordBreakIndexes() {\n        var result = [];\n        var text = this.text();\n        for (var i = 0, l = text.length; i < l; i++) {\n          if (hasLeftWordBreakAtIndex(text, i)) {\n            result.push(i);\n          }\n        }\n        return result;\n      }\n\n      /**\n       * Finds the end of the 'word' after index.\n       *\n       * @param {number} index position in value at which to start looking.\n       * @returns {number}\n       * @private\n       */\n    }, {\n      key: '_nextWordBreakAfterIndex',\n      value: function _nextWordBreakAfterIndex(index) {\n        var indexes = this.rightWordBreakIndexes().reverse();\n        var result = indexes[0];\n        for (var i = 0, l = indexes.length; i < l; i++) {\n          var wordBreakIndex = indexes[i];\n          if (index < wordBreakIndex) {\n            result = wordBreakIndex;\n          } else {\n            break;\n          }\n        }\n        return result;\n      }\n    }]);\n\n    return Input;\n  })();\n\n  exports.Input = Input;\n  exports.KEYS = KEYS;\n  exports.keyBindingsForPlatform = keyBindingsForPlatform;\n});\n\n\n}).call(this,_dereq_('_process'))\n},{\"_process\":1}],3:[function(_dereq_,module,exports){\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('stround', ['exports'], factory);\n  } else if (typeof exports !== 'undefined') {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.stround = mod.exports;\n  }\n})(this, function (exports) {\n  /* jshint sub:true, esnext:true, undef:true, unused:true */\n\n  /**\n   * Enum for the available rounding modes.\n   *\n   * @enum {number}\n   */\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports.parse = parse;\n  exports.format = format;\n  exports.shiftParts = shiftParts;\n  exports.shift = shift;\n  exports.round = round;\n  var modes = {\n    CEILING: 0,\n    FLOOR: 1,\n    DOWN: 2,\n    UP: 3,\n    HALF_EVEN: 4,\n    HALF_DOWN: 5,\n    HALF_UP: 6\n  };\n\n  exports.modes = modes;\n  /**\n   * @const\n   * @private\n   */\n  var NEG = '-';\n\n  /**\n   * @const\n   * @private\n   */\n  var SEP = '.';\n\n  /**\n   * @const\n   * @private\n   */\n  var NEG_PATTERN = '-';\n\n  /**\n   * @const\n   * @private\n   */\n  var SEP_PATTERN = '\\\\.';\n\n  /**\n   * @const\n   * @private\n   */\n  var NUMBER_PATTERN = new RegExp('^(' + NEG_PATTERN + ')?(\\\\d*)(?:' + SEP_PATTERN + '(\\\\d*))?$');\n\n  /**\n   * Increments the given integer represented by a string by one.\n   *\n   * @example\n   *\n   *   increment('1');  // '2'\n   *   increment('99'); // '100'\n   *   increment('');   // '1'\n   *\n   * @param {string} strint\n   * @return {string}\n   * @private\n   */\n  function increment(strint) {\n    var length = strint.length;\n\n    if (length === 0) {\n      return '1';\n    }\n\n    var last = parseInt(strint[length - 1], 10);\n\n    if (last === 9) {\n      return increment(strint.slice(0, length - 1)) + '0';\n    } else {\n      return strint.slice(0, length - 1) + (last + 1);\n    }\n  }\n\n  /**\n   * Parses the given decimal string into its component parts.\n   *\n   * @example\n   *\n   *   stround.parse('3.14');  // [false, '3', '14']\n   *   stround.parse('-3.45'); // [true, '3', '45']\n   *\n   * @param {string} strnum\n   * @return {?Array}\n   */\n\n  function parse(strnum) {\n    switch (strnum) {\n      case 'NaN':case 'Infinity':case '-Infinity':\n        return null;\n    }\n\n    var match = strnum.match(NUMBER_PATTERN);\n\n    if (!match) {\n      throw new Error('cannot round malformed number: ' + strnum);\n    }\n\n    return [match[1] !== undefined, match[2], match[3] || ''];\n  }\n\n  /**\n   * Format the given number configuration as a number string.\n   *\n   * @example\n   *\n   *   stround.format([false, '12', '34']); // '12.34'\n   *   stround.format([true, '8', '']);     // '-8'\n   *   stround.format([true, '', '7']);     // '-0.7'\n   *\n   * @param {Array} parts\n   * @return {string}\n   */\n\n  function format(_ref) {\n    var _ref2 = _slicedToArray(_ref, 3);\n\n    var negative = _ref2[0];\n    var intPart = _ref2[1];\n    var fracPart = _ref2[2];\n\n    if (intPart.length === 0) {\n      intPart = '0';\n    } else {\n      var firstNonZeroIndex = undefined;\n      for (firstNonZeroIndex = 0; firstNonZeroIndex < intPart.length; firstNonZeroIndex++) {\n        if (intPart[firstNonZeroIndex] !== '0') {\n          break;\n        }\n      }\n\n      if (firstNonZeroIndex !== intPart.length) {\n        intPart = intPart.slice(firstNonZeroIndex);\n      }\n    }\n\n    return (negative ? NEG + intPart : intPart) + (fracPart.length ? SEP + fracPart : '');\n  }\n\n  /**\n   * Shift the exponent of the given number (in parts) by the given amount.\n   *\n   * @example\n   *\n   *   stround.shiftParts([false, '12', ''], 2);  // [false, '1200', '']\n   *   stround.shiftParts([false, '12', ''], -2); // [false, '', '12']\n   *\n   * @param {Array} parts\n   * @param {number} exponent\n   * @return {Array}\n   */\n\n  function shiftParts(_ref3, exponent) {\n    var _ref32 = _slicedToArray(_ref3, 3);\n\n    var negative = _ref32[0];\n    var intPart = _ref32[1];\n    var fracPart = _ref32[2];\n\n    var partToMove = undefined;\n\n    if (exponent > 0) {\n      partToMove = fracPart.slice(0, exponent);\n      while (partToMove.length < exponent) {\n        partToMove += '0';\n      }\n      intPart += partToMove;\n      fracPart = fracPart.slice(exponent);\n    } else if (exponent < 0) {\n      while (intPart.length < -exponent) {\n        intPart = '0' + intPart;\n      }\n      partToMove = intPart.slice(intPart.length + exponent);\n      fracPart = partToMove + fracPart;\n      intPart = intPart.slice(0, intPart.length - partToMove.length);\n    }\n\n    return [negative, intPart, fracPart];\n  }\n\n  /**\n   * Shift the exponent of the given number (as a string) by the given amount.\n   *\n   *   shift('12', 2);  // '1200'\n   *   shift('12', -2); // '0.12'\n   *\n   * @param {string|number} strnum\n   * @param {number} exponent\n   * @return {string}\n   */\n\n  function shift(strnum, exponent) {\n    if (typeof strnum === 'number') {\n      strnum = '' + strnum;\n    }\n\n    var parsed = parse(strnum);\n    if (parsed === null) {\n      return strnum;\n    } else {\n      return format(shiftParts(parsed, exponent));\n    }\n  }\n\n  /**\n   * Round the given number represented by a string according to the given\n   * precision and mode.\n   *\n   * @param {string|number} strnum\n   * @param {number|null|undefined=} precision\n   * @param {modes=} mode\n   * @return {string}\n   */\n\n  function round(strnum, precision, mode) {\n    if (typeof strnum === 'number') {\n      strnum = '' + strnum;\n    }\n\n    if (typeof strnum !== 'string') {\n      throw new Error('expected a string or number, got: ' + strnum);\n    }\n\n    if (strnum.length === 0) {\n      return strnum;\n    }\n\n    if (precision === null || precision === undefined) {\n      precision = 0;\n    }\n\n    if (mode === undefined) {\n      mode = modes.HALF_EVEN;\n    }\n\n    var parsed = parse(strnum);\n\n    if (parsed === null) {\n      return strnum;\n    }\n\n    if (precision > 0) {\n      parsed = shiftParts(parsed, precision);\n    }\n\n    var _parsed = parsed;\n\n    var _parsed2 = _slicedToArray(_parsed, 3);\n\n    var negative = _parsed2[0];\n    var intPart = _parsed2[1];\n    var fracPart = _parsed2[2];\n\n    switch (mode) {\n      case modes.CEILING:case modes.FLOOR:case modes.UP:\n        var foundNonZeroDigit = false;\n        for (var i = 0, _length = fracPart.length; i < _length; i++) {\n          if (fracPart[i] !== '0') {\n            foundNonZeroDigit = true;\n            break;\n          }\n        }\n        if (foundNonZeroDigit) {\n          if (mode === modes.UP || negative !== (mode === modes.CEILING)) {\n            intPart = increment(intPart);\n          }\n        }\n        break;\n\n      case modes.HALF_EVEN:case modes.HALF_DOWN:case modes.HALF_UP:\n        var shouldRoundUp = false;\n        var firstFracPartDigit = parseInt(fracPart[0], 10);\n\n        if (firstFracPartDigit > 5) {\n          shouldRoundUp = true;\n        } else if (firstFracPartDigit === 5) {\n          if (mode === modes.HALF_UP) {\n            shouldRoundUp = true;\n          }\n\n          if (!shouldRoundUp) {\n            for (var i = 1, _length2 = fracPart.length; i < _length2; i++) {\n              if (fracPart[i] !== '0') {\n                shouldRoundUp = true;\n                break;\n              }\n            }\n          }\n\n          if (!shouldRoundUp && mode === modes.HALF_EVEN) {\n            var lastIntPartDigit = parseInt(intPart[intPart.length - 1], 10);\n            shouldRoundUp = lastIntPartDigit % 2 !== 0;\n          }\n        }\n\n        if (shouldRoundUp) {\n          intPart = increment(intPart);\n        }\n        break;\n    }\n\n    return format(shiftParts([negative, intPart, ''], -precision));\n  }\n});\n\n},{}],4:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _amex_card_formatter = _dereq_('./amex_card_formatter');\n\nvar _amex_card_formatter2 = _interopRequireDefault(_amex_card_formatter);\n\nvar _default_card_formatter = _dereq_('./default_card_formatter');\n\nvar _default_card_formatter2 = _interopRequireDefault(_default_card_formatter);\n\nvar _card_utils = _dereq_('./card_utils');\n\n/**\n * AdaptiveCardFormatter will decide if it needs to use\n * {@link AmexCardFormatter} or {@link DefaultCardFormatter}.\n */\n\nvar AdaptiveCardFormatter = (function () {\n  function AdaptiveCardFormatter() {\n    _classCallCheck(this, AdaptiveCardFormatter);\n\n    /** @private */\n    this.amexCardFormatter = new _amex_card_formatter2['default']();\n    /** @private */\n    this.defaultCardFormatter = new _default_card_formatter2['default']();\n    /** @private */\n    this.formatter = this.defaultCardFormatter;\n  }\n\n  /**\n   * Will pick the right formatter based on the `pan` and will return the\n   * formatted string.\n   *\n   * @param {string} pan\n   * @returns {string} formatted string\n   */\n\n  _createClass(AdaptiveCardFormatter, [{\n    key: 'format',\n    value: function format(pan) {\n      return this._formatterForPan(pan).format(pan);\n    }\n\n    /**\n     * Will call parse on the formatter.\n     *\n     * @param {string} text\n     * @param {function(string)} error\n     * @returns {string} returns value with delimiters removed\n     */\n  }, {\n    key: 'parse',\n    value: function parse(text, error) {\n      return this.formatter.parse(text, error);\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @param {function(!string)} error\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change, error) {\n      this.formatter = this._formatterForPan(change.proposed.text);\n      return this.formatter.isChangeValid(change, error);\n    }\n\n    /**\n     * Decides which formatter to use.\n     *\n     * @param {string} pan\n     * @returns {Formatter}\n     * @private\n     */\n  }, {\n    key: '_formatterForPan',\n    value: function _formatterForPan(pan) {\n      if ((0, _card_utils.determineCardType)(pan.replace(/[^\\d]+/g, '')) === _card_utils.AMEX) {\n        return this.amexCardFormatter;\n      } else {\n        return this.defaultCardFormatter;\n      }\n    }\n  }]);\n\n  return AdaptiveCardFormatter;\n})();\n\nexports['default'] = AdaptiveCardFormatter;\nmodule.exports = exports['default'];\n\n},{\"./amex_card_formatter\":5,\"./card_utils\":7,\"./default_card_formatter\":9}],5:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _default_card_formatter = _dereq_('./default_card_formatter');\n\nvar _default_card_formatter2 = _interopRequireDefault(_default_card_formatter);\n\n/**\n * Amex credit card formatter.\n *\n * @extends DefaultCardFormatter\n */\n\nvar AmexCardFormatter = (function (_DefaultCardFormatter) {\n  _inherits(AmexCardFormatter, _DefaultCardFormatter);\n\n  function AmexCardFormatter() {\n    _classCallCheck(this, AmexCardFormatter);\n\n    _get(Object.getPrototypeOf(AmexCardFormatter.prototype), 'constructor', this).apply(this, arguments);\n  }\n\n  _createClass(AmexCardFormatter, [{\n    key: 'hasDelimiterAtIndex',\n\n    /**\n     * @override\n     */\n    value: function hasDelimiterAtIndex(index) {\n      return index === 4 || index === 11;\n    }\n\n    /**\n     * @override\n     */\n  }, {\n    key: 'maximumLength',\n    get: function get() {\n      return 15 + 2;\n    }\n  }]);\n\n  return AmexCardFormatter;\n})(_default_card_formatter2['default']);\n\nexports['default'] = AmexCardFormatter;\nmodule.exports = exports['default'];\n\n},{\"./default_card_formatter\":9}],6:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _text_field = _dereq_('./text_field');\n\nvar _text_field2 = _interopRequireDefault(_text_field);\n\nvar _adaptive_card_formatter = _dereq_('./adaptive_card_formatter');\n\nvar _adaptive_card_formatter2 = _interopRequireDefault(_adaptive_card_formatter);\n\nvar _card_utils = _dereq_('./card_utils');\n\n/**\n * Enum for card mask strategies.\n *\n * @readonly\n * @enum {number}\n * @private\n */\nvar CardMaskStrategy = {\n  None: 'None',\n  DoneEditing: 'DoneEditing'\n};\n\n/**\n * CardTextField add some functionality for credit card inputs\n *\n * @extends TextField\n */\n\nvar CardTextField = (function (_TextField) {\n  _inherits(CardTextField, _TextField);\n\n  /**\n   * @param {HTMLElement} element\n   */\n\n  function CardTextField(element) {\n    _classCallCheck(this, CardTextField);\n\n    _get(Object.getPrototypeOf(CardTextField.prototype), 'constructor', this).call(this, element, new _adaptive_card_formatter2['default']());\n    this.setCardMaskStrategy(CardMaskStrategy.None);\n\n    /**\n     * Whether we are currently masking the displayed text.\n     *\n     * @private\n     */\n    this._masked = false;\n\n    /**\n     * Whether we are currently editing.\n     *\n     * @private\n     */\n    this._editing = false;\n  }\n\n  /**\n   * Gets the card type for the current value.\n   *\n   * @returns {string} Returns one of 'visa', 'mastercard', 'amex' and 'discover'.\n   */\n\n  _createClass(CardTextField, [{\n    key: 'cardType',\n    value: function cardType() {\n      return (0, _card_utils.determineCardType)(this.value());\n    }\n\n    /**\n     * Gets the type of masking this field uses.\n     *\n     * @returns {CardMaskStrategy}\n     */\n  }, {\n    key: 'cardMaskStrategy',\n    value: function cardMaskStrategy() {\n      return this._cardMaskStrategy;\n    }\n\n    /**\n     * Sets the type of masking this field uses.\n     *\n     * @param {CardMaskStrategy} cardMaskStrategy One of CardMaskStrategy.\n     */\n  }, {\n    key: 'setCardMaskStrategy',\n    value: function setCardMaskStrategy(cardMaskStrategy) {\n      if (cardMaskStrategy !== this._cardMaskStrategy) {\n        this._cardMaskStrategy = cardMaskStrategy;\n        this._syncMask();\n      }\n    }\n\n    /**\n     * Returns a masked version of the current formatted PAN. Example:\n     *\n     * @example\n     *     field.setText('4111 1111 1111 1111');\n     *     field.cardMask(); // \"•••• •••• •••• 1111\"\n     *\n     * @returns {string} Returns a masked card string.\n     */\n  }, {\n    key: 'cardMask',\n    value: function cardMask() {\n      var text = this.text();\n      var last4 = text.slice(-4);\n      var toMask = text.slice(0, -4);\n\n      return toMask.replace(/\\d/g, '•') + last4;\n    }\n\n    /**\n     * Gets the formatted PAN for this field.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'text',\n    value: function text() {\n      if (this._masked) {\n        return this._unmaskedText;\n      } else {\n        return _get(Object.getPrototypeOf(CardTextField.prototype), 'text', this).call(this);\n      }\n    }\n\n    /**\n     * Sets the formatted PAN for this field.\n     *\n     * @param {string} text A formatted PAN.\n     */\n  }, {\n    key: 'setText',\n    value: function setText(text) {\n      if (this._masked) {\n        this._unmaskedText = text;\n        text = this.cardMask();\n      }\n      _get(Object.getPrototypeOf(CardTextField.prototype), 'setText', this).call(this, text);\n    }\n\n    /**\n     * Called by our superclass, used to implement card masking.\n     *\n     * @private\n     */\n  }, {\n    key: 'textFieldDidEndEditing',\n    value: function textFieldDidEndEditing() {\n      this._editing = false;\n      this._syncMask();\n    }\n\n    /**\n     * Called by our superclass, used to implement card masking.\n     *\n     * @private\n     */\n  }, {\n    key: 'textFieldDidBeginEditing',\n    value: function textFieldDidBeginEditing() {\n      this._editing = true;\n      this._syncMask();\n    }\n\n    /**\n     * Enables masking if it is not already enabled.\n     *\n     * @private\n     */\n  }, {\n    key: '_enableMasking',\n    value: function _enableMasking() {\n      if (!this._masked) {\n        this._unmaskedText = this.text();\n        this._masked = true;\n        this.setText(this._unmaskedText);\n      }\n    }\n\n    /**\n     * Disables masking if it is currently enabled.\n     *\n     * @private\n     */\n  }, {\n    key: '_disableMasking',\n    value: function _disableMasking() {\n      if (this._masked) {\n        this._masked = false;\n        this.setText(this._unmaskedText);\n        this._unmaskedText = null;\n      }\n    }\n\n    /**\n     * Enables or disables masking based on the mask settings.\n     *\n     * @private\n     */\n  }, {\n    key: '_syncMask',\n    value: function _syncMask() {\n      if (this.cardMaskStrategy() === CardMaskStrategy.DoneEditing) {\n        if (this._editing) {\n          this._disableMasking();\n        } else {\n          this._enableMasking();\n        }\n      }\n    }\n\n    /**\n     * Enum for card mask strategies.\n     *\n     * @readonly\n     * @enum {number}\n     */\n  }], [{\n    key: 'CardMaskStrategy',\n    get: function get() {\n      return CardMaskStrategy;\n    }\n  }]);\n\n  return CardTextField;\n})(_text_field2['default']);\n\nexports['default'] = CardTextField;\nmodule.exports = exports['default'];\n\n},{\"./adaptive_card_formatter\":4,\"./card_utils\":7,\"./text_field\":20}],7:[function(_dereq_,module,exports){\n/**\n * @TODO Make this an enum\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.determineCardType = determineCardType;\nexports.luhnCheck = luhnCheck;\nexports.validCardLength = validCardLength;\nvar AMEX = 'amex';\nexports.AMEX = AMEX;\nvar DISCOVER = 'discover';\nexports.DISCOVER = DISCOVER;\nvar JCB = 'jcb';\nexports.JCB = JCB;\nvar MASTERCARD = 'mastercard';\nexports.MASTERCARD = MASTERCARD;\nvar VISA = 'visa';\n\nexports.VISA = VISA;\n/**\n * Pass in a credit card number and it'll return the\n * type of card it is.\n *\n * @param {string} pan\n * @returns {?string} returns the type of card based in the digits\n */\n\nfunction determineCardType(pan) {\n  if (pan === null || pan === undefined) {\n    return null;\n  }\n\n  pan = pan.toString();\n  var firsttwo = parseInt(pan.slice(0, 2), 10);\n  var iin = parseInt(pan.slice(0, 6), 10);\n  var halfiin = parseInt(pan.slice(0, 3), 10);\n\n  if (pan[0] === '4') {\n    return VISA;\n  } else if (pan.slice(0, 4) === '6011' || firsttwo === 65 || halfiin >= 664 && halfiin <= 649 || iin >= 622126 && iin <= 622925) {\n    return DISCOVER;\n  } else if (pan.slice(0, 4) === '2131' || pan.slice(0, 4) === '1800' || firsttwo === 35) {\n    return JCB;\n  } else if (firsttwo >= 51 && firsttwo <= 55) {\n    return MASTERCARD;\n  } else if (firsttwo === 34 || firsttwo === 37) {\n    return AMEX;\n  }\n}\n\n/**\n * Pass in a credit card number and it'll return if it\n * passes the [luhn algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm)\n *\n * @param {string} pan\n * @returns {boolean}\n */\n\nfunction luhnCheck(pan) {\n  var sum = 0;\n  var flip = true;\n  for (var i = pan.length - 1; i >= 0; i--) {\n    var digit = parseInt(pan.charAt(i), 10);\n    sum += (flip = !flip) ? Math.floor(digit * 2 / 10) + Math.floor(digit * 2 % 10) : digit;\n  }\n\n  return sum % 10 === 0;\n}\n\n/**\n * Pass in a credit card number and it'll return if it\n * is a valid length for that type. If it doesn't know the\n * type it'll return false\n *\n * @param {string} pan\n * @returns {boolean}\n */\n\nfunction validCardLength(pan) {\n  switch (determineCardType(pan)) {\n    case VISA:\n      return pan.length === 13 || pan.length === 16;\n    case DISCOVER:case MASTERCARD:\n      return pan.length === 16;\n    case JCB:\n      return pan.length === 15 || pan.length === 16;\n    case AMEX:\n      return pan.length === 15;\n    default:\n      return false;\n  }\n}\n\n},{}],8:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = installCaret;\n\nfunction installCaret() {\n  var _document = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\n  var getCaret = undefined;\n  var setCaret = undefined;\n\n  if (!_document) {\n    throw new Error('Caret does not have access to document');\n  } else if ('selectionStart' in _document.createElement('input')) {\n    getCaret = function (element) {\n      return {\n        start: element.selectionStart,\n        end: element.selectionEnd\n      };\n    };\n    setCaret = function (element, start, end) {\n      element.selectionStart = start;\n      element.selectionEnd = end;\n    };\n  } else if (_document.selection) {\n    getCaret = function (element) {\n      var selection = _document.selection;\n      var value = element.value;\n      var range = selection.createRange().duplicate();\n\n      range.moveEnd('character', value.length);\n\n      var start = range.text === '' ? value.length : value.lastIndexOf(range.text);\n      range = selection.createRange().duplicate();\n\n      range.moveStart('character', -value.length);\n\n      var end = range.text.length;\n      return { start: start, end: end };\n    };\n    setCaret = function (element, start, end) {\n      var range = element.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    };\n  } else {\n    throw new Error('Caret unknown input selection capabilities');\n  }\n\n  return { getCaret: getCaret, setCaret: setCaret };\n}\n\n;\nmodule.exports = exports['default'];\n\n},{}],9:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _delimited_text_formatter = _dereq_('./delimited_text_formatter');\n\nvar _delimited_text_formatter2 = _interopRequireDefault(_delimited_text_formatter);\n\nvar _card_utils = _dereq_('./card_utils');\n\n/**\n * A generic credit card formatter.\n *\n * @extends DelimitedTextFormatter\n */\n\nvar DefaultCardFormatter = (function (_DelimitedTextFormatter) {\n  _inherits(DefaultCardFormatter, _DelimitedTextFormatter);\n\n  function DefaultCardFormatter() {\n    _classCallCheck(this, DefaultCardFormatter);\n\n    _get(Object.getPrototypeOf(DefaultCardFormatter.prototype), 'constructor', this).call(this, ' ');\n  }\n\n  /**\n   * @param {number} index\n   * @returns {boolean}\n   */\n\n  _createClass(DefaultCardFormatter, [{\n    key: 'hasDelimiterAtIndex',\n    value: function hasDelimiterAtIndex(index) {\n      return index === 4 || index === 9 || index === 14;\n    }\n\n    /**\n     * Will call parse on the formatter.\n     *\n     * @param {string} text\n     * @param {function(string)} error\n     * @returns {string} returns value with delimiters removed\n     */\n  }, {\n    key: 'parse',\n    value: function parse(text, error) {\n      var value = this._valueFromText(text);\n      if (typeof error === 'function') {\n        if (!(0, _card_utils.validCardLength)(value)) {\n          error('card-formatter.number-too-short');\n        }\n        if (!(0, _card_utils.luhnCheck)(value)) {\n          error('card-formatter.invalid-number');\n        }\n      }\n      return _get(Object.getPrototypeOf(DefaultCardFormatter.prototype), 'parse', this).call(this, text, error);\n    }\n\n    /**\n     * Parses the given text by removing delimiters.\n     *\n     * @param {?string} text\n     * @returns {string}\n     * @private\n     */\n  }, {\n    key: '_valueFromText',\n    value: function _valueFromText(text) {\n      return _get(Object.getPrototypeOf(DefaultCardFormatter.prototype), '_valueFromText', this).call(this, (text || '').replace(/[^\\d]/g, ''));\n    }\n\n    /**\n     * Gets the maximum length of a formatted default card number.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: 'maximumLength',\n    get: function get() {\n      return 16 + 3;\n    }\n  }]);\n\n  return DefaultCardFormatter;\n})(_delimited_text_formatter2['default']);\n\nexports['default'] = DefaultCardFormatter;\nmodule.exports = exports['default'];\n\n},{\"./card_utils\":7,\"./delimited_text_formatter\":10}],10:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _formatter = _dereq_('./formatter');\n\nvar _formatter2 = _interopRequireDefault(_formatter);\n\n/**\n * A generic delimited formatter.\n *\n * @extends Formatter\n */\n\nvar DelimitedTextFormatter = (function (_Formatter) {\n  _inherits(DelimitedTextFormatter, _Formatter);\n\n  /**\n   * @param {string=} delimiter\n   * @param {boolean=} isLazy\n   * @throws {Error} delimiter must have just one character\n   */\n\n  function DelimitedTextFormatter(delimiter) {\n    var isLazy = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n    _classCallCheck(this, DelimitedTextFormatter);\n\n    _get(Object.getPrototypeOf(DelimitedTextFormatter.prototype), 'constructor', this).call(this);\n\n    if (arguments.length === 0) {\n      return;\n    }\n\n    if (delimiter === null || delimiter === undefined || delimiter.length !== 1) {\n      throw new Error('delimiter must have just one character');\n    }\n    this.delimiter = delimiter;\n\n    // If the formatter is lazy, delimiter will not be added until input has gone\n    // past the delimiter index. Useful for 'optional' extension, like zip codes.\n    // 94103  ->  type '1'  ->  94103-1\n    this.isLazy = isLazy;\n  }\n\n  /**\n   * Determines the delimiter character at the given index.\n   *\n   * @param {number} index\n   * @returns {?string}\n   */\n\n  _createClass(DelimitedTextFormatter, [{\n    key: 'delimiterAt',\n    value: function delimiterAt(index) {\n      if (!this.hasDelimiterAtIndex(index)) {\n        return null;\n      }\n      return this.delimiter;\n    }\n\n    /**\n     * Determines whether the given character is a delimiter.\n     *\n     * @param {string} chr\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isDelimiter',\n    value: function isDelimiter(chr) {\n      return chr === this.delimiter;\n    }\n\n    /**\n     * Formats the given value by adding delimiters where needed.\n     *\n     * @param {?string} value\n     * @returns {string}\n     */\n  }, {\n    key: 'format',\n    value: function format(value) {\n      return this._textFromValue(value);\n    }\n\n    /**\n     * Formats the given value by adding delimiters where needed.\n     *\n     * @param {?string} value\n     * @returns {string}\n     * @private\n     */\n  }, {\n    key: '_textFromValue',\n    value: function _textFromValue(value) {\n      if (!value) {\n        return '';\n      }\n\n      var result = '';\n      var delimiter = undefined;\n      var maximumLength = this.maximumLength;\n\n      for (var i = 0, l = value.length; i < l; i++) {\n        while (delimiter = this.delimiterAt(result.length)) {\n          result += delimiter;\n        }\n        result += value[i];\n        if (!this.isLazy) {\n          while (delimiter = this.delimiterAt(result.length)) {\n            result += delimiter;\n          }\n        }\n      }\n\n      if (maximumLength !== undefined && maximumLength !== null) {\n        return result.slice(0, maximumLength);\n      } else {\n        return result;\n      }\n    }\n\n    /**\n     * Parses the given text by removing delimiters.\n     *\n     * @param {?string} text\n     * @returns {string}\n     */\n  }, {\n    key: 'parse',\n    value: function parse(text) {\n      return this._valueFromText(text);\n    }\n\n    /**\n     * Parses the given text by removing delimiters.\n     *\n     * @param {?string} text\n     * @returns {string}\n     * @private\n     */\n  }, {\n    key: '_valueFromText',\n    value: function _valueFromText(text) {\n      if (!text) {\n        return '';\n      }\n      var result = '';\n      for (var i = 0, l = text.length; i < l; i++) {\n        if (!this.isDelimiter(text[i])) {\n          result += text[i];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @param {function(string)} error\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change, error) {\n      if (!_get(Object.getPrototypeOf(DelimitedTextFormatter.prototype), 'isChangeValid', this).call(this, change, error)) {\n        return false;\n      }\n\n      var newText = change.proposed.text;\n      var range = change.proposed.selectedRange;\n      var hasSelection = range.length !== 0;\n\n      var startMovedLeft = range.start < change.current.selectedRange.start;\n      var startMovedRight = range.start > change.current.selectedRange.start;\n      var endMovedLeft = range.start + range.length < change.current.selectedRange.start + change.current.selectedRange.length;\n      var endMovedRight = range.start + range.length > change.current.selectedRange.start + change.current.selectedRange.length;\n\n      var startMovedOverADelimiter = startMovedLeft && this.hasDelimiterAtIndex(range.start) || startMovedRight && this.hasDelimiterAtIndex(range.start - 1);\n      var endMovedOverADelimiter = endMovedLeft && this.hasDelimiterAtIndex(range.start + range.length) || endMovedRight && this.hasDelimiterAtIndex(range.start + range.length - 1);\n\n      if (this.isDelimiter(change.deleted.text)) {\n        var newCursorPosition = change.deleted.start - 1;\n        // delete any immediately preceding delimiters\n        while (this.isDelimiter(newText.charAt(newCursorPosition))) {\n          newText = newText.substring(0, newCursorPosition) + newText.substring(newCursorPosition + 1);\n          newCursorPosition--;\n        }\n        // finally delete the real character that was intended\n        newText = newText.substring(0, newCursorPosition) + newText.substring(newCursorPosition + 1);\n      }\n\n      // adjust the cursor / selection\n      if (startMovedLeft && startMovedOverADelimiter) {\n        // move left over any immediately preceding delimiters\n        while (this.delimiterAt(range.start - 1)) {\n          range.start--;\n          range.length++;\n        }\n        // finally move left over the real intended character\n        range.start--;\n        range.length++;\n      }\n\n      if (startMovedRight) {\n        // move right over any delimiters found on the way, including any leading delimiters\n        for (var i = change.current.selectedRange.start; i < range.start + range.length; i++) {\n          if (this.delimiterAt(i)) {\n            range.start++;\n            if (range.length > 0) {\n              range.length--;\n            }\n          }\n        }\n\n        while (this.delimiterAt(range.start)) {\n          range.start++;\n          range.length--;\n        }\n      }\n\n      if (hasSelection) {\n        // Otherwise, the logic for the range start takes care of everything.\n        if (endMovedOverADelimiter) {\n          if (endMovedLeft) {\n            // move left over any immediately preceding delimiters\n            while (this.delimiterAt(range.start + range.length - 1)) {\n              range.length--;\n            }\n            // finally move left over the real intended character\n            range.length--;\n          }\n\n          if (endMovedRight) {\n            // move right over any immediately following delimiters\n            while (this.delimiterAt(range.start + range.length)) {\n              range.length++;\n            }\n            // finally move right over the real intended character\n            range.length++;\n          }\n        }\n\n        // trailing delimiters in the selection\n        while (this.hasDelimiterAtIndex(range.start + range.length - 1)) {\n          if (startMovedLeft || endMovedLeft) {\n            range.length--;\n          } else {\n            range.length++;\n          }\n        }\n\n        while (this.hasDelimiterAtIndex(range.start)) {\n          if (startMovedRight || endMovedRight) {\n            range.start++;\n            range.length--;\n          } else {\n            range.start--;\n            range.length++;\n          }\n        }\n      } else {\n        range.length = 0;\n      }\n\n      var result = true;\n\n      var value = this._valueFromText(newText, function () {\n        result = false;\n        error.apply(undefined, arguments);\n      });\n\n      if (result) {\n        change.proposed.text = this._textFromValue(value);\n      }\n\n      return result;\n    }\n  }]);\n\n  return DelimitedTextFormatter;\n})(_formatter2['default']);\n\nexports['default'] = DelimitedTextFormatter;\nmodule.exports = exports['default'];\n\n},{\"./formatter\":14}],11:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _delimited_text_formatter = _dereq_('./delimited_text_formatter');\n\nvar _delimited_text_formatter2 = _interopRequireDefault(_delimited_text_formatter);\n\n/**\n * @const\n * @private\n */\nvar DIGITS_PATTERN = /^\\d*$/;\n\n/**\n * @extends DelimitedTextFormatter\n */\n\nvar EmployerIdentificationNumberFormatter = (function (_DelimitedTextFormatter) {\n  _inherits(EmployerIdentificationNumberFormatter, _DelimitedTextFormatter);\n\n  function EmployerIdentificationNumberFormatter() {\n    _classCallCheck(this, EmployerIdentificationNumberFormatter);\n\n    _get(Object.getPrototypeOf(EmployerIdentificationNumberFormatter.prototype), 'constructor', this).call(this, '-');\n    this.maximumLength = 9 + 1;\n  }\n\n  /**\n   * @param {number} index\n   * @returns {boolean}\n   */\n\n  _createClass(EmployerIdentificationNumberFormatter, [{\n    key: 'hasDelimiterAtIndex',\n    value: function hasDelimiterAtIndex(index) {\n      return index === 2;\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @param {function(string)} error\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change, error) {\n      if (DIGITS_PATTERN.test(change.inserted.text)) {\n        return _get(Object.getPrototypeOf(EmployerIdentificationNumberFormatter.prototype), 'isChangeValid', this).call(this, change, error);\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return EmployerIdentificationNumberFormatter;\n})(_delimited_text_formatter2['default']);\n\nexports['default'] = EmployerIdentificationNumberFormatter;\nmodule.exports = exports['default'];\n\n},{\"./delimited_text_formatter\":10}],12:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _text_field = _dereq_('./text_field');\n\nvar _text_field2 = _interopRequireDefault(_text_field);\n\nvar _expiry_date_formatter = _dereq_('./expiry_date_formatter');\n\nvar _expiry_date_formatter2 = _interopRequireDefault(_expiry_date_formatter);\n\n/**\n * Adds a default formatter for expiration dates.\n *\n * @extends TextField\n */\n\nvar ExpiryDateField = (function (_TextField) {\n  _inherits(ExpiryDateField, _TextField);\n\n  /**\n   * @param {HTMLElement} element\n   */\n\n  function ExpiryDateField(element) {\n    _classCallCheck(this, ExpiryDateField);\n\n    _get(Object.getPrototypeOf(ExpiryDateField.prototype), 'constructor', this).call(this, element, new _expiry_date_formatter2['default']());\n  }\n\n  /**\n   * Called by our superclass, used to post-process the text.\n   *\n   * @private\n   */\n\n  _createClass(ExpiryDateField, [{\n    key: 'textFieldDidEndEditing',\n    value: function textFieldDidEndEditing() {\n      var value = this.value();\n      if (value) {\n        this.setText(this.formatter().format(value));\n      }\n    }\n  }]);\n\n  return ExpiryDateField;\n})(_text_field2['default']);\n\nexports['default'] = ExpiryDateField;\nmodule.exports = exports['default'];\n\n},{\"./expiry_date_formatter\":13,\"./text_field\":20}],13:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _delimited_text_formatter = _dereq_('./delimited_text_formatter');\n\nvar _delimited_text_formatter2 = _interopRequireDefault(_delimited_text_formatter);\n\nvar _utils = _dereq_('./utils');\n\n/**\n * Give this function a 2 digit year it'll return with 4.\n *\n * @example\n *     interpretTwoDigitYear(15);\n *     // => 2015\n *     interpretTwoDigitYear(97);\n *     // => 1997\n * @param {number} year\n * @returns {number}\n * @private\n */\nfunction interpretTwoDigitYear(year) {\n  var thisYear = new Date().getFullYear();\n  var thisCentury = thisYear - thisYear % 100;\n  var centuries = [thisCentury, thisCentury - 100, thisCentury + 100].sort(function (a, b) {\n    return Math.abs(thisYear - (year + a)) - Math.abs(thisYear - (year + b));\n  });\n  return year + centuries[0];\n}\n\n/**\n * @extends DelimitedTextFormatter\n */\n\nvar ExpiryDateFormatter = (function (_DelimitedTextFormatter) {\n  _inherits(ExpiryDateFormatter, _DelimitedTextFormatter);\n\n  function ExpiryDateFormatter() {\n    _classCallCheck(this, ExpiryDateFormatter);\n\n    _get(Object.getPrototypeOf(ExpiryDateFormatter.prototype), 'constructor', this).call(this, '/');\n    this.maximumLength = 5;\n  }\n\n  /**\n   * @param {number} index\n   * @returns {boolean}\n   */\n\n  _createClass(ExpiryDateFormatter, [{\n    key: 'hasDelimiterAtIndex',\n    value: function hasDelimiterAtIndex(index) {\n      return index === 2;\n    }\n\n    /**\n     * Formats the given value by adding delimiters where needed.\n     *\n     * @param {?string} value\n     * @returns {string}\n     */\n  }, {\n    key: 'format',\n    value: function format(value) {\n      if (!value) {\n        return '';\n      }\n\n      var month = value.month;\n      var year = value.year;\n\n      year = year % 100;\n\n      return _get(Object.getPrototypeOf(ExpiryDateFormatter.prototype), 'format', this).call(this, (0, _utils.zpad2)(month) + (0, _utils.zpad2)(year));\n    }\n\n    /**\n     * Parses the given text\n     *\n     * @param {string} text\n     * @param {Function(string)} error\n     * @returns {?Object} { month: month, year: year }\n     */\n  }, {\n    key: 'parse',\n    value: function parse(text, error) {\n      var monthAndYear = text.split(this.delimiter);\n      var month = monthAndYear[0];\n      var year = monthAndYear[1];\n      if (month && month.match(/^(0?[1-9]|1\\d)$/) && year && year.match(/^\\d\\d?$/)) {\n        month = Number(month);\n        year = interpretTwoDigitYear(Number(year));\n        return { month: month, year: year };\n      } else {\n        if (typeof error === 'function') {\n          error('expiry-date-formatter.invalid-date');\n        }\n        return null;\n      }\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @param {function(string)} error\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change, error) {\n      if (!error) {\n        error = function () {};\n      }\n\n      var isBackspace = change.proposed.text.length < change.current.text.length;\n      var newText = change.proposed.text;\n\n      if (change.inserted.text === this.delimiter && change.current.text === '1') {\n        newText = '01' + this.delimiter;\n      } else if (change.inserted.text.length > 0 && !/^\\d$/.test(change.inserted.text)) {\n        error('expiry-date-formatter.only-digits-allowed');\n        return false;\n      } else {\n        if (isBackspace) {\n          if (change.deleted.text === this.delimiter) {\n            newText = newText[0];\n          }\n          if (newText === '0') {\n            newText = '';\n          }\n          if (change.inserted.text.length > 0 && !/^\\d$/.test(change.inserted.text)) {\n            error('expiry-date-formatter.only-digits-allowed');\n            return false;\n          }\n        }\n\n        // 4| -> 04|\n        if (/^[2-9]$/.test(newText)) {\n          newText = '0' + newText;\n        }\n\n        // 1|1|/5 -> 11|/5\n        if (/^1[3-9].+$/.test(newText)) {\n          error('expiry-date-formatter.invalid-month');\n          return false;\n        }\n\n        // 15| -> 01/5|\n        if (/^1[3-9]$/.test(newText)) {\n          newText = '01' + this.delimiter + newText.slice(-1);\n        }\n\n        // Don't allow 00\n        if (newText === '00') {\n          error('expiry-date-formatter.invalid-month');\n          return false;\n        }\n\n        // 11| -> 11/\n        if (/^(0[1-9]|1[0-2])$/.test(newText)) {\n          newText += this.delimiter;\n        }\n\n        var match = newText.match(/^(\\d\\d)(.)(\\d\\d?).*$/);\n        if (match && match[2] === this.delimiter) {\n          newText = match[1] + this.delimiter + match[3];\n        }\n      }\n\n      change.proposed.text = newText;\n      change.proposed.selectedRange = { start: newText.length, length: 0 };\n\n      return true;\n    }\n  }]);\n\n  return ExpiryDateFormatter;\n})(_delimited_text_formatter2['default']);\n\nexports['default'] = ExpiryDateFormatter;\nmodule.exports = exports['default'];\n\n},{\"./delimited_text_formatter\":10,\"./utils\":22}],14:[function(_dereq_,module,exports){\n/**\n * Base class providing basic formatting, parsing, and change validation to be\n * customized in subclasses.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Formatter = (function () {\n  function Formatter() {\n    _classCallCheck(this, Formatter);\n  }\n\n  _createClass(Formatter, [{\n    key: 'format',\n\n    /**\n     * @param {string} text\n     * @returns {string}\n     */\n    value: function format(text) {\n      if (text === undefined || text === null) {\n        text = '';\n      }\n      if (this.maximumLength !== undefined && this.maximumLength !== null) {\n        text = text.substring(0, this.maximumLength);\n      }\n      return text;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {string}\n     */\n  }, {\n    key: 'parse',\n    value: function parse(text) {\n      if (text === undefined || text === null) {\n        text = '';\n      }\n      if (this.maximumLength !== undefined && this.maximumLength !== null) {\n        text = text.substring(0, this.maximumLength);\n      }\n      return text;\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change) {\n      var selectedRange = change.proposed.selectedRange;\n      var text = change.proposed.text;\n      if (this.maximumLength !== undefined && this.maximumLength !== null && text.length > this.maximumLength) {\n        var available = this.maximumLength - (text.length - change.inserted.text.length);\n        var newText = change.current.text.substring(0, change.current.selectedRange.start);\n        if (available > 0) {\n          newText += change.inserted.text.substring(0, available);\n        }\n        newText += change.current.text.substring(change.current.selectedRange.start + change.current.selectedRange.length);\n        var truncatedLength = text.length - newText.length;\n        change.proposed.text = newText;\n        selectedRange.start -= truncatedLength;\n      }\n      return true;\n    }\n  }]);\n\n  return Formatter;\n})();\n\nexports['default'] = Formatter;\nmodule.exports = exports['default'];\n\n},{}],15:[function(_dereq_,module,exports){\n'use strict';\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _adaptive_card_formatter = _dereq_('./adaptive_card_formatter');\n\nvar _adaptive_card_formatter2 = _interopRequireDefault(_adaptive_card_formatter);\n\nvar _amex_card_formatter = _dereq_('./amex_card_formatter');\n\nvar _amex_card_formatter2 = _interopRequireDefault(_amex_card_formatter);\n\nvar _card_text_field = _dereq_('./card_text_field');\n\nvar _card_text_field2 = _interopRequireDefault(_card_text_field);\n\nvar _card_utils = _dereq_('./card_utils');\n\nvar _default_card_formatter = _dereq_('./default_card_formatter');\n\nvar _default_card_formatter2 = _interopRequireDefault(_default_card_formatter);\n\nvar _delimited_text_formatter = _dereq_('./delimited_text_formatter');\n\nvar _delimited_text_formatter2 = _interopRequireDefault(_delimited_text_formatter);\n\nvar _employer_identification_number_formatter = _dereq_('./employer_identification_number_formatter');\n\nvar _employer_identification_number_formatter2 = _interopRequireDefault(_employer_identification_number_formatter);\n\nvar _expiry_date_field = _dereq_('./expiry_date_field');\n\nvar _expiry_date_field2 = _interopRequireDefault(_expiry_date_field);\n\nvar _expiry_date_formatter = _dereq_('./expiry_date_formatter');\n\nvar _expiry_date_formatter2 = _interopRequireDefault(_expiry_date_formatter);\n\nvar _formatter = _dereq_('./formatter');\n\nvar _formatter2 = _interopRequireDefault(_formatter);\n\nvar _number_formatter = _dereq_('./number_formatter');\n\nvar _number_formatter2 = _interopRequireDefault(_number_formatter);\n\nvar _number_formatter_settings_formatter = _dereq_('./number_formatter_settings_formatter');\n\nvar _number_formatter_settings_formatter2 = _interopRequireDefault(_number_formatter_settings_formatter);\n\nvar _phone_formatter = _dereq_('./phone_formatter');\n\nvar _phone_formatter2 = _interopRequireDefault(_phone_formatter);\n\nvar _social_security_number_formatter = _dereq_('./social_security_number_formatter');\n\nvar _social_security_number_formatter2 = _interopRequireDefault(_social_security_number_formatter);\n\nvar _text_field = _dereq_('./text_field');\n\nvar _text_field2 = _interopRequireDefault(_text_field);\n\nvar _undo_manager = _dereq_('./undo_manager');\n\nvar _undo_manager2 = _interopRequireDefault(_undo_manager);\n\n/**\n * @namespace FieldKit\n * @readonly\n */\nmodule.exports = {\n  AdaptiveCardFormatter: _adaptive_card_formatter2['default'],\n  AmexCardFormatter: _amex_card_formatter2['default'],\n  CardTextField: _card_text_field2['default'],\n  CardUtils: {\n    AMEX: _card_utils.AMEX,\n    DISCOVER: _card_utils.DISCOVER,\n    VISA: _card_utils.VISA,\n    MASTERCARD: _card_utils.MASTERCARD,\n    determineCardType: _card_utils.determineCardType,\n    luhnCheck: _card_utils.luhnCheck,\n    validCardLength: _card_utils.validCardLength\n  },\n  DefaultCardFormatter: _default_card_formatter2['default'],\n  DelimitedTextFormatter: _delimited_text_formatter2['default'],\n  EmployerIdentificationNumberFormatter: _employer_identification_number_formatter2['default'],\n  ExpiryDateField: _expiry_date_field2['default'],\n  ExpiryDateFormatter: _expiry_date_formatter2['default'],\n  Formatter: _formatter2['default'],\n  NumberFormatter: _number_formatter2['default'],\n  NumberFormatterSettingsFormatter: _number_formatter_settings_formatter2['default'],\n  PhoneFormatter: _phone_formatter2['default'],\n  SocialSecurityNumberFormatter: _social_security_number_formatter2['default'],\n  TextField: _text_field2['default'],\n  UndoManager: _undo_manager2['default']\n};\n\n},{\"./adaptive_card_formatter\":4,\"./amex_card_formatter\":5,\"./card_text_field\":6,\"./card_utils\":7,\"./default_card_formatter\":9,\"./delimited_text_formatter\":10,\"./employer_identification_number_formatter\":11,\"./expiry_date_field\":12,\"./expiry_date_formatter\":13,\"./formatter\":14,\"./number_formatter\":16,\"./number_formatter_settings_formatter\":17,\"./phone_formatter\":18,\"./social_security_number_formatter\":19,\"./text_field\":20,\"./undo_manager\":21}],16:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _formatter = _dereq_('./formatter');\n\nvar _formatter2 = _interopRequireDefault(_formatter);\n\nvar _number_formatter_settings_formatter = _dereq_('./number_formatter_settings_formatter');\n\nvar _number_formatter_settings_formatter2 = _interopRequireDefault(_number_formatter_settings_formatter);\n\nvar _utils = _dereq_('./utils');\n\nvar _stround = _dereq_('stround');\n\n// Style\nvar NONE = 0;\nvar CURRENCY = 1;\nvar PERCENT = 2;\n\nvar DEFAULT_LOCALE = 'en-US';\nvar DEFAULT_COUNTRY = 'US';\n\n/**\n * @param {string} locale\n * @returns {Object} {lang: lang, country: country}\n * @private\n */\nfunction splitLocaleComponents(locale) {\n  var match = locale.match(/^([a-z][a-z])(?:[-_]([a-z][a-z]))?$/i);\n  if (match) {\n    var lang = match[1] && match[1].toLowerCase();\n    var country = match[2] && match[2].toLowerCase();\n    return { lang: lang, country: country };\n  }\n}\n\n/**\n * This simple property getter assumes that properties will never be functions\n * and so attempts to run those functions using the given args.\n *\n * @private\n */\nfunction get(object, key) {\n  if (object) {\n    var value = object[key];\n    if (typeof value === 'function') {\n      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      return value.apply(undefined, args);\n    } else {\n      return value;\n    }\n  }\n}\n\n/**\n * @param {string} string\n * @param {string} currencySymbol\n * @return {string}\n * @private\n */\nfunction replaceCurrencySymbol(string, currencySymbol) {\n  return string.replace(/¤/g, currencySymbol);\n}\n\n/**\n * @param {string} string\n * @param {string} plusSign\n * @returns {string}\n * @private\n */\nfunction replacePlusSign(string, plusSign) {\n  return string.replace(/\\+/g, plusSign);\n}\n/**\n * @param {string} string\n * @param {string} minusSign\n * @returns {string}\n * @private\n */\nfunction replaceMinusSign(string, minusSign) {\n  return string.replace(/-/g, minusSign);\n}\n\n/**\n * Formats and parses numbers. There are many configuration options for how to\n * format numbers as strings, but for many users simply adjusting the\n * {@link NumberFormatter#numberStyle}, {@link NumberFormatter#locale},\n * {@link NumberFormatter#currencyCode}, and {@link NumberFormatter#countryCode}\n * values will be sufficient. NumberFormatter natively understands how to\n * format numbers, currencies, and percentages for a variety of locales.\n *\n * @example\n *\n *   // Configure a NumberFormatter to display currencies.\n *   var f = new FieldKit.NumberFormatter();\n *   f.setNumberStyle(FieldKit.NumberFormatter.Style.CURRENCY);\n *\n *   // Configure the current locale info.\n *   f.setLocale('en-US');\n *   f.setCountryCode('US');\n *   f.setCurrencyCode('USD');\n *\n *   // Showing USD in US uses abbreviated currency.\n *   f.format(6.17);  // '$6.17'\n *\n *   // Showing CAD in US uses fully-qualified currency.\n *   f.setCurrencyCode('CAD');\n *   f.format(6.17);  // 'CA$6.17'\n *\n *   // Showing CAD in CA again uses abbreviated currency.\n *   f.setLocale('en-CA');\n *   f.setCountryCode('CA');\n *   f.format(6.17);  // '$6.17'\n *\n *   // Showing CAD in CA to a French speaker uses correct formatting.\n *   f.setLocale('fr-CA');\n *   f.format(6.17);  // '6,17 $'\n *\n *   // You may customize the behavior of NumberFormatter to achieve whatever\n *   // number formatting you need using the setter methods for the various\n *   // settings, or you can use the {@link NumberFormatter#positiveFormat} and\n *   // {@link NumberFormatter#negativeFormat} shorthand templates.\n *\n *   var f = new FieldKit.NumberFormatter();\n *\n *   // Using this template string…\n *   f.setPositiveFormat('¤#0.00');\n *\n *   // …is equivalent to this:\n *   f.setPositivePrefix('¤');\n *   f.setPositiveSuffix('');\n *   f.setMinimumIntegerDigits(1);\n *   f.setMinimumFractionDigits(2);\n *   f.setMaximumFractionDigits(2);\n *\n *   // And you can determine what the template string is for however you've\n *   // configured the NumberFormatter:\n *   f.setUsesGroupingSeparator(true);\n *   f.setGroupingSize(2);\n *   f.positiveFormat(); // '¤#,#0.00'\n *\n * @extends Formatter\n */\n\nvar NumberFormatter = (function (_Formatter) {\n  _inherits(NumberFormatter, _Formatter);\n\n  function NumberFormatter() {\n    _classCallCheck(this, NumberFormatter);\n\n    _get(Object.getPrototypeOf(NumberFormatter.prototype), 'constructor', this).call(this);\n    this.setNumberStyle(NONE);\n  }\n\n  /**\n   * Defaults\n   */\n\n  /** @private */\n\n  /**\n   * Gets whether this formatter will parse float number values. This value does\n   * not apply to formatting. To prevent formatting floats, set\n   * maximumFractionDigits to 0.\n   *\n   * @returns {boolean}\n   */\n\n  _createClass(NumberFormatter, [{\n    key: 'allowsFloats',\n    value: function allowsFloats() {\n      return this._get('allowsFloats');\n    }\n\n    /**\n     * Sets whether this formatter will parse float number values.\n     *\n     * @param {boolean} allowsFloats\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setAllowsFloats',\n    value: function setAllowsFloats(allowsFloats) {\n      this._allowsFloats = allowsFloats;\n      return this;\n    }\n\n    /**\n     * Gets whether this formatter should show the decimal separator.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: 'alwaysShowsDecimalSeparator',\n    value: function alwaysShowsDecimalSeparator() {\n      return this._get('alwaysShowsDecimalSeparator');\n    }\n\n    /**\n     * Sets whether this formatter will show the decimal separator.\n     *\n     * @param {boolean} alwaysShowsDecimalSeparator\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setAlwaysShowsDecimalSeparator',\n    value: function setAlwaysShowsDecimalSeparator(alwaysShowsDecimalSeparator) {\n      this._alwaysShowsDecimalSeparator = alwaysShowsDecimalSeparator;\n      return this;\n    }\n\n    /**\n     * Gets the country code for formatter.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'countryCode',\n    value: function countryCode() {\n      return this._countryCode || DEFAULT_COUNTRY;\n    }\n\n    /**\n     * Sets the country code for formatter.\n     *\n     * @param {string} countryCode\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setCountryCode',\n    value: function setCountryCode(countryCode) {\n      this._countryCode = countryCode;\n      return this;\n    }\n\n    /**\n     * Gets the currency code for formatter.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'currencyCode',\n    value: function currencyCode() {\n      return this._get('currencyCode');\n    }\n\n    /**\n     * Sets the currency code for formatter.\n     *\n     * @param {string} currencyCode\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setCurrencyCode',\n    value: function setCurrencyCode(currencyCode) {\n      this._currencyCode = currencyCode;\n      return this;\n    }\n\n    /**\n     * Gets the currency symbol for formatter.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'currencySymbol',\n    value: function currencySymbol() {\n      if (this._shouldShowNativeCurrencySymbol()) {\n        return this._get('currencySymbol');\n      } else {\n        return this._get('internationalCurrencySymbol');\n      }\n    }\n\n    /**\n     * Sets the currency symbol for formatter.\n     *\n     * @param {string} currencySymbol\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setCurrencySymbol',\n    value: function setCurrencySymbol(currencySymbol) {\n      this._currencySymbol = currencySymbol;\n      return this;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n  }, {\n    key: '_shouldShowNativeCurrencySymbol',\n    value: function _shouldShowNativeCurrencySymbol() {\n      var regionDefaultCurrencyCode = this._regionDefaults().currencyCode;\n      if (typeof regionDefaultCurrencyCode === 'function') {\n        regionDefaultCurrencyCode = regionDefaultCurrencyCode();\n      }\n      return this.currencyCode() === regionDefaultCurrencyCode;\n    }\n\n    /**\n     * Gets the decimal separator for formatter.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'decimalSeparator',\n    value: function decimalSeparator() {\n      return this._get('decimalSeparator');\n    }\n\n    /**\n     * Sets the decimal separator for formatter.\n     *\n     * @param {string} decimalSeparator\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setDecimalSeparator',\n    value: function setDecimalSeparator(decimalSeparator) {\n      this._decimalSeparator = decimalSeparator;\n      return this;\n    }\n\n    /**\n     * Gets the number of decimal places to shift numbers before formatting.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'exponent',\n    value: function exponent() {\n      return this._get('exponent');\n    }\n\n    /**\n     * Sets the number of decimal places to shift numbers before formatting.\n     *\n     * @param exponent\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setExponent',\n    value: function setExponent(exponent) {\n      this._exponent = exponent;\n      return this;\n    }\n  }, {\n    key: 'groupingSeparator',\n    value: function groupingSeparator() {\n      return this._get('groupingSeparator');\n    }\n\n    /**\n     * @param {string} groupingSeparator\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setGroupingSeparator',\n    value: function setGroupingSeparator(groupingSeparator) {\n      this._groupingSeparator = groupingSeparator;\n      return this;\n    }\n\n    /**\n     * Gets the grouping size for formatter.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: 'groupingSize',\n    value: function groupingSize() {\n      return this._get('groupingSize');\n    }\n\n    /**\n     * @param {number} groupingSize\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setGroupingSize',\n    value: function setGroupingSize(groupingSize) {\n      this._groupingSize = groupingSize;\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'internationalCurrencySymbol',\n    value: function internationalCurrencySymbol() {\n      return this._get('internationalCurrencySymbol');\n    }\n\n    /**\n     * @param {string} internationalCurrencySymbol\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setInternationalCurrencySymbol',\n    value: function setInternationalCurrencySymbol(internationalCurrencySymbol) {\n      this._internationalCurrencySymbol = internationalCurrencySymbol;\n      return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isLenient',\n    value: function isLenient() {\n      return this._lenient;\n    }\n\n    /**\n     * @param {boolean} lenient\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setLenient',\n    value: function setLenient(lenient) {\n      this._lenient = lenient;\n      return this;\n    }\n\n    /**\n     * Gets the locale identifier for which this formatter is currently\n     * configured to format strings. This setting controls default settings such\n     * as the grouping separator character, decimal separator character, placement\n     * of currency and percent symbols, etc.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'locale',\n    value: function locale() {\n      return this._locale || DEFAULT_LOCALE;\n    }\n\n    /**\n     * Sets the locale identifier used for default settings values.\n     *\n     * @see {@link NumberFormatter#locale}\n     * @param {string} locale\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setLocale',\n    value: function setLocale(locale) {\n      this._locale = locale;\n      return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n  }, {\n    key: 'maximum',\n    value: function maximum() {\n      return this._maximum;\n    }\n\n    /**\n     * @param {number} max\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setMaximum',\n    value: function setMaximum(max) {\n      this._maximum = max;\n      return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n  }, {\n    key: 'minimum',\n    value: function minimum() {\n      return this._minimum;\n    }\n\n    /**\n     * @param {number} min\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setMinimum',\n    value: function setMinimum(min) {\n      this._minimum = min;\n      return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n  }, {\n    key: 'maximumFractionDigits',\n    value: function maximumFractionDigits() {\n      var result = this._get('maximumFractionDigits');\n      var minimumFractionDigits = this._minimumFractionDigits;\n      if (result !== null && result !== undefined && minimumFractionDigits !== null && minimumFractionDigits !== undefined && minimumFractionDigits > result) {\n        result = minimumFractionDigits;\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} maximumFractionDigits\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setMaximumFractionDigits',\n    value: function setMaximumFractionDigits(maximumFractionDigits) {\n      this._maximumFractionDigits = maximumFractionDigits;\n      return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n  }, {\n    key: 'minimumFractionDigits',\n    value: function minimumFractionDigits() {\n      var result = this._get('minimumFractionDigits');\n      var maximumFractionDigits = this._maximumFractionDigits;\n      if (result !== null && result !== undefined && maximumFractionDigits !== null && maximumFractionDigits !== undefined && maximumFractionDigits < result) {\n        result = maximumFractionDigits;\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} minimumFractionDigits\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setMinimumFractionDigits',\n    value: function setMinimumFractionDigits(minimumFractionDigits) {\n      this._minimumFractionDigits = minimumFractionDigits;\n      return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n  }, {\n    key: 'maximumIntegerDigits',\n    value: function maximumIntegerDigits() {\n      var result = this._get('maximumIntegerDigits');\n      var minimumIntegerDigits = this._minimumIntegerDigits;\n      if (result !== null && result !== undefined && minimumIntegerDigits !== null && minimumIntegerDigits !== undefined && minimumIntegerDigits > result) {\n        result = minimumIntegerDigits;\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} maximumIntegerDigits\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setMaximumIntegerDigits',\n    value: function setMaximumIntegerDigits(maximumIntegerDigits) {\n      this._maximumIntegerDigits = maximumIntegerDigits;\n      return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n  }, {\n    key: 'minimumIntegerDigits',\n    value: function minimumIntegerDigits() {\n      var result = this._get('minimumIntegerDigits');\n      var maximumIntegerDigits = this._maximumIntegerDigits;\n      if (result !== null && result !== undefined && maximumIntegerDigits !== null && maximumIntegerDigits !== undefined && maximumIntegerDigits < result) {\n        result = maximumIntegerDigits;\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} minimumIntegerDigits\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setMinimumIntegerDigits',\n    value: function setMinimumIntegerDigits(minimumIntegerDigits) {\n      this._minimumIntegerDigits = minimumIntegerDigits;\n      return this;\n    }\n\n    /**\n     * Gets the minus sign used for negative numbers in some locales.\n     *\n     * @returns {?string}\n     */\n  }, {\n    key: 'minusSign',\n    value: function minusSign() {\n      return this._get('minusSign');\n    }\n\n    /**\n     * Sets the minus sign used for negative numbers in some locales.\n     *\n     * @param {?string} minusSign\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setMinusSign',\n    value: function setMinusSign(minusSign) {\n      this._minusSign = minusSign;\n      return this;\n    }\n\n    /**\n     * Gets the negative number format string for the current settings. For\n     * example, changing `minimumFractionDigits` from 0 to 3 would change this\n     * value from \"-#\" to \"-#.000\".\n     *\n     * @return {string}\n     */\n  }, {\n    key: 'negativeFormat',\n    value: function negativeFormat() {\n      return this.numberFormatFormatter().format({\n        alwaysShowsDecimalSeparator: this.alwaysShowsDecimalSeparator(),\n        groupingSize: this.groupingSize(),\n        maximumFractionDigits: this.maximumFractionDigits(),\n        minimumFractionDigits: this.minimumFractionDigits(),\n        minimumIntegerDigits: this.minimumIntegerDigits(),\n        prefix: this._get('negativePrefix'),\n        suffix: this._get('negativeSuffix'),\n        usesGroupingSeparator: this.usesGroupingSeparator()\n      });\n    }\n\n    /**\n     * Configures this number formatter according to the given format string.\n     * For most usages you should simply use\n     * {@link NumberFormatter#setPositiveFormat} and configure the negative\n     * prefix and suffix separately.\n     *\n     * @param negativeFormat\n     */\n  }, {\n    key: 'setNegativeFormat',\n    value: function setNegativeFormat(negativeFormat) {\n      var settings = this.numberFormatFormatter().parse(negativeFormat);\n      this.setNegativePrefix(settings.prefix);\n      this.setNegativeSuffix(settings.suffix);\n      this.setGroupingSize(settings.groupingSize);\n      this.setMaximumFractionDigits(settings.maximumFractionDigits);\n      this.setMinimumFractionDigits(settings.minimumFractionDigits);\n      this.setMinimumIntegerDigits(settings.minimumIntegerDigits);\n      this.setUsesGroupingSeparator(settings.usesGroupingSeparator);\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'negativeInfinitySymbol',\n    value: function negativeInfinitySymbol() {\n      return this._get('negativeInfinitySymbol');\n    }\n\n    /**\n     * @param {string} negativeInfinitySymbol\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setNegativeInfinitySymbol',\n    value: function setNegativeInfinitySymbol(negativeInfinitySymbol) {\n      this._negativeInfinitySymbol = negativeInfinitySymbol;\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'negativePrefix',\n    value: function negativePrefix() {\n      return replaceCurrencySymbol(replaceMinusSign(this._get('negativePrefix'), this._get('minusSign')), this.currencySymbol());\n    }\n\n    /**\n     * @param {string} prefix\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setNegativePrefix',\n    value: function setNegativePrefix(prefix) {\n      this._negativePrefix = prefix;\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'negativeSuffix',\n    value: function negativeSuffix() {\n      return replaceCurrencySymbol(replaceMinusSign(this._get('negativeSuffix'), this._get('minusSign')), this.currencySymbol());\n    }\n\n    /**\n     * @param {string} prefix\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setNegativeSuffix',\n    value: function setNegativeSuffix(prefix) {\n      this._negativeSuffix = prefix;\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'notANumberSymbol',\n    value: function notANumberSymbol() {\n      return this._get('notANumberSymbol');\n    }\n\n    /**\n     * @param {string} notANumberSymbol\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setNotANumberSymbol',\n    value: function setNotANumberSymbol(notANumberSymbol) {\n      this._notANumberSymbol = notANumberSymbol;\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'nullSymbol',\n    value: function nullSymbol() {\n      return this._get('nullSymbol');\n    }\n\n    /**\n     * @param {string} nullSymbol\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setNullSymbol',\n    value: function setNullSymbol(nullSymbol) {\n      this._nullSymbol = nullSymbol;\n      return this;\n    }\n\n    /**\n     * @return {NumberFormatterSettingsFormatter}\n     * @private\n     */\n  }, {\n    key: 'numberFormatFormatter',\n    value: function numberFormatFormatter() {\n      if (!this._numberFormatFormatter) {\n        this._numberFormatFormatter = new _number_formatter_settings_formatter2['default']();\n      }\n      return this._numberFormatFormatter;\n    }\n\n    /**\n     * Gets the number style used to configure various default setting values.\n     *\n     * @returns {NumberFormatter.Style}\n     */\n  }, {\n    key: 'numberStyle',\n    value: function numberStyle() {\n      return this._numberStyle;\n    }\n\n    /**\n     * Sets the number style used to configure various default setting values.\n     *\n     * @param {string} numberStyle\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setNumberStyle',\n    value: function setNumberStyle(numberStyle) {\n      this._numberStyle = numberStyle;\n      switch (this._numberStyle) {\n        case NONE:\n          this._styleDefaults = StyleDefaults.NONE;\n          break;\n        case PERCENT:\n          this._styleDefaults = StyleDefaults.PERCENT;\n          break;\n        case CURRENCY:\n          this._styleDefaults = StyleDefaults.CURRENCY;\n          break;\n        default:\n          this._styleDefaults = null;\n      }\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'percentSymbol',\n    value: function percentSymbol() {\n      return this._get('percentSymbol');\n    }\n\n    /**\n     * @param {string} percentSymbol\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setPercentSymbol',\n    value: function setPercentSymbol(percentSymbol) {\n      this._percentSymbol = percentSymbol;\n      return this;\n    }\n\n    /**\n     * Gets the plus sign used in positive numbers in some locales.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'plusSign',\n    value: function plusSign() {\n      return this._get('plusSign');\n    }\n\n    /**\n     * Sets the plus sign used in positive numbers in some locales.\n     *\n     * @param {?string} plusSign\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setPlusSign',\n    value: function setPlusSign(plusSign) {\n      this._plusSign = plusSign;\n      return this;\n    }\n\n    /**\n     * Gets the positive number format string for the current settings. For\n     * example, changing `minimumFractionDigits` from 0 to 3 would change this\n     * value from \"#\" to \"#.000\".\n     *\n     * @return {string}\n     */\n  }, {\n    key: 'positiveFormat',\n    value: function positiveFormat() {\n      return this.numberFormatFormatter().format({\n        alwaysShowsDecimalSeparator: this.alwaysShowsDecimalSeparator(),\n        groupingSize: this.groupingSize(),\n        maximumFractionDigits: this.maximumFractionDigits(),\n        minimumFractionDigits: this.minimumFractionDigits(),\n        minimumIntegerDigits: this.minimumIntegerDigits(),\n        prefix: this._get('positivePrefix'),\n        suffix: this._get('positiveSuffix'),\n        usesGroupingSeparator: this.usesGroupingSeparator()\n      });\n    }\n\n    /**\n     * Configures this number formatter according to the given format string.\n     *\n     * @example\n     *\n     *   // Use '0' for padding, '.' for decimal separator.\n     *   formatter.setPositiveFormat('00.000');\n     *   formatter.format(2);     // '02.000'\n     *   formatter.format(-5.03); // '-05.030'\n     *   formatter.setLocale('fr-FR');\n     *   formatter.format(2);     // '02,000'\n     *\n     *   // Use '#' for maximum fraction digits.\n     *   formatter.setPositiveFormat('#.##');\n     *   formatter.format(3.456); // '3.46'\n     *\n     *   // Use '¤' as the currency placeholder.\n     *   formatter.setPositiveFormat('¤#0.00');\n     *   formatter.format(1.23); // '$1.23'\n     *   formatter.setCurrencyCode('JPY');\n     *   formatter.format(81);   // 'JP¥81.00'\n     *   formatter.setLocale('jp-JP');\n     *   formatter.format(7);   // '¥7.00'\n     *\n     *   // Use ',' for grouping separator placement.\n     *   formatter.setPositiveFormat('#,##');\n     *   formatter.format(123); // '1,23'\n     *\n     * @param positiveFormat\n     */\n  }, {\n    key: 'setPositiveFormat',\n    value: function setPositiveFormat(positiveFormat) {\n      var settings = this.numberFormatFormatter().parse(positiveFormat);\n      this.setPositivePrefix(settings.prefix);\n      this.setPositiveSuffix(settings.suffix);\n      this.setGroupingSize(settings.groupingSize);\n      this.setMaximumFractionDigits(settings.maximumFractionDigits);\n      this.setMinimumFractionDigits(settings.minimumFractionDigits);\n      this.setMinimumIntegerDigits(settings.minimumIntegerDigits);\n      this.setUsesGroupingSeparator(settings.usesGroupingSeparator);\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'positiveInfinitySymbol',\n    value: function positiveInfinitySymbol() {\n      return this._get('positiveInfinitySymbol');\n    }\n\n    /**\n     * @param {string} positiveInfinitySymbol\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setPositiveInfinitySymbol',\n    value: function setPositiveInfinitySymbol(positiveInfinitySymbol) {\n      this._positiveInfinitySymbol = positiveInfinitySymbol;\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'positivePrefix',\n    value: function positivePrefix() {\n      return replaceCurrencySymbol(replacePlusSign(this._get('positivePrefix'), this._get('plusSign')), this.currencySymbol());\n    }\n\n    /**\n     * @param {string} prefix\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setPositivePrefix',\n    value: function setPositivePrefix(prefix) {\n      this._positivePrefix = prefix;\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'positiveSuffix',\n    value: function positiveSuffix() {\n      return replaceCurrencySymbol(replacePlusSign(this._get('positiveSuffix'), this._get('plusSign')), this.currencySymbol());\n    }\n\n    /**\n     * @param {string} prefix\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setPositiveSuffix',\n    value: function setPositiveSuffix(prefix) {\n      this._positiveSuffix = prefix;\n      return this;\n    }\n\n    /**\n     * @returns {Function}\n     */\n  }, {\n    key: 'roundingMode',\n    value: function roundingMode() {\n      return this._get('roundingMode');\n    }\n\n    /**\n     * @param {Function} roundingMode\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setRoundingMode',\n    value: function setRoundingMode(roundingMode) {\n      this._roundingMode = roundingMode;\n      return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n  }, {\n    key: 'usesGroupingSeparator',\n    value: function usesGroupingSeparator() {\n      return this._get('usesGroupingSeparator');\n    }\n\n    /**\n     * @param {boolean} usesGroupingSeparator\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setUsesGroupingSeparator',\n    value: function setUsesGroupingSeparator(usesGroupingSeparator) {\n      this._usesGroupingSeparator = usesGroupingSeparator;\n      return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n  }, {\n    key: 'zeroSymbol',\n    value: function zeroSymbol() {\n      return this._get('zeroSymbol');\n    }\n\n    /**\n     * @param {string} zeroSymbol\n     * @returns {NumberFormatter}\n     */\n  }, {\n    key: 'setZeroSymbol',\n    value: function setZeroSymbol(zeroSymbol) {\n      this._zeroSymbol = zeroSymbol;\n      return this;\n    }\n\n    /**\n     * @param {string} attr\n     * @returns {*}\n     * @private\n     */\n  }, {\n    key: '_get',\n    value: function _get(attr) {\n      var value = this['_' + attr];\n      if (value !== null && value !== undefined) {\n        return value;\n      }\n      var styleDefaults = this._styleDefaults;\n      var localeDefaults = this._localeDefaults();\n      var regionDefaults = this._regionDefaults();\n      value = get(styleDefaults, attr, this, localeDefaults);\n      if (value !== null && value !== undefined) {\n        return value;\n      }\n      value = get(localeDefaults, attr, this, styleDefaults);\n      if (value !== null && value !== undefined) {\n        return value;\n      }\n      value = get(regionDefaults, attr, this, styleDefaults);\n      if (value !== null && value !== undefined) {\n        return value;\n      }\n      value = get(this._currencyDefaults(), attr, this, localeDefaults);\n      if (value !== null && value !== undefined) {\n        return value;\n      }\n      return null;\n    }\n\n    /**\n     * Formats the given number as a string according to the settings applied to\n     * this formatter. This may cause the number to be truncated, rounded, or\n     * otherwise differ from what you might expect.\n     *\n     * @example\n     *\n     *   // By default no fraction digits are shown.\n     *   var f = new FieldKit.NumberFormatter();\n     *   f.format(Math.PI);  // '3'\n     *\n     *   // Let's format as a currency.\n     *   f.setNumberStyle(FieldKit.NumberFormatter.Style.CURRENCY);\n     *   f.format(Math.PI);  // '$3.14'\n     *\n     *   // Or as a percentage, which illustrates usage of {@link NumberFormatter#exponent}.\n     *   f.setNumberStyle(FieldKit.NumberFormatter.Style.PERCENT);\n     *   f.format(Math.PI);  // '314%'\n     *\n     *   // For the rest of the examples we'll go back to normal.\n     *   f.setNumberStyle(FieldKit.NumberFormatter.Style.NONE);\n     *\n     *   // The default rounding mode is {@link NumberFormatter.Rounding.HALF_EVEN}.\n     *   f.setMaximumFractionDigits(4);\n     *   f.format(Math.PI);  // '3.1416'\n     *\n     *   // And we can change the rounding mode if we like.\n     *   f.setRoundingMode(FieldKit.NumberFormatter.Rounding.FLOOR);\n     *   f.format(Math.PI);  // '3.1415'\n     *\n     * @param {number} number\n     * @returns {string}\n     */\n  }, {\n    key: 'format',\n    value: function format(number) {\n      if (number === '') {\n        return '';\n      }\n\n      var zeroSymbol = this.zeroSymbol();\n      if (zeroSymbol !== undefined && zeroSymbol !== null && number === 0) {\n        return zeroSymbol;\n      }\n\n      var nullSymbol = this.nullSymbol();\n      if (nullSymbol !== undefined && nullSymbol !== null && number === null) {\n        return nullSymbol;\n      }\n\n      var notANumberSymbol = this.notANumberSymbol();\n      if (notANumberSymbol !== undefined && notANumberSymbol !== null && isNaN(number)) {\n        return notANumberSymbol;\n      }\n\n      var positiveInfinitySymbol = this.positiveInfinitySymbol();\n      if (positiveInfinitySymbol !== undefined && positiveInfinitySymbol !== null && number === Infinity) {\n        return positiveInfinitySymbol;\n      }\n\n      var negativeInfinitySymbol = this.negativeInfinitySymbol();\n      if (negativeInfinitySymbol !== undefined && negativeInfinitySymbol !== null && number === -Infinity) {\n        return negativeInfinitySymbol;\n      }\n\n      var negative = number < 0;\n\n      var parts = ('' + Math.abs(number)).split('.');\n      var integerPart = parts[0];\n      var fractionPart = parts[1] || '';\n\n      var exponent = this.exponent();\n      if (exponent !== undefined && exponent !== null) {\n        var shifted = (0, _stround.shiftParts)([negative, integerPart, fractionPart], exponent);\n        negative = shifted[0];\n        integerPart = shifted[1];\n        fractionPart = shifted[2];\n        while (integerPart[0] === '0') {\n          integerPart = integerPart.slice(1);\n        }\n      }\n\n      // round fraction part to the maximum length\n      var maximumFractionDigits = this.maximumFractionDigits();\n      if (fractionPart.length > maximumFractionDigits) {\n        var unrounded = integerPart + '.' + fractionPart;\n        var rounded = this._round(negative ? '-' + unrounded : unrounded);\n        if (rounded[0] === '-') {\n          rounded = rounded.slice(1);\n        }\n        parts = rounded.split('.');\n        integerPart = parts[0];\n        fractionPart = parts[1] || '';\n      }\n\n      // right-pad fraction zeros up to the minimum length\n      var minimumFractionDigits = this.minimumFractionDigits();\n      while (fractionPart.length < minimumFractionDigits) {\n        fractionPart += '0';\n      }\n\n      // left-pad integer zeros up to the minimum length\n      var minimumIntegerDigits = this.minimumIntegerDigits();\n      while (integerPart.length < minimumIntegerDigits) {\n        integerPart = '0' + integerPart;\n      }\n\n      // eat any unneeded trailing zeros\n      while (fractionPart.length > minimumFractionDigits && fractionPart.slice(-1) === '0') {\n        fractionPart = fractionPart.slice(0, -1);\n      }\n\n      // left-truncate any integer digits over the maximum length\n      var maximumIntegerDigits = this.maximumIntegerDigits();\n      if (maximumIntegerDigits !== undefined && maximumIntegerDigits !== null && integerPart.length > maximumIntegerDigits) {\n        integerPart = integerPart.slice(-maximumIntegerDigits);\n      }\n\n      // add the decimal separator\n      if (fractionPart.length > 0 || this.alwaysShowsDecimalSeparator()) {\n        fractionPart = this.decimalSeparator() + fractionPart;\n      }\n\n      if (this.usesGroupingSeparator()) {\n        var integerPartWithGroupingSeparators = '';\n        var copiedCharacterCount = 0;\n\n        for (var i = integerPart.length - 1; i >= 0; i--) {\n          if (copiedCharacterCount > 0 && copiedCharacterCount % this.groupingSize() === 0) {\n            integerPartWithGroupingSeparators = this.groupingSeparator() + integerPartWithGroupingSeparators;\n          }\n          integerPartWithGroupingSeparators = integerPart[i] + integerPartWithGroupingSeparators;\n          copiedCharacterCount++;\n        }\n        integerPart = integerPartWithGroupingSeparators;\n      }\n\n      var result = integerPart + fractionPart;\n\n      // surround with the appropriate prefix and suffix\n      if (negative) {\n        result = this.negativePrefix() + result + this.negativeSuffix();\n      } else {\n        result = this.positivePrefix() + result + this.positiveSuffix();\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} number\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: '_round',\n    value: function _round(number) {\n      return (0, _stround.round)(number, this.maximumFractionDigits(), this.roundingMode());\n    }\n\n    /**\n     * Parses the given string according to the current formatting settings.\n     * When parsing values with a guaranteed regular format you can simply\n     * configure the formatter correctly and call this method. However, when\n     * dealing with human input it is often useful to configure\n     * {@link NumberFormatter#isLenient} to be true, allowing more leeway in what\n     * may be parsed as a valid number.\n     *\n     * @example\n     *\n     *   var f = new FieldKit.NumberFormatter();\n     *   f.parse('89'); // 89\n     *\n     * @param {string} string\n     * @param {function(string)} error\n     * @returns {?number}\n     */\n  }, {\n    key: 'parse',\n    value: function parse(string, error) {\n      var result = undefined;\n      var positivePrefix = this.positivePrefix();\n      var negativePrefix = this.negativePrefix();\n      var positiveSuffix = this.positiveSuffix();\n      var negativeSuffix = this.negativeSuffix();\n\n      if (this.isLenient()) {\n        string = string.replace(/\\s/g, '');\n        positivePrefix = (0, _utils.trim)(positivePrefix);\n        negativePrefix = (0, _utils.trim)(negativePrefix);\n        positiveSuffix = (0, _utils.trim)(positiveSuffix);\n        negativeSuffix = (0, _utils.trim)(negativeSuffix);\n      }\n\n      var zeroSymbol = undefined;\n      var nullSymbol = undefined;\n      var notANumberSymbol = undefined;\n      var positiveInfinitySymbol = undefined;\n      var negativeInfinitySymbol = undefined;\n      var innerString = undefined;\n\n      if ((zeroSymbol = this.zeroSymbol()) !== undefined && zeroSymbol !== null && string === zeroSymbol) {\n        result = 0;\n      } else if ((nullSymbol = this.nullSymbol()) !== undefined && nullSymbol !== null && string === nullSymbol) {\n        result = null;\n      } else if ((notANumberSymbol = this.notANumberSymbol()) !== undefined && notANumberSymbol !== null && string === notANumberSymbol) {\n        result = NaN;\n      } else if ((positiveInfinitySymbol = this.positiveInfinitySymbol()) !== undefined && positiveInfinitySymbol !== null && string === positiveInfinitySymbol) {\n        result = Infinity;\n      } else if ((negativeInfinitySymbol = this.negativeInfinitySymbol()) !== undefined && negativeInfinitySymbol !== null && string === negativeInfinitySymbol) {\n        result = -Infinity;\n      } else {\n        var hasNegativePrefix = (0, _utils.startsWith)(negativePrefix, string);\n        var hasNegativeSuffix = (0, _utils.endsWith)(negativeSuffix, string);\n        if (hasNegativePrefix && (this.isLenient() || hasNegativeSuffix)) {\n          innerString = string.slice(negativePrefix.length);\n          if (hasNegativeSuffix) {\n            innerString = innerString.slice(0, innerString.length - negativeSuffix.length);\n          }\n          result = this._parseAbsoluteValue(innerString, error);\n          if (result !== undefined && result !== null) {\n            result *= -1;\n          }\n        } else {\n          var hasPositivePrefix = (0, _utils.startsWith)(positivePrefix, string);\n          var hasPositiveSuffix = (0, _utils.endsWith)(positiveSuffix, string);\n          if (this.isLenient() || hasPositivePrefix && hasPositiveSuffix) {\n            innerString = string;\n            if (hasPositivePrefix) {\n              innerString = innerString.slice(positivePrefix.length);\n            }\n            if (hasPositiveSuffix) {\n              innerString = innerString.slice(0, innerString.length - positiveSuffix.length);\n            }\n            result = this._parseAbsoluteValue(innerString, error);\n          } else {\n            if (typeof error === 'function') {\n              error('number-formatter.invalid-format');\n            }\n            return null;\n          }\n        }\n      }\n\n      if (result !== undefined && result !== null) {\n        var minimum = this.minimum();\n        if (minimum !== undefined && minimum !== null && result < minimum) {\n          if (typeof error === 'function') {\n            error('number-formatter.out-of-bounds.below-minimum');\n          }\n          return null;\n        }\n\n        var maximum = this.maximum();\n        if (maximum !== undefined && maximum !== null && result > maximum) {\n          if (typeof error === 'function') {\n            error('number-formatter.out-of-bounds.above-maximum');\n          }\n          return null;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * @param {string} string\n     * @param {function(string)} error\n     * @returns {?number} returns value with delimiters removed\n     * @private\n     */\n  }, {\n    key: '_parseAbsoluteValue',\n    value: function _parseAbsoluteValue(string, error) {\n      var number = undefined;\n      if (string.length === 0) {\n        if (typeof error === 'function') {\n          error('number-formatter.invalid-format');\n        }\n        return null;\n      }\n\n      var parts = string.split(this.decimalSeparator());\n      if (parts.length > 2) {\n        if (typeof error === 'function') {\n          error('number-formatter.invalid-format');\n        }\n        return null;\n      }\n\n      var integerPart = parts[0];\n      var fractionPart = parts[1] || '';\n\n      if (this.usesGroupingSeparator()) {\n        var groupingSize = this.groupingSize();\n        var groupParts = integerPart.split(this.groupingSeparator());\n\n        if (!this.isLenient()) {\n          if (groupParts.length > 1) {\n            // disallow 1000,000\n            if (groupParts[0].length > groupingSize) {\n              if (typeof error === 'function') {\n                error('number-formatter.invalid-format.grouping-size');\n              }\n              return null;\n            }\n\n            // disallow 1,00\n            var groupPartsTail = groupParts.slice(1);\n            for (var i = 0, l = groupPartsTail.length; i < l; i++) {\n              if (groupPartsTail[i].length !== groupingSize) {\n                if (typeof error === 'function') {\n                  error('number-formatter.invalid-format.grouping-size');\n                }\n                return null;\n              }\n            }\n          }\n        }\n\n        // remove grouping separators\n        integerPart = groupParts.join('');\n      }\n\n      if (!(0, _utils.isDigits)(integerPart) || !(0, _utils.isDigits)(fractionPart)) {\n        if (typeof error === 'function') {\n          error('number-formatter.invalid-format');\n        }\n        return null;\n      }\n\n      var exponent = this.exponent();\n      if (exponent !== undefined && exponent !== null) {\n        var shifted = (0, _stround.shiftParts)([false, integerPart, fractionPart], -exponent);\n        integerPart = shifted[1];\n        fractionPart = shifted[2];\n      }\n\n      number = Number(integerPart) + Number('.' + (fractionPart || '0'));\n\n      if (!this.allowsFloats() && number !== ~ ~number) {\n        if (typeof error === 'function') {\n          error('number-formatter.floats-not-allowed');\n        }\n        return null;\n      }\n\n      return number;\n    }\n\n    /**\n     * Gets defaults.\n     *\n     * @returns {Array}\n     * @private\n     */\n  }, {\n    key: '_currencyDefaults',\n    value: function _currencyDefaults() {\n      var result = {};\n\n      (0, _utils.forEach)(CurrencyDefaults['default'], function (value, key) {\n        result[key] = value;\n      });\n\n      (0, _utils.forEach)(CurrencyDefaults[this.currencyCode()], function (value, key) {\n        result[key] = value;\n      });\n\n      return result;\n    }\n\n    /**\n     * Gets defaults.\n     *\n     * @returns {Array}\n     * @private\n     */\n  }, {\n    key: '_regionDefaults',\n    value: function _regionDefaults() {\n      var result = {};\n\n      (0, _utils.forEach)(RegionDefaults['default'], function (value, key) {\n        result[key] = value;\n      });\n\n      (0, _utils.forEach)(RegionDefaults[this.countryCode()], function (value, key) {\n        result[key] = value;\n      });\n\n      return result;\n    }\n\n    /**\n     * Gets defaults.\n     *\n     * @returns {Array}\n     * @private\n     */\n  }, {\n    key: '_localeDefaults',\n    value: function _localeDefaults() {\n      var locale = this.locale();\n      var countryCode = this.countryCode();\n      var lang = splitLocaleComponents(locale).lang;\n      var result = {};\n\n      var defaultFallbacks = [RegionDefaults['default'], LocaleDefaults['default'], RegionDefaults[countryCode], // CA\n      LocaleDefaults[lang], // fr\n      LocaleDefaults[locale] // fr-CA\n      ];\n\n      (0, _utils.forEach)(defaultFallbacks, function (defaults) {\n        (0, _utils.forEach)(defaults, function (value, key) {\n          result[key] = value;\n        });\n      });\n\n      return result;\n    }\n  }]);\n\n  return NumberFormatter;\n})(_formatter2['default']);\n\nNumberFormatter.prototype._allowsFloats = null;\n/** @private */\nNumberFormatter.prototype._alwaysShowsDecimalSeparator = null;\n/** @private */\nNumberFormatter.prototype._countryCode = null;\n/** @private */\nNumberFormatter.prototype._currencyCode = null;\n/** @private */\nNumberFormatter.prototype._exponent = null;\n/** @private */\nNumberFormatter.prototype._groupingSeparator = null;\n/** @private */\nNumberFormatter.prototype._groupingSize = null;\n/** @private */\nNumberFormatter.prototype._lenient = false;\n/** @private */\nNumberFormatter.prototype._locale = null;\n/** @private */\nNumberFormatter.prototype._internationalCurrencySymbol = null;\n/** @private */\nNumberFormatter.prototype._maximumFractionDigits = null;\n/** @private */\nNumberFormatter.prototype._minimumFractionDigits = null;\n/** @private */\nNumberFormatter.prototype._maximumIntegerDigits = null;\n/** @private */\nNumberFormatter.prototype._minimumIntegerDigits = null;\n/** @private */\nNumberFormatter.prototype._maximum = null;\n/** @private */\nNumberFormatter.prototype._minimum = null;\n/** @private */\nNumberFormatter.prototype._notANumberSymbol = null;\n/** @private */\nNumberFormatter.prototype._nullSymbol = null;\n/** @private */\nNumberFormatter.prototype._numberStyle = null;\n/** @private */\nNumberFormatter.prototype._roundingMode = null;\n/** @private */\nNumberFormatter.prototype._usesGroupingSeparator = null;\n/** @private */\nNumberFormatter.prototype._zeroSymbol = null;\n\n/**\n * Aliases\n */\n\nNumberFormatter.prototype.stringFromNumber = NumberFormatter.prototype.format;\nNumberFormatter.prototype.numberFromString = NumberFormatter.prototype.parse;\n\nNumberFormatter.Rounding = _stround.modes;\n\n/**\n * @enum {number}\n * @readonly\n */\nNumberFormatter.Style = {\n  NONE: NONE,\n  CURRENCY: CURRENCY,\n  PERCENT: PERCENT\n};\n\n/**\n * @namespace StyleDefaults\n */\nvar StyleDefaults = {\n  NONE: {\n    usesGroupingSeparator: false,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n    minimumIntegerDigits: 0\n  },\n  PERCENT: {\n    usesGroupingSeparator: false,\n    exponent: 2,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n    minimumIntegerDigits: 1,\n    positiveSuffix: function positiveSuffix(formatter) {\n      return formatter.percentSymbol();\n    },\n    negativeSuffix: function negativeSuffix(formatter) {\n      return formatter.percentSymbol();\n    }\n  },\n  CURRENCY: {\n    positivePrefix: function positivePrefix(formatter, locale) {\n      return get(locale, 'positiveCurrencyPrefix', formatter, this);\n    },\n    positiveSuffix: function positiveSuffix(formatter, locale) {\n      return get(locale, 'positiveCurrencySuffix', formatter, this);\n    },\n    negativePrefix: function negativePrefix(formatter, locale) {\n      return get(locale, 'negativeCurrencyPrefix', formatter, this);\n    },\n    negativeSuffix: function negativeSuffix(formatter, locale) {\n      return get(locale, 'negativeCurrencySuffix', formatter, this);\n    }\n  }\n};\n\n/**\n * Contains the default values for various number formatter settings, including\n * per-locale overrides. Some of these characters will not be used as-is and\n * instead serve as placeholders:\n *\n *   \"¤\"  placeholder for `currencySymbol()`.\n *   \"-\"  placeholder for `minusSign()`.\n *   \"+\"  placeholder for `plusSign()`.\n *\n * @namespace LocaleDefaults\n */\nvar LocaleDefaults = {\n  'default': {\n    allowsFloats: true,\n    alwaysShowsDecimalSeparator: false,\n    decimalSeparator: '.',\n    groupingSeparator: ',',\n    groupingSize: 3,\n    minusSign: '-',\n    negativeInfinitySymbol: '-∞',\n    negativePrefix: '-',\n    negativeSuffix: '',\n    notANumberSymbol: 'NaN',\n    nullSymbol: '',\n    percentSymbol: '%',\n    positiveInfinitySymbol: '+∞',\n    positivePrefix: '',\n    positiveSuffix: '',\n    plusSign: '+',\n    roundingMode: NumberFormatter.Rounding.HALF_EVEN,\n    positiveCurrencyPrefix: '¤',\n    positiveCurrencySuffix: '',\n    negativeCurrencyPrefix: '(¤',\n    negativeCurrencySuffix: ')'\n  },\n  fr: {\n    decimalSeparator: ',',\n    groupingSeparator: ' ',\n    percentSymbol: ' %',\n    positiveCurrencyPrefix: '',\n    positiveCurrencySuffix: ' ¤',\n    negativeCurrencyPrefix: '(',\n    negativeCurrencySuffix: ' ¤)'\n  },\n  ja: {\n    negativeCurrencyPrefix: '-¤',\n    negativeCurrencySuffix: ''\n  },\n  'en-GB': {\n    negativeCurrencyPrefix: '-¤',\n    negativeCurrencySuffix: ''\n  }\n};\n\n/**\n * @namespace RegionDefaults\n */\nvar RegionDefaults = {\n  AE: {\n    currencyCode: 'AED'\n  },\n  AG: {\n    currencyCode: 'XCD'\n  },\n  AI: {\n    currencyCode: 'XCD'\n  },\n  AL: {\n    currencyCode: 'ALL'\n  },\n  AM: {\n    currencyCode: 'AMD'\n  },\n  AO: {\n    currencyCode: 'AOA'\n  },\n  AR: {\n    currencyCode: 'ARS'\n  },\n  AT: {\n    currencyCode: 'EUR'\n  },\n  AU: {\n    currencyCode: 'AUD'\n  },\n  AW: {\n    currencyCode: 'AWG'\n  },\n  AZ: {\n    currencyCode: 'AZN'\n  },\n  BA: {\n    currencyCode: 'BAM'\n  },\n  BB: {\n    currencyCode: 'BBD'\n  },\n  BD: {\n    currencyCode: 'BDT'\n  },\n  BE: {\n    currencyCode: 'EUR'\n  },\n  BF: {\n    currencyCode: 'XOF'\n  },\n  BG: {\n    currencyCode: 'BGN'\n  },\n  BH: {\n    currencyCode: 'BHD'\n  },\n  BJ: {\n    currencyCode: 'XOF'\n  },\n  BM: {\n    currencyCode: 'BMD'\n  },\n  BN: {\n    currencyCode: 'BND'\n  },\n  BO: {\n    currencyCode: 'BOB'\n  },\n  BR: {\n    currencyCode: 'BRL'\n  },\n  BS: {\n    currencyCode: 'BSD'\n  },\n  BT: {\n    currencyCode: 'BTN'\n  },\n  BW: {\n    currencyCode: 'BWP'\n  },\n  BY: {\n    currencyCode: 'BYR'\n  },\n  BZ: {\n    currencyCode: 'BZD'\n  },\n  CA: {\n    currencyCode: 'CAD'\n  },\n  CG: {\n    currencyCode: 'CDF'\n  },\n  CH: {\n    currencyCode: 'CHF'\n  },\n  CI: {\n    currencyCode: 'XOF'\n  },\n  CL: {\n    currencyCode: 'CLP'\n  },\n  CM: {\n    currencyCode: 'XAF'\n  },\n  CN: {\n    currencyCode: 'CNY'\n  },\n  CO: {\n    currencyCode: 'COP'\n  },\n  CR: {\n    currencyCode: 'CRC'\n  },\n  CV: {\n    currencyCode: 'CVE'\n  },\n  CY: {\n    currencyCode: 'EUR'\n  },\n  CZ: {\n    currencyCode: 'CZK'\n  },\n  DE: {\n    currencyCode: 'EUR'\n  },\n  DK: {\n    currencyCode: 'DKK'\n  },\n  DM: {\n    currencyCode: 'XCD'\n  },\n  DO: {\n    currencyCode: 'DOP'\n  },\n  DZ: {\n    currencyCode: 'DZD'\n  },\n  EC: {\n    currencyCode: 'USD'\n  },\n  EE: {\n    currencyCode: 'EUR'\n  },\n  EG: {\n    currencyCode: 'EGP'\n  },\n  ES: {\n    currencyCode: 'EUR'\n  },\n  ET: {\n    currencyCode: 'ETB'\n  },\n  FI: {\n    currencyCode: 'EUR'\n  },\n  FJ: {\n    currencyCode: 'FJD'\n  },\n  FM: {\n    currencyCode: 'USD'\n  },\n  FR: {\n    currencyCode: 'EUR'\n  },\n  GA: {\n    currencyCode: 'XAF'\n  },\n  GB: {\n    currencyCode: 'GBP'\n  },\n  GD: {\n    currencyCode: 'XCD'\n  },\n  GE: {\n    currencyCode: 'GEL'\n  },\n  GH: {\n    currencyCode: 'GHS'\n  },\n  GI: {\n    currencyCode: 'GIP'\n  },\n  GM: {\n    currencyCode: 'GMD'\n  },\n  GR: {\n    currencyCode: 'EUR'\n  },\n  GT: {\n    currencyCode: 'GTQ'\n  },\n  GU: {\n    currencyCode: 'USD'\n  },\n  GW: {\n    currencyCode: 'XOF'\n  },\n  GY: {\n    currencyCode: 'GYD'\n  },\n  HK: {\n    currencyCode: 'HKD'\n  },\n  HN: {\n    currencyCode: 'HNL'\n  },\n  HR: {\n    currencyCode: 'HRK'\n  },\n  HT: {\n    currencyCode: 'HTG'\n  },\n  HU: {\n    currencyCode: 'HUF'\n  },\n  ID: {\n    currencyCode: 'IDR'\n  },\n  IE: {\n    currencyCode: 'EUR'\n  },\n  IL: {\n    currencyCode: 'ILS'\n  },\n  IN: {\n    currencyCode: 'INR'\n  },\n  IS: {\n    currencyCode: 'ISK'\n  },\n  IT: {\n    currencyCode: 'EUR'\n  },\n  JM: {\n    currencyCode: 'JMD'\n  },\n  JO: {\n    currencyCode: 'JOD'\n  },\n  JP: {\n    currencyCode: 'JPY'\n  },\n  KE: {\n    currencyCode: 'KES'\n  },\n  KG: {\n    currencyCode: 'KGS'\n  },\n  KH: {\n    currencyCode: 'KHR'\n  },\n  KN: {\n    currencyCode: 'XCD'\n  },\n  KR: {\n    currencyCode: 'KRW'\n  },\n  KW: {\n    currencyCode: 'KWD'\n  },\n  KY: {\n    currencyCode: 'KYD'\n  },\n  KZ: {\n    currencyCode: 'KZT'\n  },\n  LA: {\n    currencyCode: 'LAK'\n  },\n  LB: {\n    currencyCode: 'LBP'\n  },\n  LC: {\n    currencyCode: 'XCD'\n  },\n  LI: {\n    currencyCode: 'CHF'\n  },\n  LK: {\n    currencyCode: 'LKR'\n  },\n  LR: {\n    currencyCode: 'LRD'\n  },\n  LT: {\n    currencyCode: 'LTL'\n  },\n  LU: {\n    currencyCode: 'EUR'\n  },\n  LV: {\n    currencyCode: 'EUR'\n  },\n  MA: {\n    currencyCode: 'MAD'\n  },\n  MD: {\n    currencyCode: 'MDL'\n  },\n  MG: {\n    currencyCode: 'MGA'\n  },\n  MK: {\n    currencyCode: 'MKD'\n  },\n  ML: {\n    currencyCode: 'XOF'\n  },\n  MM: {\n    currencyCode: 'MMK'\n  },\n  MN: {\n    currencyCode: 'MNT'\n  },\n  MO: {\n    currencyCode: 'MOP'\n  },\n  MP: {\n    currencyCode: 'USD'\n  },\n  MR: {\n    currencyCode: 'MRO'\n  },\n  MS: {\n    currencyCode: 'XCD'\n  },\n  MT: {\n    currencyCode: 'EUR'\n  },\n  MU: {\n    currencyCode: 'MUR'\n  },\n  MW: {\n    currencyCode: 'MWK'\n  },\n  MX: {\n    currencyCode: 'MXN'\n  },\n  MY: {\n    currencyCode: 'MYR'\n  },\n  MZ: {\n    currencyCode: 'MZN'\n  },\n  NA: {\n    currencyCode: 'NAD'\n  },\n  NE: {\n    currencyCode: 'XOF'\n  },\n  NG: {\n    currencyCode: 'NGN'\n  },\n  NI: {\n    currencyCode: 'NIO'\n  },\n  NL: {\n    currencyCode: 'EUR'\n  },\n  NO: {\n    currencyCode: 'NOK'\n  },\n  NP: {\n    currencyCode: 'NPR'\n  },\n  NZ: {\n    currencyCode: 'NZD'\n  },\n  OM: {\n    currencyCode: 'OMR'\n  },\n  PA: {\n    currencyCode: 'PAB'\n  },\n  PE: {\n    currencyCode: 'PEN'\n  },\n  PG: {\n    currencyCode: 'PGK'\n  },\n  PH: {\n    currencyCode: 'PHP'\n  },\n  PK: {\n    currencyCode: 'PKR'\n  },\n  PL: {\n    currencyCode: 'PLN'\n  },\n  PR: {\n    currencyCode: 'USD'\n  },\n  PT: {\n    currencyCode: 'EUR'\n  },\n  PW: {\n    currencyCode: 'USD'\n  },\n  PY: {\n    currencyCode: 'PYG'\n  },\n  QA: {\n    currencyCode: 'QAR'\n  },\n  RO: {\n    currencyCode: 'RON'\n  },\n  RS: {\n    currencyCode: 'RSD'\n  },\n  RU: {\n    currencyCode: 'RUB'\n  },\n  RW: {\n    currencyCode: 'RWF'\n  },\n  SA: {\n    currencyCode: 'SAR'\n  },\n  SB: {\n    currencyCode: 'SBD'\n  },\n  SC: {\n    currencyCode: 'SCR'\n  },\n  SE: {\n    currencyCode: 'SEK'\n  },\n  SG: {\n    currencyCode: 'SGD'\n  },\n  SI: {\n    currencyCode: 'EUR'\n  },\n  SK: {\n    currencyCode: 'EUR'\n  },\n  SL: {\n    currencyCode: 'SLL'\n  },\n  SN: {\n    currencyCode: 'XOF'\n  },\n  SR: {\n    currencyCode: 'SRD'\n  },\n  ST: {\n    currencyCode: 'STD'\n  },\n  SV: {\n    currencyCode: 'SVC'\n  },\n  SZ: {\n    currencyCode: 'SZL'\n  },\n  TC: {\n    currencyCode: 'USD'\n  },\n  TD: {\n    currencyCode: 'XAF'\n  },\n  TG: {\n    currencyCode: 'XOF'\n  },\n  TH: {\n    currencyCode: 'THB'\n  },\n  TJ: {\n    currencyCode: 'TJS'\n  },\n  TM: {\n    currencyCode: 'TMT'\n  },\n  TN: {\n    currencyCode: 'TND'\n  },\n  TR: {\n    currencyCode: 'TRY'\n  },\n  TT: {\n    currencyCode: 'TTD'\n  },\n  TW: {\n    currencyCode: 'TWD'\n  },\n  TZ: {\n    currencyCode: 'TZS'\n  },\n  UA: {\n    currencyCode: 'UAH'\n  },\n  UG: {\n    currencyCode: 'UGX'\n  },\n  US: {\n    currencyCode: 'USD'\n  },\n  UY: {\n    currencyCode: 'UYU'\n  },\n  UZ: {\n    currencyCode: 'UZS'\n  },\n  VC: {\n    currencyCode: 'XCD'\n  },\n  VE: {\n    currencyCode: 'VEF'\n  },\n  VG: {\n    currencyCode: 'USD'\n  },\n  VI: {\n    currencyCode: 'USD'\n  },\n  VN: {\n    currencyCode: 'VND'\n  },\n  YE: {\n    currencyCode: 'YER'\n  },\n  ZA: {\n    currencyCode: 'ZAR'\n  },\n  ZM: {\n    currencyCode: 'ZMW'\n  },\n  ZW: {\n    currencyCode: 'USD'\n  }\n};\n\n/**\n * @namespace CurrencyDefaults\n */\nvar CurrencyDefaults = {\n  'default': {\n    currencySymbol: function currencySymbol(formatter) {\n      return formatter.currencyCode();\n    },\n    internationalCurrencySymbol: function internationalCurrencySymbol(formatter) {\n      return formatter.currencyCode();\n    },\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n    minimumIntegerDigits: 1,\n    usesGroupingSeparator: true\n  },\n  AED: {\n    currencySymbol: 'د.إ',\n    internationalCurrencySymbol: 'د.إ'\n  },\n  ALL: {\n    currencySymbol: 'L',\n    internationalCurrencySymbol: 'L'\n  },\n  AMD: {\n    currencySymbol: 'դր.',\n    internationalCurrencySymbol: 'դր.'\n  },\n  AOA: {\n    currencySymbol: 'Kz',\n    internationalCurrencySymbol: 'Kz'\n  },\n  ARS: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  AUD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  AWG: {\n    currencySymbol: 'ƒ',\n    internationalCurrencySymbol: 'ƒ'\n  },\n  AZN: {\n    currencySymbol: '₼',\n    internationalCurrencySymbol: '₼'\n  },\n  BAM: {\n    currencySymbol: 'КМ',\n    internationalCurrencySymbol: 'КМ'\n  },\n  BBD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  BDT: {\n    currencySymbol: '৳',\n    internationalCurrencySymbol: '৳'\n  },\n  BGN: {\n    currencySymbol: 'лв',\n    internationalCurrencySymbol: 'лв'\n  },\n  BHD: {\n    currencySymbol: 'ب.د',\n    internationalCurrencySymbol: 'ب.د',\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3\n  },\n  BMD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  BND: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  BOB: {\n    currencySymbol: 'Bs.',\n    internationalCurrencySymbol: 'Bs.'\n  },\n  BRL: {\n    currencySymbol: 'R$',\n    internationalCurrencySymbol: 'R$'\n  },\n  BSD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  BTN: {\n    currencySymbol: 'Nu.',\n    internationalCurrencySymbol: 'Nu.'\n  },\n  BWP: {\n    currencySymbol: 'P',\n    internationalCurrencySymbol: 'P'\n  },\n  BYR: {\n    currencySymbol: 'Br',\n    internationalCurrencySymbol: 'Br'\n  },\n  BZD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  CAD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  CDF: {\n    currencySymbol: 'Fr',\n    internationalCurrencySymbol: 'Fr'\n  },\n  CHF: {\n    currencySymbol: 'Fr',\n    internationalCurrencySymbol: 'Fr'\n  },\n  CLP: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  },\n  CNY: {\n    currencySymbol: '¥',\n    internationalCurrencySymbol: '¥'\n  },\n  COP: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  CRC: {\n    currencySymbol: '₡',\n    internationalCurrencySymbol: '₡'\n  },\n  CVE: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  CZK: {\n    currencySymbol: 'Kč',\n    internationalCurrencySymbol: 'Kč'\n  },\n  DKK: {\n    currencySymbol: 'kr',\n    internationalCurrencySymbol: 'kr'\n  },\n  DOP: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  DZD: {\n    currencySymbol: 'د.ج',\n    internationalCurrencySymbol: 'د.ج'\n  },\n  EGP: {\n    currencySymbol: 'E£',\n    internationalCurrencySymbol: 'E£'\n  },\n  ETB: {\n    currencySymbol: 'ብር',\n    internationalCurrencySymbol: 'ብር'\n  },\n  EUR: {\n    currencySymbol: '€',\n    internationalCurrencySymbol: '€'\n  },\n  FJD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  GBP: {\n    currencySymbol: '£',\n    internationalCurrencySymbol: '£'\n  },\n  GEL: {\n    currencySymbol: 'ლ,',\n    internationalCurrencySymbol: 'ლ,'\n  },\n  GHS: {\n    currencySymbol: '₵',\n    internationalCurrencySymbol: '₵'\n  },\n  GIP: {\n    currencySymbol: '£',\n    internationalCurrencySymbol: '£'\n  },\n  GMD: {\n    currencySymbol: 'D',\n    internationalCurrencySymbol: 'D'\n  },\n  GTQ: {\n    currencySymbol: 'Q',\n    internationalCurrencySymbol: 'Q'\n  },\n  GYD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  HKD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  HNL: {\n    currencySymbol: 'L',\n    internationalCurrencySymbol: 'L'\n  },\n  HRK: {\n    currencySymbol: 'kn',\n    internationalCurrencySymbol: 'kn'\n  },\n  HTG: {\n    currencySymbol: 'G',\n    internationalCurrencySymbol: 'G'\n  },\n  HUF: {\n    currencySymbol: 'Ft',\n    internationalCurrencySymbol: 'Ft'\n  },\n  IDR: {\n    currencySymbol: 'Rp',\n    internationalCurrencySymbol: 'Rp'\n  },\n  ILS: {\n    currencySymbol: '₪',\n    internationalCurrencySymbol: '₪'\n  },\n  INR: {\n    currencySymbol: '₹',\n    internationalCurrencySymbol: '₹'\n  },\n  ISK: {\n    currencySymbol: 'kr',\n    internationalCurrencySymbol: 'kr'\n  },\n  JMD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  JOD: {\n    currencySymbol: 'د.ا',\n    internationalCurrencySymbol: 'د.ا',\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3\n  },\n  JPY: {\n    currencySymbol: '¥',\n    internationalCurrencySymbol: '¥',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  },\n  KES: {\n    currencySymbol: 'KSh',\n    internationalCurrencySymbol: 'KSh'\n  },\n  KGS: {\n    currencySymbol: 'som',\n    internationalCurrencySymbol: 'som'\n  },\n  KHR: {\n    currencySymbol: '៛',\n    internationalCurrencySymbol: '៛'\n  },\n  KRW: {\n    currencySymbol: '₩',\n    internationalCurrencySymbol: '₩',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  },\n  KWD: {\n    currencySymbol: 'د.ك',\n    internationalCurrencySymbol: 'د.ك',\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3\n  },\n  KYD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  KZT: {\n    currencySymbol: '〒',\n    internationalCurrencySymbol: '〒'\n  },\n  LAK: {\n    currencySymbol: '₭',\n    internationalCurrencySymbol: '₭'\n  },\n  LBP: {\n    currencySymbol: 'ل.ل',\n    internationalCurrencySymbol: 'ل.ل'\n  },\n  LKR: {\n    currencySymbol: '₨',\n    internationalCurrencySymbol: '₨'\n  },\n  LRD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  LTL: {\n    currencySymbol: 'Lt',\n    internationalCurrencySymbol: 'Lt'\n  },\n  MAD: {\n    currencySymbol: 'د.م.',\n    internationalCurrencySymbol: 'د.م.'\n  },\n  MDL: {\n    currencySymbol: 'L',\n    internationalCurrencySymbol: 'L'\n  },\n  MGA: {\n    currencySymbol: 'Ar',\n    internationalCurrencySymbol: 'Ar',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  },\n  MKD: {\n    currencySymbol: 'ден',\n    internationalCurrencySymbol: 'ден'\n  },\n  MMK: {\n    currencySymbol: 'K',\n    internationalCurrencySymbol: 'K'\n  },\n  MNT: {\n    currencySymbol: '₮',\n    internationalCurrencySymbol: '₮'\n  },\n  MOP: {\n    currencySymbol: 'P',\n    internationalCurrencySymbol: 'P'\n  },\n  MRO: {\n    currencySymbol: 'UM',\n    internationalCurrencySymbol: 'UM',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  },\n  MUR: {\n    currencySymbol: '₨',\n    internationalCurrencySymbol: '₨'\n  },\n  MWK: {\n    currencySymbol: 'MK',\n    internationalCurrencySymbol: 'MK'\n  },\n  MXN: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  MYR: {\n    currencySymbol: 'RM',\n    internationalCurrencySymbol: 'RM'\n  },\n  MZN: {\n    currencySymbol: 'MTn',\n    internationalCurrencySymbol: 'MTn'\n  },\n  NAD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  NGN: {\n    currencySymbol: '₦',\n    internationalCurrencySymbol: '₦'\n  },\n  NIO: {\n    currencySymbol: 'C$',\n    internationalCurrencySymbol: 'C$'\n  },\n  NOK: {\n    currencySymbol: 'kr',\n    internationalCurrencySymbol: 'kr'\n  },\n  NPR: {\n    currencySymbol: '₨',\n    internationalCurrencySymbol: '₨'\n  },\n  NZD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  OMR: {\n    currencySymbol: 'ر.ع.',\n    internationalCurrencySymbol: 'ر.ع.',\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3\n  },\n  PAB: {\n    currencySymbol: 'B/.',\n    internationalCurrencySymbol: 'B/.'\n  },\n  PEN: {\n    currencySymbol: 'S/.',\n    internationalCurrencySymbol: 'S/.'\n  },\n  PGK: {\n    currencySymbol: 'K',\n    internationalCurrencySymbol: 'K'\n  },\n  PHP: {\n    currencySymbol: '₱',\n    internationalCurrencySymbol: '₱'\n  },\n  PKR: {\n    currencySymbol: '₨',\n    internationalCurrencySymbol: '₨'\n  },\n  PLN: {\n    currencySymbol: 'zł',\n    internationalCurrencySymbol: 'zł'\n  },\n  PYG: {\n    currencySymbol: '₲',\n    internationalCurrencySymbol: '₲'\n  },\n  QAR: {\n    currencySymbol: 'ر.ق',\n    internationalCurrencySymbol: 'ر.ق'\n  },\n  RON: {\n    currencySymbol: 'Lei',\n    internationalCurrencySymbol: 'Lei'\n  },\n  RSD: {\n    currencySymbol: 'РСД',\n    internationalCurrencySymbol: 'РСД'\n  },\n  RUB: {\n    currencySymbol: '₽',\n    internationalCurrencySymbol: '₽'\n  },\n  RWF: {\n    currencySymbol: 'FRw',\n    internationalCurrencySymbol: 'FRw'\n  },\n  SAR: {\n    currencySymbol: 'ر.س',\n    internationalCurrencySymbol: 'ر.س'\n  },\n  SBD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  SCR: {\n    currencySymbol: '₨',\n    internationalCurrencySymbol: '₨'\n  },\n  SEK: {\n    currencySymbol: 'kr',\n    internationalCurrencySymbol: 'kr'\n  },\n  SGD: {\n    currencySymbol: 'S$',\n    internationalCurrencySymbol: 'S$'\n  },\n  SLL: {\n    currencySymbol: 'Le',\n    internationalCurrencySymbol: 'Le'\n  },\n  SRD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  STD: {\n    currencySymbol: 'Db',\n    internationalCurrencySymbol: 'Db'\n  },\n  SVC: {\n    currencySymbol: '₡',\n    internationalCurrencySymbol: '₡'\n  },\n  SZL: {\n    currencySymbol: 'E',\n    internationalCurrencySymbol: 'E'\n  },\n  THB: {\n    currencySymbol: '฿',\n    internationalCurrencySymbol: '฿'\n  },\n  TJS: {\n    currencySymbol: 'ЅМ',\n    internationalCurrencySymbol: 'ЅМ'\n  },\n  TMT: {\n    currencySymbol: 'm',\n    internationalCurrencySymbol: 'm'\n  },\n  TND: {\n    currencySymbol: 'د.ت',\n    internationalCurrencySymbol: 'د.ت',\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3\n  },\n  TRY: {\n    currencySymbol: '₺',\n    internationalCurrencySymbol: '₺'\n  },\n  TTD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  TWD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  TZS: {\n    currencySymbol: 'Sh',\n    internationalCurrencySymbol: 'Sh'\n  },\n  UAH: {\n    currencySymbol: '₴',\n    internationalCurrencySymbol: '₴'\n  },\n  UGX: {\n    currencySymbol: 'USh',\n    internationalCurrencySymbol: 'USh'\n  },\n  USD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: 'US$'\n  },\n  UYU: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  UZS: {\n    currencySymbol: 'лв',\n    internationalCurrencySymbol: 'лв'\n  },\n  VEF: {\n    currencySymbol: 'Bs F',\n    internationalCurrencySymbol: 'Bs F'\n  },\n  VND: {\n    currencySymbol: '₫',\n    internationalCurrencySymbol: '₫',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  },\n  XAF: {\n    currencySymbol: 'Fr',\n    internationalCurrencySymbol: 'Fr'\n  },\n  XCD: {\n    currencySymbol: '$',\n    internationalCurrencySymbol: '$'\n  },\n  XOF: {\n    currencySymbol: 'Fr',\n    internationalCurrencySymbol: 'Fr'\n  },\n  YER: {\n    currencySymbol: '﷼',\n    internationalCurrencySymbol: '﷼'\n  },\n  ZAR: {\n    currencySymbol: 'R',\n    internationalCurrencySymbol: 'R'\n  },\n  ZMW: {\n    currencySymbol: 'ZMK',\n    internationalCurrencySymbol: 'ZMK'\n  }\n};\n\nexports['default'] = NumberFormatter;\nmodule.exports = exports['default'];\n\n},{\"./formatter\":14,\"./number_formatter_settings_formatter\":17,\"./utils\":22,\"stround\":3}],17:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _formatter = _dereq_('./formatter');\n\nvar _formatter2 = _interopRequireDefault(_formatter);\n\nvar NumberFormatterSettings = function NumberFormatterSettings() {\n  _classCallCheck(this, NumberFormatterSettings);\n\n  /** @type boolean */\n  this.alwaysShowsDecimalSeparator = false;\n\n  /** @type number */\n  this.groupingSize = 0;\n\n  /** @type number */\n  this.maximumFractionDigits = 0;\n\n  /** @type number */\n  this.minimumFractionDigits = 0;\n\n  /** @type number */\n  this.minimumIntegerDigits = 0;\n\n  /** @type string */\n  this.prefix = '';\n\n  /** @type string */\n  this.suffix = '';\n\n  /** @type boolean */\n  this.usesGroupingSeparator = false;\n}\n\n/**\n * Returns a string composed of the given character repeated `length` times.\n *\n * @param {string} character\n * @param {number} length\n * @returns {string}\n * @private\n */\n;\n\nfunction chars(character, length) {\n  return new Array(length + 1).join(character);\n}\n\n/**\n * @const\n * @private\n */\nvar DIGIT = '#';\n\n/**\n * @const\n * @private\n */\nvar PADDING = '0';\n\n/**\n * @const\n * @private\n */\nvar DECIMAL_SEPARATOR = '.';\n\n/**\n * @const\n * @private\n */\nvar GROUPING_SEPARATOR = ',';\n\nvar NumberFormatterSettingsFormatter = (function (_Formatter) {\n  _inherits(NumberFormatterSettingsFormatter, _Formatter);\n\n  function NumberFormatterSettingsFormatter() {\n    _classCallCheck(this, NumberFormatterSettingsFormatter);\n\n    _get(Object.getPrototypeOf(NumberFormatterSettingsFormatter.prototype), 'constructor', this).apply(this, arguments);\n  }\n\n  _createClass(NumberFormatterSettingsFormatter, [{\n    key: 'format',\n\n    /**\n     * @param {NumberFormatterSettings} settings\n     * @returns {string}\n     */\n    value: function format(settings) {\n      var result = '';\n\n      var minimumIntegerDigits = settings.minimumIntegerDigits;\n      if (minimumIntegerDigits !== 0) {\n        result += chars(PADDING, minimumIntegerDigits);\n      }\n\n      result = DIGIT + result;\n\n      if (settings.usesGroupingSeparator) {\n        while (result.length <= settings.groupingSize) {\n          result = DIGIT + result;\n        }\n\n        result = result.slice(0, -settings.groupingSize) + GROUPING_SEPARATOR + result.slice(-settings.groupingSize);\n      }\n\n      var minimumFractionDigits = settings.minimumFractionDigits;\n      var maximumFractionDigits = settings.maximumFractionDigits;\n      var hasFractionalPart = settings.alwaysShowsDecimalSeparator || minimumFractionDigits > 0 || maximumFractionDigits > 0;\n\n      if (hasFractionalPart) {\n        result += DECIMAL_SEPARATOR;\n        for (var i = 0, _length = maximumFractionDigits; i < _length; i++) {\n          result += i < minimumFractionDigits ? PADDING : DIGIT;\n        }\n      }\n\n      return settings.prefix + result + settings.suffix;\n    }\n\n    /**\n     * @param {string} string\n     * @returns {?NumberFormatterSettings}\n     */\n  }, {\n    key: 'parse',\n    value: function parse(string) {\n      var result = new NumberFormatterSettings();\n\n      var hasPassedPrefix = false;\n      var hasStartedSuffix = false;\n      var decimalSeparatorIndex = null;\n      var groupingSeparatorIndex = null;\n      var lastIntegerDigitIndex = null;\n\n      for (var i = 0, length = string.length; i < length; i++) {\n        var c = string[i];\n\n        switch (c) {\n          case DIGIT:\n            if (hasStartedSuffix) {\n              return null;\n            }\n            hasPassedPrefix = true;\n            if (decimalSeparatorIndex !== null) {\n              result.maximumFractionDigits++;\n            }\n            break;\n\n          case PADDING:\n            if (hasStartedSuffix) {\n              return null;\n            }\n            hasPassedPrefix = true;\n            if (decimalSeparatorIndex === null) {\n              result.minimumIntegerDigits++;\n            } else {\n              result.minimumFractionDigits++;\n              result.maximumFractionDigits++;\n            }\n            break;\n\n          case DECIMAL_SEPARATOR:\n            if (hasStartedSuffix) {\n              return null;\n            }\n            hasPassedPrefix = true;\n            decimalSeparatorIndex = i;\n            lastIntegerDigitIndex = i - 1;\n            break;\n\n          case GROUPING_SEPARATOR:\n            if (hasStartedSuffix) {\n              return null;\n            }\n            hasPassedPrefix = true;\n            groupingSeparatorIndex = i;\n            break;\n\n          default:\n            if (hasPassedPrefix) {\n              hasStartedSuffix = true;\n              result.suffix += c;\n            } else {\n              result.prefix += c;\n            }\n        }\n      }\n\n      if (decimalSeparatorIndex === null) {\n        lastIntegerDigitIndex = length - 1;\n      }\n\n      if (decimalSeparatorIndex === length - 1) {\n        result.alwaysShowsDecimalSeparator = true;\n      }\n\n      if (groupingSeparatorIndex !== null) {\n        result.groupingSize = lastIntegerDigitIndex - groupingSeparatorIndex;\n        result.usesGroupingSeparator = true;\n      }\n\n      return result;\n    }\n  }]);\n\n  return NumberFormatterSettingsFormatter;\n})(_formatter2['default']);\n\nexports['default'] = NumberFormatterSettingsFormatter;\nmodule.exports = exports['default'];\n\n},{\"./formatter\":14}],18:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _delimited_text_formatter = _dereq_('./delimited_text_formatter');\n\nvar _delimited_text_formatter2 = _interopRequireDefault(_delimited_text_formatter);\n\n/**\n * @const\n * @private\n */\nvar NANPPhoneDelimiters = {\n  name: 'NANPPhoneDelimiters',\n  0: '(',\n  4: ')',\n  5: ' ',\n  9: '-'\n};\n\n/**\n * @const\n * @private\n */\nvar NANPPhoneDelimitersWithOne = {\n  name: 'NANPPhoneDelimitersWithOne',\n  1: ' ',\n  2: '(',\n  6: ')',\n  7: ' ',\n  11: '-'\n};\n\n/**\n * @const\n * @private\n */\nvar E164PhoneDelimitersWithOneDigit = {\n  name: 'E164PhoneDelimitersWithOneDigit',\n  2: ' ',\n  3: '(',\n  7: ')',\n  8: ' ',\n  12: '-'\n};\n\n/**\n * @const\n * @private\n */\nvar E164PhoneDelimitersWithTwoDigit = {\n  name: 'E164PhoneDelimitersWithTwoDigit',\n  3: ' ',\n  4: '(',\n  8: ')',\n  9: ' ',\n  13: '-'\n};\n\n/**\n * @const\n * @private\n */\nvar E164PhoneDelimitersWithThreeDigit = {\n  name: 'E164PhoneDelimitersWithThreeDigit',\n  4: ' ',\n  5: '(',\n  9: ')',\n  10: ' ',\n  14: '-'\n};\n\n/**\n * This should match any characters in the maps above.\n *\n * @const\n * @private\n */\nvar DELIMITER_PATTERN = /[-\\(\\) ]/g;\n\n/**\n * @const\n * @private\n */\nvar DEFAULT_COUNTRY_CODE = {\n  \"E164\": \"1\",\n  \"country\": [\"American Samoa\", \"Anguilla\", \"Antigua and Barbuda\", \"Bahamas\", \"Barbados\", \"Bermuda\", \"British Virgin Islands\", \"Canada\", \"Cayman Islands\", \"Dominica\", \"Dominican Republic\", \"Grenada\", \"Guam\", \"Jamaica\", \"Montserrat\", \"Northern Mariana Islands\", \"Puerto Rico\", \"Saint Kitts and Nevis\", \"Saint Lucia\", \"Saint Martin\", \"Saint Vincent and the Grenadines\", \"Sint Maarten\", \"Trinidad and Tobago\", \"Turks and Caicos Islands\", \"U.S. Virgin Islands\", \"United States\"]\n};\n\n/**\n * This is an internal store for the current country\n *\n * @private\n */\nvar currentCountryCode = DEFAULT_COUNTRY_CODE;\n\n/**\n * @extends DelimitedTextFormatter\n */\n\nvar PhoneFormatter = (function (_DelimitedTextFormatter) {\n  _inherits(PhoneFormatter, _DelimitedTextFormatter);\n\n  /**\n   * @throws {Error} if anything is passed in\n   * @param {Array} args\n   */\n\n  function PhoneFormatter() {\n    _classCallCheck(this, PhoneFormatter);\n\n    _get(Object.getPrototypeOf(PhoneFormatter.prototype), 'constructor', this).call(this);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length !== 0) {\n      throw new Error('were you trying to set a delimiter (' + args[0] + ')?');\n    }\n  }\n\n  /**\n   * @param {string} chr\n   * @returns {boolean}\n   */\n\n  _createClass(PhoneFormatter, [{\n    key: 'isDelimiter',\n    value: function isDelimiter(chr) {\n      var map = this.delimiterMap;\n      for (var index in map) {\n        if (map.hasOwnProperty(index)) {\n          if (map[index] === chr) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {?string}\n     */\n  }, {\n    key: 'delimiterAt',\n    value: function delimiterAt(index) {\n      return this.delimiterMap[index];\n    }\n\n    /**\n     * @param {number} index\n     * @returns {boolean}\n     */\n  }, {\n    key: 'hasDelimiterAtIndex',\n    value: function hasDelimiterAtIndex(index) {\n      var delimiter = this.delimiterAt(index);\n      return delimiter !== undefined && delimiter !== null;\n    }\n\n    /**\n     * Will call parse on the formatter.\n     *\n     * @param {string} text\n     * @param {function(string)} error\n     * @returns {string} returns value with delimiters removed\n     */\n  }, {\n    key: 'parse',\n    value: function parse(text, error) {\n      if (!error) {\n        error = function () {};\n      }\n      var digits = this.digitsWithoutCountryCode(text);\n      // Source: http://en.wikipedia.org/wiki/North_American_Numbering_Plan\n      //\n      // Area Code\n      if (text.length < 10) {\n        error('phone-formatter.number-too-short');\n      }\n      if (digits[0] === '0') {\n        error('phone-formatter.area-code-zero');\n      }\n      if (digits[0] === '1') {\n        error('phone-formatter.area-code-one');\n      }\n      if (digits[1] === '9') {\n        error('phone-formatter.area-code-n9n');\n      }\n      // Central Office Code\n      if (digits[3] === '1') {\n        error('phone-formatter.central-office-one');\n      }\n      if (digits.slice(4, 6) === '11') {\n        error('phone-formatter.central-office-n11');\n      }\n      return _get(Object.getPrototypeOf(PhoneFormatter.prototype), 'parse', this).call(this, text, error);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {string}\n     */\n  }, {\n    key: 'format',\n    value: function format(value) {\n      this.guessFormatFromText(value);\n      return _get(Object.getPrototypeOf(PhoneFormatter.prototype), 'format', this).call(this, this.removeDelimiterMapChars(value));\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @param {function(string)} error\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change, error) {\n      this.guessFormatFromText(change.proposed.text);\n\n      if (change.inserted.text.length > 1) {\n        // handle pastes\n        var text = change.current.text;\n        var selectedRange = change.current.selectedRange;\n        var toInsert = change.inserted.text;\n\n        // Replace the selection with the new text, remove non-digits, then format.\n        var formatted = this.format((text.slice(0, selectedRange.start) + toInsert + text.slice(selectedRange.start + selectedRange.length)).replace(/[^\\d]/g, ''));\n\n        change.proposed = {\n          text: formatted,\n          selectedRange: {\n            start: formatted.length - (text.length - (selectedRange.start + selectedRange.length)),\n            length: 0\n          }\n        };\n\n        return _get(Object.getPrototypeOf(PhoneFormatter.prototype), 'isChangeValid', this).call(this, change, error);\n      }\n\n      if (/^\\d*$/.test(change.inserted.text) || change.proposed.text.indexOf('+') === 0) {\n        var formatName = this.delimiterMap.name;\n\n        // First guess at the localized format\n        if (currentCountryCode.localizedFormat) {\n          this.delimiterMap = currentCountryCode.localizedFormat;\n          this.maximumLength = currentCountryCode.localizedFormat.maximumLength;\n          formatName = 'localized-' + currentCountryCode.E164;\n        }\n\n        // We need to store the change and current format guess so that if the isChangeValid\n        // call to super changes the proposed text such that the format we thought is no longer\n        // valid. If that does happen we actually just rerun it through with the correct format\n        var originalProposed = change.proposed.text;\n        var _isChangeValid = _get(Object.getPrototypeOf(PhoneFormatter.prototype), 'isChangeValid', this).call(this, change, error);\n\n        this.guessFormatFromText(change.proposed.text);\n\n        // Make sure if the localizedFormat changed, respect that\n        if (currentCountryCode.localizedFormat) {\n          this.delimiterMap = currentCountryCode.localizedFormat;\n          this.maximumLength = currentCountryCode.localizedFormat.maximumLength;\n          this.delimiterMap.name = 'localized-' + currentCountryCode.E164;\n        }\n\n        if (formatName === this.delimiterMap.name) {\n          return _isChangeValid;\n        } else {\n          var originalChange = change;\n          originalChange.proposed.text = originalProposed;\n          return _get(Object.getPrototypeOf(PhoneFormatter.prototype), 'isChangeValid', this).call(this, originalChange, error);\n        }\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Re-configures this formatter to use the delimiters appropriate\n     * for the given text.\n     *\n     * @param {string} text A potentially formatted string containing a phone number.\n     * @private\n     */\n  }, {\n    key: 'guessFormatFromText',\n    value: function guessFormatFromText(text) {\n      currentCountryCode = DEFAULT_COUNTRY_CODE;\n      if (text && text[0] === '+') {\n        if (text.length > 1) {\n          var isValidCountryCode = function isValidCountryCode(countryCode) {\n            var matchingCodes = COUNTRY_CODES.filter(function (country) {\n              return country.E164 === countryCode;\n            });\n\n            return matchingCodes.length > 0;\n          };\n\n          var rawText = this.removeDelimiterMapChars(text);\n          if (currentCountryCode = isValidCountryCode(rawText[1])) {\n            this.delimiterMap = E164PhoneDelimitersWithOneDigit;\n            this.maximumLength = 1 + 1 + 10 + 5;\n          } else if (text.length > 2 && (currentCountryCode = isValidCountryCode(rawText.slice(1, 3)))) {\n            this.delimiterMap = E164PhoneDelimitersWithTwoDigit;\n            this.maximumLength = 1 + 2 + 10 + 5;\n          } else {\n            currentCountryCode = isValidCountryCode(rawText.slice(1, 4)) || DEFAULT_COUNTRY_CODE;\n            this.delimiterMap = E164PhoneDelimitersWithThreeDigit;\n            this.maximumLength = 1 + 3 + 10 + 5;\n          }\n        } else {\n\n          this.delimiterMap = E164PhoneDelimitersWithThreeDigit;\n          this.maximumLength = 1 + 3 + 10 + 5;\n        }\n      } else if (text && text[0] === '1') {\n        this.delimiterMap = NANPPhoneDelimitersWithOne;\n        this.maximumLength = 1 + 10 + 5;\n      } else if (text && text[0] === ' ') {\n        this.delimiterMap = NANPPhoneDelimiters;\n        this.maximumLength = 10 + 5;\n      } else {\n        this.delimiterMap = NANPPhoneDelimiters;\n        this.maximumLength = 10 + 4;\n      }\n    }\n\n    /**\n     * Gives back just the phone number digits as a string without the\n     * country code. Future-proofing internationalization where the country code\n     * isn't just +1.\n     *\n     * @param {string} text\n     * @private\n     */\n  }, {\n    key: 'digitsWithoutCountryCode',\n    value: function digitsWithoutCountryCode(text) {\n      var digits = (text || '').replace(/[^\\d]/g, '');\n      var extraDigits = digits.length - 10;\n      if (extraDigits > 0) {\n        digits = digits.substr(extraDigits);\n      }\n      return digits;\n    }\n\n    /**\n     * Removes characters from the phone number that will be added\n     * by the formatter.\n     *\n     * @param {string} text\n     * @private\n     */\n  }, {\n    key: 'removeDelimiterMapChars',\n    value: function removeDelimiterMapChars(text) {\n      return (text || '').replace(DELIMITER_PATTERN, '');\n    }\n  }]);\n\n  return PhoneFormatter;\n})(_delimited_text_formatter2['default']);\n\nvar COUNTRY_CODES = [{\n  \"E164\": \"93\",\n  \"country\": \"Afghanistan\"\n}, {\n  \"E164\": \"355\",\n  \"country\": \"Albania\"\n}, {\n  \"E164\": \"213\",\n  \"country\": \"Algeria\"\n}, {\n  \"E164\": \"1\",\n  \"country\": [\"American Samoa\", \"Anguilla\", \"Antigua and Barbuda\", \"Bahamas\", \"Barbados\", \"Bermuda\", \"British Virgin Islands\", \"Canada\", \"Cayman Islands\", \"Dominica\", \"Dominican Republic\", \"Grenada\", \"Guam\", \"Jamaica\", \"Montserrat\", \"Northern Mariana Islands\", \"Puerto Rico\", \"Saint Kitts and Nevis\", \"Saint Lucia\", \"Saint Martin\", \"Saint Vincent and the Grenadines\", \"Sint Maarten\", \"Trinidad and Tobago\", \"Turks and Caicos Islands\", \"U.S. Virgin Islands\", \"United States\"]\n}, {\n  \"E164\": \"376\",\n  \"country\": \"Andorra\"\n}, {\n  \"E164\": \"244\",\n  \"country\": \"Angola\"\n}, {\n  \"E164\": \"672\",\n  \"country\": \"Antarctica\"\n}, {\n  \"E164\": \"54\",\n  \"country\": \"Argentina\"\n}, {\n  \"E164\": \"374\",\n  \"country\": \"Armenia\"\n}, {\n  \"E164\": \"297\",\n  \"country\": \"Aruba\"\n}, {\n  \"E164\": \"43\",\n  \"country\": \"Austria\"\n}, {\n  \"E164\": \"994\",\n  \"country\": \"Azerbaijan\"\n}, {\n  \"E164\": \"973\",\n  \"country\": \"Bahrain\"\n}, {\n  \"E164\": \"880\",\n  \"country\": \"Bangladesh\"\n}, {\n  \"E164\": \"375\",\n  \"country\": \"Belarus\"\n}, {\n  \"E164\": \"32\",\n  \"country\": \"Belgium\"\n}, {\n  \"E164\": \"501\",\n  \"country\": \"Belize\"\n}, {\n  \"E164\": \"229\",\n  \"country\": \"Benin\"\n}, {\n  \"E164\": \"975\",\n  \"country\": \"Bhutan\"\n}, {\n  \"E164\": \"591\",\n  \"country\": \"Bolivia\"\n}, {\n  \"E164\": \"387\",\n  \"country\": \"Bosnia and Herzegovina\"\n}, {\n  \"E164\": \"267\",\n  \"country\": \"Botswana\"\n}, {\n  \"E164\": \"55\",\n  \"country\": \"Brazil\"\n}, {\n  \"E164\": \"246\",\n  \"country\": \"British Indian Ocean Territory\"\n}, {\n  \"E164\": \"673\",\n  \"country\": \"Brunei\"\n}, {\n  \"E164\": \"359\",\n  \"country\": \"Bulgaria\"\n}, {\n  \"E164\": \"226\",\n  \"country\": \"Burkina Faso\"\n}, {\n  \"E164\": \"257\",\n  \"country\": \"Burundi\"\n}, {\n  \"E164\": \"855\",\n  \"country\": \"Cambodia\"\n}, {\n  \"E164\": \"237\",\n  \"country\": \"Cameroon\"\n}, {\n  \"E164\": \"238\",\n  \"country\": \"Cape Verde\"\n}, {\n  \"E164\": \"236\",\n  \"country\": \"Central African Republic\"\n}, {\n  \"E164\": \"235\",\n  \"country\": \"Chad\"\n}, {\n  \"E164\": \"56\",\n  \"country\": \"Chile\"\n}, {\n  \"E164\": \"86\",\n  \"country\": \"China\"\n}, {\n  \"E164\": \"61\",\n  \"country\": [\"Australia\", \"Christmas Island\", \"Cocos Islands\"]\n}, {\n  \"E164\": \"57\",\n  \"country\": \"Colombia\"\n}, {\n  \"E164\": \"269\",\n  \"country\": \"Comoros\"\n}, {\n  \"E164\": \"682\",\n  \"country\": \"Cook Islands\"\n}, {\n  \"E164\": \"506\",\n  \"country\": \"Costa Rica\"\n}, {\n  \"E164\": \"385\",\n  \"country\": \"Croatia\"\n}, {\n  \"E164\": \"53\",\n  \"country\": \"Cuba\"\n}, {\n  \"E164\": \"599\",\n  \"country\": [\"Curacao\", \"Netherlands Antilles\"]\n}, {\n  \"E164\": \"357\",\n  \"country\": \"Cyprus\"\n}, {\n  \"E164\": \"420\",\n  \"country\": \"Czech Republic\"\n}, {\n  \"E164\": \"243\",\n  \"country\": \"Democratic Republic of the Congo\"\n}, {\n  \"E164\": \"45\",\n  \"country\": \"Denmark\"\n}, {\n  \"E164\": \"253\",\n  \"country\": \"Djibouti\"\n}, {\n  \"E164\": \"670\",\n  \"country\": \"East Timor\"\n}, {\n  \"E164\": \"593\",\n  \"country\": \"Ecuador\"\n}, {\n  \"E164\": \"20\",\n  \"country\": \"Egypt\"\n}, {\n  \"E164\": \"503\",\n  \"country\": \"El Salvador\"\n}, {\n  \"E164\": \"240\",\n  \"country\": \"Equatorial Guinea\"\n}, {\n  \"E164\": \"291\",\n  \"country\": \"Eritrea\"\n}, {\n  \"E164\": \"372\",\n  \"country\": \"Estonia\"\n}, {\n  \"E164\": \"251\",\n  \"country\": \"Ethiopia\"\n}, {\n  \"E164\": \"500\",\n  \"country\": \"Falkland Islands\"\n}, {\n  \"E164\": \"298\",\n  \"country\": \"Faroe Islands\"\n}, {\n  \"E164\": \"679\",\n  \"country\": \"Fiji\"\n}, {\n  \"E164\": \"358\",\n  \"country\": \"Finland\"\n}, {\n  \"E164\": \"33\",\n  \"country\": \"France\"\n}, {\n  \"E164\": \"689\",\n  \"country\": \"French Polynesia\"\n}, {\n  \"E164\": \"241\",\n  \"country\": \"Gabon\"\n}, {\n  \"E164\": \"220\",\n  \"country\": \"Gambia\"\n}, {\n  \"E164\": \"995\",\n  \"country\": \"Georgia\"\n}, {\n  \"E164\": \"49\",\n  \"country\": \"Germany\"\n}, {\n  \"E164\": \"233\",\n  \"country\": \"Ghana\"\n}, {\n  \"E164\": \"350\",\n  \"country\": \"Gibraltar\"\n}, {\n  \"E164\": \"30\",\n  \"country\": \"Greece\"\n}, {\n  \"E164\": \"299\",\n  \"country\": \"Greenland\"\n}, {\n  \"E164\": \"502\",\n  \"country\": \"Guatemala\"\n}, {\n  \"E164\": \"44\",\n  \"country\": [\"Guernsey\", \"Isle of Man\", \"Jersey\", \"United Kingdom\"]\n}, {\n  \"E164\": \"224\",\n  \"country\": \"Guinea\"\n}, {\n  \"E164\": \"245\",\n  \"country\": \"Guinea-Bissau\"\n}, {\n  \"E164\": \"592\",\n  \"country\": \"Guyana\"\n}, {\n  \"E164\": \"509\",\n  \"country\": \"Haiti\"\n}, {\n  \"E164\": \"504\",\n  \"country\": \"Honduras\"\n}, {\n  \"E164\": \"852\",\n  \"country\": \"Hong Kong\"\n}, {\n  \"E164\": \"36\",\n  \"country\": \"Hungary\"\n}, {\n  \"E164\": \"354\",\n  \"country\": \"Iceland\"\n}, {\n  \"E164\": \"91\",\n  \"country\": \"India\"\n}, {\n  \"E164\": \"62\",\n  \"country\": \"Indonesia\"\n}, {\n  \"E164\": \"98\",\n  \"country\": \"Iran\"\n}, {\n  \"E164\": \"964\",\n  \"country\": \"Iraq\"\n}, {\n  \"E164\": \"353\",\n  \"country\": \"Ireland\"\n}, {\n  \"E164\": \"972\",\n  \"country\": \"Israel\"\n}, {\n  \"E164\": \"39\",\n  \"country\": [\"Italy\", \"Vatican\"]\n}, {\n  \"E164\": \"225\",\n  \"country\": \"Ivory Coast\"\n}, {\n  \"E164\": \"81\",\n  \"country\": \"Japan\"\n}, {\n  \"E164\": \"962\",\n  \"country\": \"Jordan\"\n}, {\n  \"E164\": \"7\",\n  \"country\": [\"Kazakhstan\", \"Russia\"],\n  \"localizedFormat\": {\n    \"maximumLength\": 1 + 1 + 10 + 6,\n    2: ' ',\n    3: '(',\n    7: ')',\n    8: ' ',\n    12: '-',\n    15: '-'\n  }\n}, {\n  \"E164\": \"254\",\n  \"country\": \"Kenya\"\n}, {\n  \"E164\": \"686\",\n  \"country\": \"Kiribati\"\n}, {\n  \"E164\": \"383\",\n  \"country\": \"Kosovo\"\n}, {\n  \"E164\": \"965\",\n  \"country\": \"Kuwait\"\n}, {\n  \"E164\": \"996\",\n  \"country\": \"Kyrgyzstan\"\n}, {\n  \"E164\": \"856\",\n  \"country\": \"Laos\"\n}, {\n  \"E164\": \"371\",\n  \"country\": \"Latvia\"\n}, {\n  \"E164\": \"961\",\n  \"country\": \"Lebanon\"\n}, {\n  \"E164\": \"266\",\n  \"country\": \"Lesotho\"\n}, {\n  \"E164\": \"231\",\n  \"country\": \"Liberia\"\n}, {\n  \"E164\": \"218\",\n  \"country\": \"Libya\"\n}, {\n  \"E164\": \"423\",\n  \"country\": \"Liechtenstein\"\n}, {\n  \"E164\": \"370\",\n  \"country\": \"Lithuania\"\n}, {\n  \"E164\": \"352\",\n  \"country\": \"Luxembourg\"\n}, {\n  \"E164\": \"853\",\n  \"country\": \"Macao\"\n}, {\n  \"E164\": \"389\",\n  \"country\": \"Macedonia\"\n}, {\n  \"E164\": \"261\",\n  \"country\": \"Madagascar\"\n}, {\n  \"E164\": \"265\",\n  \"country\": \"Malawi\"\n}, {\n  \"E164\": \"60\",\n  \"country\": \"Malaysia\"\n}, {\n  \"E164\": \"960\",\n  \"country\": \"Maldives\"\n}, {\n  \"E164\": \"223\",\n  \"country\": \"Mali\"\n}, {\n  \"E164\": \"356\",\n  \"country\": \"Malta\"\n}, {\n  \"E164\": \"692\",\n  \"country\": \"Marshall Islands\"\n}, {\n  \"E164\": \"222\",\n  \"country\": \"Mauritania\"\n}, {\n  \"E164\": \"230\",\n  \"country\": \"Mauritius\"\n}, {\n  \"E164\": \"262\",\n  \"country\": [\"Mayotte\", \"Reunion\"]\n}, {\n  \"E164\": \"52\",\n  \"country\": \"Mexico\"\n}, {\n  \"E164\": \"691\",\n  \"country\": \"Micronesia\"\n}, {\n  \"E164\": \"373\",\n  \"country\": \"Moldova\"\n}, {\n  \"E164\": \"377\",\n  \"country\": \"Monaco\"\n}, {\n  \"E164\": \"976\",\n  \"country\": \"Mongolia\"\n}, {\n  \"E164\": \"382\",\n  \"country\": \"Montenegro\"\n}, {\n  \"E164\": \"212\",\n  \"country\": [\"Morocco\", \"Western Sahara\"]\n}, {\n  \"E164\": \"258\",\n  \"country\": \"Mozambique\"\n}, {\n  \"E164\": \"95\",\n  \"country\": \"Myanmar\"\n}, {\n  \"E164\": \"264\",\n  \"country\": \"Namibia\"\n}, {\n  \"E164\": \"674\",\n  \"country\": \"Nauru\"\n}, {\n  \"E164\": \"977\",\n  \"country\": \"Nepal\"\n}, {\n  \"E164\": \"31\",\n  \"country\": \"Netherlands\"\n}, {\n  \"E164\": \"687\",\n  \"country\": \"New Caledonia\"\n}, {\n  \"E164\": \"64\",\n  \"country\": \"New Zealand\"\n}, {\n  \"E164\": \"64\",\n  \"country\": \"Pitcairn\"\n}, {\n  \"E164\": \"505\",\n  \"country\": \"Nicaragua\"\n}, {\n  \"E164\": \"227\",\n  \"country\": \"Niger\"\n}, {\n  \"E164\": \"234\",\n  \"country\": \"Nigeria\"\n}, {\n  \"E164\": \"683\",\n  \"country\": \"Niue\"\n}, {\n  \"E164\": \"850\",\n  \"country\": \"North Korea\"\n}, {\n  \"E164\": \"47\",\n  \"country\": [\"Norway\", \"Svalbard and Jan Mayen\"]\n}, {\n  \"E164\": \"968\",\n  \"country\": \"Oman\"\n}, {\n  \"E164\": \"92\",\n  \"country\": \"Pakistan\"\n}, {\n  \"E164\": \"680\",\n  \"country\": \"Palau\"\n}, {\n  \"E164\": \"970\",\n  \"country\": \"Palestine\"\n}, {\n  \"E164\": \"507\",\n  \"country\": \"Panama\"\n}, {\n  \"E164\": \"675\",\n  \"country\": \"Papua New Guinea\"\n}, {\n  \"E164\": \"595\",\n  \"country\": \"Paraguay\"\n}, {\n  \"E164\": \"51\",\n  \"country\": \"Peru\"\n}, {\n  \"E164\": \"63\",\n  \"country\": \"Philippines\"\n}, {\n  \"E164\": \"48\",\n  \"country\": \"Poland\"\n}, {\n  \"E164\": \"351\",\n  \"country\": \"Portugal\"\n}, {\n  \"E164\": \"974\",\n  \"country\": \"Qatar\"\n}, {\n  \"E164\": \"242\",\n  \"country\": \"Republic of the Congo\"\n}, {\n  \"E164\": \"40\",\n  \"country\": \"Romania\"\n}, {\n  \"E164\": \"250\",\n  \"country\": \"Rwanda\"\n}, {\n  \"E164\": \"590\",\n  \"country\": \"Saint Barthelemy\"\n}, {\n  \"E164\": \"290\",\n  \"country\": \"Saint Helena\"\n}, {\n  \"E164\": \"508\",\n  \"country\": \"Saint Pierre and Miquelon\"\n}, {\n  \"E164\": \"685\",\n  \"country\": \"Samoa\"\n}, {\n  \"E164\": \"378\",\n  \"country\": \"San Marino\"\n}, {\n  \"E164\": \"239\",\n  \"country\": \"Sao Tome and Principe\"\n}, {\n  \"E164\": \"966\",\n  \"country\": \"Saudi Arabia\"\n}, {\n  \"E164\": \"221\",\n  \"country\": \"Senegal\"\n}, {\n  \"E164\": \"381\",\n  \"country\": \"Serbia\"\n}, {\n  \"E164\": \"248\",\n  \"country\": \"Seychelles\"\n}, {\n  \"E164\": \"232\",\n  \"country\": \"Sierra Leone\"\n}, {\n  \"E164\": \"65\",\n  \"country\": \"Singapore\"\n}, {\n  \"E164\": \"421\",\n  \"country\": \"Slovakia\"\n}, {\n  \"E164\": \"386\",\n  \"country\": \"Slovenia\"\n}, {\n  \"E164\": \"677\",\n  \"country\": \"Solomon Islands\"\n}, {\n  \"E164\": \"252\",\n  \"country\": \"Somalia\"\n}, {\n  \"E164\": \"27\",\n  \"country\": \"South Africa\"\n}, {\n  \"E164\": \"82\",\n  \"country\": \"South Korea\"\n}, {\n  \"E164\": \"211\",\n  \"country\": \"South Sudan\"\n}, {\n  \"E164\": \"34\",\n  \"country\": \"Spain\"\n}, {\n  \"E164\": \"94\",\n  \"country\": \"Sri Lanka\"\n}, {\n  \"E164\": \"249\",\n  \"country\": \"Sudan\"\n}, {\n  \"E164\": \"597\",\n  \"country\": \"Suriname\"\n}, {\n  \"E164\": \"268\",\n  \"country\": \"Swaziland\"\n}, {\n  \"E164\": \"46\",\n  \"country\": \"Sweden\"\n}, {\n  \"E164\": \"41\",\n  \"country\": \"Switzerland\"\n}, {\n  \"E164\": \"963\",\n  \"country\": \"Syria\"\n}, {\n  \"E164\": \"886\",\n  \"country\": \"Taiwan\"\n}, {\n  \"E164\": \"992\",\n  \"country\": \"Tajikistan\"\n}, {\n  \"E164\": \"255\",\n  \"country\": \"Tanzania\"\n}, {\n  \"E164\": \"66\",\n  \"country\": \"Thailand\"\n}, {\n  \"E164\": \"228\",\n  \"country\": \"Togo\"\n}, {\n  \"E164\": \"690\",\n  \"country\": \"Tokelau\"\n}, {\n  \"E164\": \"676\",\n  \"country\": \"Tonga\"\n}, {\n  \"E164\": \"216\",\n  \"country\": \"Tunisia\"\n}, {\n  \"E164\": \"90\",\n  \"country\": \"Turkey\"\n}, {\n  \"E164\": \"993\",\n  \"country\": \"Turkmenistan\"\n}, {\n  \"E164\": \"688\",\n  \"country\": \"Tuvalu\"\n}, {\n  \"E164\": \"256\",\n  \"country\": \"Uganda\"\n}, {\n  \"E164\": \"380\",\n  \"country\": \"Ukraine\"\n}, {\n  \"E164\": \"971\",\n  \"country\": \"United Arab Emirates\"\n}, {\n  \"E164\": \"598\",\n  \"country\": \"Uruguay\"\n}, {\n  \"E164\": \"998\",\n  \"country\": \"Uzbekistan\"\n}, {\n  \"E164\": \"678\",\n  \"country\": \"Vanuatu\"\n}, {\n  \"E164\": \"58\",\n  \"country\": \"Venezuela\"\n}, {\n  \"E164\": \"84\",\n  \"country\": \"Vietnam\"\n}, {\n  \"E164\": \"681\",\n  \"country\": \"Wallis and Futuna\"\n}, {\n  \"E164\": \"967\",\n  \"country\": \"Yemen\"\n}, {\n  \"E164\": \"260\",\n  \"country\": \"Zambia\"\n}, {\n  \"E164\": \"263\",\n  \"country\": \"Zimbabwe\"\n}];\nexports['default'] = PhoneFormatter;\nmodule.exports = exports['default'];\n\n},{\"./delimited_text_formatter\":10}],19:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _delimited_text_formatter = _dereq_('./delimited_text_formatter');\n\nvar _delimited_text_formatter2 = _interopRequireDefault(_delimited_text_formatter);\n\n/**\n * @const\n * @private\n */\nvar DIGITS_PATTERN = /^\\d*$/;\n\n/**\n * @extends DelimitedTextFormatter\n */\n\nvar SocialSecurityNumberFormatter = (function (_DelimitedTextFormatter) {\n  _inherits(SocialSecurityNumberFormatter, _DelimitedTextFormatter);\n\n  function SocialSecurityNumberFormatter() {\n    _classCallCheck(this, SocialSecurityNumberFormatter);\n\n    _get(Object.getPrototypeOf(SocialSecurityNumberFormatter.prototype), 'constructor', this).call(this, '-');\n    this.maximumLength = 9 + 2;\n  }\n\n  /**\n   * @param {number} index\n   * @returns {boolean}\n   */\n\n  _createClass(SocialSecurityNumberFormatter, [{\n    key: 'hasDelimiterAtIndex',\n    value: function hasDelimiterAtIndex(index) {\n      return index === 3 || index === 6;\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @param {function(string)} error\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change, error) {\n      if (DIGITS_PATTERN.test(change.inserted.text)) {\n        return _get(Object.getPrototypeOf(SocialSecurityNumberFormatter.prototype), 'isChangeValid', this).call(this, change, error);\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return SocialSecurityNumberFormatter;\n})(_delimited_text_formatter2['default']);\n\nexports['default'] = SocialSecurityNumberFormatter;\nmodule.exports = exports['default'];\n\n},{\"./delimited_text_formatter\":10}],20:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _formatter = _dereq_('./formatter');\n\nvar _formatter2 = _interopRequireDefault(_formatter);\n\nvar _undo_manager = _dereq_('./undo_manager');\n\nvar _undo_manager2 = _interopRequireDefault(_undo_manager);\n\nvar _utils = _dereq_('./utils');\n\nvar _caret = _dereq_('./caret');\n\nvar _caret2 = _interopRequireDefault(_caret);\n\n/**\n * Simulates input behavior.\n *\n * @external InputSim\n * @see https://github.com/iamJoeTaylor/input-sim\n */\n\nvar _inputSim = _dereq_('input-sim');\n\n/**\n * TextField is the simplest input and the base for more complex\n * types to inherit.\n *\n * @extends external:InputSim.Input\n */\n\nvar _installCaret = (0, _caret2['default'])();\n\nvar getCaret = _installCaret.getCaret;\nvar setCaret = _installCaret.setCaret;\n\nvar TextField = (function (_Input) {\n  _inherits(TextField, _Input);\n\n  /**\n   * Sets up the initial properties of the TextField and\n   * sets  up the event listeners\n   *\n   * @param {HTMLElement} element\n   * @param {Formatter} formatter\n   */\n\n  function TextField(element, formatter) {\n    _classCallCheck(this, TextField);\n\n    _get(Object.getPrototypeOf(TextField.prototype), 'constructor', this).call(this);\n\n    var caret = getCaret(element);\n    if (typeof element.get === 'function') {\n      console.warn('DEPRECATION: FieldKit.TextField instances should no longer be ' + 'created with a jQuery-wrapped element.');\n      element = element.get(0);\n    }\n    this.element = element;\n    this._formatter = formatter;\n    this._enabled = true;\n    this._manualCaret = { start: 0, end: 0 };\n    this._placeholder = null;\n    this._disabledPlaceholder = null;\n    this._focusedPlaceholder = null;\n    this._unfocusedPlaceholder = null;\n    this._isDirty = false;\n    this._valueOnFocus = '';\n    this._currentValue = '';\n    // Make sure textDidChange fires while the value is correct\n    this._needsKeyUpTextDidChangeTrigger = false;\n    this._blur = (0, _utils.bind)(this._blur, this);\n    this._focus = (0, _utils.bind)(this._focus, this);\n    this._click = (0, _utils.bind)(this._click, this);\n    this._paste = (0, _utils.bind)(this._paste, this);\n    this._keyUp = (0, _utils.bind)(this._keyUp, this);\n    this._keyPress = (0, _utils.bind)(this._keyPress, this);\n    this._keyDown = (0, _utils.bind)(this._keyDown, this);\n    if (element['field-kit-text-field']) {\n      throw new Error('already attached a TextField to this element');\n    } else {\n      element['field-kit-text-field'] = this;\n    }\n    element.addEventListener('keydown', this._keyDown);\n    element.addEventListener('keypress', this._keyPress);\n    element.addEventListener('keyup', this._keyUp);\n    element.addEventListener('click', this._click);\n    element.addEventListener('paste', this._paste);\n    element.addEventListener('focus', this._focus);\n    element.addEventListener('blur', this._blur);\n\n    if (!element.getAttribute('autocapitalize')) {\n      element.setAttribute('autocapitalize', 'off');\n    }\n\n    var window = element.ownerDocument.defaultView;\n\n    /**\n     * Fixes caret bug (Android) that caused the input\n     * to place inserted characters in the wrong place\n     * Expected: 1234 5678|  =>  1234 5678 9|\n     * Bug: 1234 5678|  =>  1234 5679| 8\n     *\n     * @private\n     */\n    this._needsManualCaret = window.navigator.userAgent.toLowerCase().indexOf('android') > -1;\n\n    this.setText(element.value);\n\n    this.setSelectedRange({\n      start: caret.start,\n      length: caret.end - caret.start\n    });\n  }\n\n  /**\n   * Helps calculate the changes after an event on a FieldKit.TextField.\n   *\n   * @private\n   */\n\n  /**\n   * **** Public Events ****\n   */\n\n  /**\n   * Called when the user has changed the text of the field. Can be used in\n   * subclasses to perform actions suitable for this event.\n   *\n   * @private\n   */\n\n  _createClass(TextField, [{\n    key: 'textDidChange',\n    value: function textDidChange() {}\n\n    /**\n     * Called when the user has in some way declared that they are done editing,\n     * such as leaving the field or perhaps pressing enter. Can be used in\n     * subclasses to perform actions suitable for this event.\n     *\n     * @private\n     */\n  }, {\n    key: 'textFieldDidEndEditing',\n    value: function textFieldDidEndEditing() {}\n\n    /**\n     * Performs actions necessary for beginning editing.\n     *\n     * @private\n     */\n  }, {\n    key: 'textFieldDidBeginEditing',\n    value: function textFieldDidBeginEditing() {}\n\n    /**\n     * **** Private Events ****\n     */\n\n    /**\n     * Performs actions necessary for text change.\n     *\n     * @private\n     */\n  }, {\n    key: '_textDidChange',\n    value: function _textDidChange() {\n      var delegate = this._delegate;\n      this.textDidChange();\n      if (delegate && typeof delegate.textDidChange === 'function') {\n        delegate.textDidChange(this);\n      }\n\n      // manually fire the HTML5 input event\n      this._fireEvent('input');\n    }\n\n    /**\n     * Performs actions necessary for ending editing.\n     *\n     * @private\n     */\n  }, {\n    key: '_textFieldDidEndEditing',\n    value: function _textFieldDidEndEditing() {\n      var delegate = this._delegate;\n      this.textFieldDidEndEditing();\n      if (delegate && typeof delegate.textFieldDidEndEditing === 'function') {\n        delegate.textFieldDidEndEditing(this);\n      }\n\n      // manually fire the HTML5 change event, only when a change has been made since focus\n      if (this._isDirty && this._valueOnFocus !== this.element.value) {\n        this._fireEvent('change');\n      }\n\n      // reset the dirty property\n      this._isDirty = false;\n      this._valueOnFocus = '';\n    }\n\n    /**\n     * Performs actions necessary for beginning editing.\n     *\n     * @private\n     */\n  }, {\n    key: '_textFieldDidBeginEditing',\n    value: function _textFieldDidBeginEditing() {\n      var delegate = this._delegate;\n      this.textFieldDidBeginEditing();\n      if (delegate && typeof delegate.textFieldDidBeginEditing === 'function') {\n        delegate.textFieldDidBeginEditing(this);\n      }\n    }\n\n    /**\n     * **** Public Methods ****\n     */\n\n    /**\n     * Gets the current delegate for this text field.\n     *\n     * @returns {TextFieldDelegate}\n     */\n  }, {\n    key: 'delegate',\n    value: function delegate() {\n      return this._delegate;\n    }\n\n    /**\n     * Sets the current delegate for this text field.\n     *\n     * @param {TextFieldDelegate} delegate\n     */\n  }, {\n    key: 'setDelegate',\n    value: function setDelegate(delegate) {\n      this._delegate = delegate;\n    }\n\n    /**\n     * Tears down FieldKit\n     */\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var element = this.element;\n      element.removeEventListener('keydown', this._keyDown);\n      element.removeEventListener('keypress', this._keyPress);\n      element.removeEventListener('keyup', this._keyUp);\n      element.removeEventListener('click', this._click);\n      element.removeEventListener('paste', this._paste);\n      element.removeEventListener('focus', this._focus);\n      element.removeEventListener('blur', this._blur);\n      delete element['field-kit-text-field'];\n    }\n\n    /**\n     * Gets the current formatter. Formatters are used to translate between text\n     * and value properties of the field.\n     *\n     * @returns {Formatter}\n     */\n  }, {\n    key: 'formatter',\n    value: function formatter() {\n      if (!this._formatter) {\n        this._formatter = new _formatter2['default']();\n        var maximumLengthString = this.element.getAttribute('maxlength');\n        if (maximumLengthString !== undefined && maximumLengthString !== null) {\n          this._formatter.maximumLength = parseInt(maximumLengthString, 10);\n        }\n      }\n\n      return this._formatter;\n    }\n\n    /**\n     * Sets the current formatter.\n     *\n     * @param {Formatter} formatter\n     */\n  }, {\n    key: 'setFormatter',\n    value: function setFormatter(formatter) {\n      var value = this.value();\n      this._formatter = formatter;\n      this.setValue(value);\n    }\n\n    /**\n     * Builds a change instance and formats the change to see if it's valid\n     *\n     * @param   {object} current\n     * @param   {object} proposed\n     * @returns {?object} false if change doesn't have changes or change isn't valid. Change object if it is.\n     */\n  }, {\n    key: 'hasChangesAndIsValid',\n    value: function hasChangesAndIsValid(current, proposed) {\n      var _this = this;\n\n      var change = new TextFieldStateChange(this);\n      var error = function error(errorType) {\n        var delegate = _this.delegate();\n        if (delegate) {\n          if (typeof delegate.textFieldDidFailToValidateChange === 'function') {\n            delegate.textFieldDidFailToValidateChange(_this, change, errorType);\n          }\n        }\n      };\n      change.current = { text: current.text, selectedRange: current.selectedRange };\n      change.proposed = { text: proposed.text, selectedRange: proposed.selectedRange };\n      if (change.hasChanges() && this.formatter().isChangeValid(change, error)) {\n        return change;\n      }\n      return null;\n    }\n\n    /**\n     * Handles a key event could be trying to end editing.\n     *\n     */\n  }, {\n    key: 'insertNewline',\n    value: function insertNewline() {\n      this._textFieldDidEndEditing();\n      this._didEndEditingButKeptFocus = true;\n    }\n\n    /**\n     * Debug support\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'inspect',\n    value: function inspect() {\n      return '#<TextField text=\"' + this.text() + '\">';\n    }\n\n    /**\n     * Replaces the current selection with text from the given pasteboard.\n     *\n     * @param {DataTransfer} pasteboard\n     */\n  }, {\n    key: 'readSelectionFromPasteboard',\n    value: function readSelectionFromPasteboard(pasteboard) {\n      var range = undefined,\n          text = undefined;\n      text = pasteboard.getData('Text');\n      this.replaceSelection(text);\n      range = this.selectedRange();\n      range.start += range.length;\n      range.length = 0;\n      this.setSelectedRange(range);\n    }\n\n    /**\n     * Checks changes after invoking the passed function for validity and rolls\n     * them back if the changes turned out to be invalid.\n     *\n     * @returns {Object} whatever object `callback` returns\n     */\n  }, {\n    key: 'rollbackInvalidChanges',\n    value: function rollbackInvalidChanges(callback) {\n      var result = null;\n      var errorType = null;\n      var change = TextFieldStateChange.build(this, function () {\n        return result = callback();\n      });\n      var error = function error(type) {\n        errorType = type;\n      };\n      if (change.hasChanges()) {\n        var formatter = this.formatter();\n        if (formatter && typeof formatter.isChangeValid === 'function') {\n          if (!this._isDirty) {\n            this._valueOnFocus = change.current.text || '';\n            this._isDirty = true;\n          }\n          if (formatter.isChangeValid(change, error)) {\n            change.recomputeDiff();\n            this.setText(change.proposed.text);\n            this.setSelectedRange(change.proposed.selectedRange);\n          } else {\n            var delegate = this.delegate();\n            if (delegate) {\n              if (typeof delegate.textFieldDidFailToValidateChange === 'function') {\n                delegate.textFieldDidFailToValidateChange(this, change, errorType);\n              }\n            }\n            this.setText(change.current.text);\n            this.setSelectedRange(change.current.selectedRange);\n            return result;\n          }\n        }\n        if (change.inserted.text.length || change.deleted.text.length) {\n          this.undoManager().proxyFor(this)._applyChangeFromUndoManager(change);\n          this._textDidChange();\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the object value. This is the value that should be considered the\n     * 'real' value of the field.\n     *\n     * @returns {Object}\n     */\n  }, {\n    key: 'value',\n    value: function value() {\n      var _this2 = this;\n\n      var text = this.text();\n      var delegate = this.delegate();\n      var formatter = this.formatter();\n      if (!formatter) {\n        return text;\n      }\n\n      return formatter.parse(text, function (errorType) {\n        if (delegate) {\n          if (typeof delegate.textFieldDidFailToParseString === 'function') {\n            delegate.textFieldDidFailToParseString(_this2, text, errorType);\n          }\n        }\n      });\n    }\n\n    /**\n     * Sets the object value of the field.\n     *\n     * @param {string} value\n     */\n  }, {\n    key: 'setValue',\n    value: function setValue(value) {\n      if (this._formatter) {\n        value = this._formatter.format(value);\n      }\n      this.setText('' + value);\n    }\n\n    /**\n     * **** InputSim Overrides ****\n     */\n\n    /**\n     * Gets the formatted text value. This is the same as the value of the\n     * underlying input element.\n     *\n     * @augments external:InputSim.Input#text\n     * @returns {string}\n     */\n  }, {\n    key: 'text',\n    value: function text() {\n      return this.element.value;\n    }\n\n    /**\n     * Sets the formatted text value. This generally should not be used. Instead,\n     * use the value setter.\n     *\n     * @augments external:InputSim.Input#setText\n     * @param {string} text\n     */\n  }, {\n    key: 'setText',\n    value: function setText(text) {\n      this.element.value = text;\n      this._currentValue = text;\n    }\n\n    /**\n     * Gets the range of the current selection.\n     *\n     * @augments external:InputSim.Input#selectedRange\n     * @returns {Object} {start: number, length: number}\n     */\n  }, {\n    key: 'selectedRange',\n    value: function selectedRange() {\n      var caret = this._needsManualCaret ? this._manualCaret : getCaret(this.element);\n\n      return {\n        start: caret.start,\n        length: caret.end - caret.start\n      };\n    }\n\n    /**\n     * Sets the range of the current selection and the selection affinity.\n     *\n     * @augments external:InputSim.Input#setSelectedRangeWithAffinity\n     * @param {{start: number, length: number}} range\n     * @param {Affinity} affinity\n     */\n  }, {\n    key: 'setSelectedRangeWithAffinity',\n    value: function setSelectedRangeWithAffinity(range, affinity) {\n      var newRange = _get(Object.getPrototypeOf(TextField.prototype), 'setSelectedRangeWithAffinity', this).call(this, range, affinity);\n      var caret = {\n        start: newRange.start,\n        end: newRange.start + newRange.length\n      };\n      this._manualCaret = caret;\n      setCaret(this.element, caret.start, caret.end);\n      this.selectionAffinity = range.length === 0 ? null : affinity;\n    }\n\n    /**\n     * **** Undo Support ****\n     */\n\n    /**\n     * Gets whether this text field records undo actions with its undo manager.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: 'allowsUndo',\n    value: function allowsUndo() {\n      return this._allowsUndo;\n    }\n\n    /**\n     * Sets whether this text field records undo actions with its undo manager.\n     *\n     * @param {boolean} allowsUndo\n     */\n  }, {\n    key: 'setAllowsUndo',\n    value: function setAllowsUndo(allowsUndo) {\n      this._allowsUndo = allowsUndo;\n    }\n\n    /**\n     * Triggers a redo in the underlying UndoManager, if applicable.\n     *\n     * @param {Event} event\n     */\n  }, {\n    key: 'redo',\n    value: function redo(event) {\n      if (this.undoManager().canRedo()) {\n        this.undoManager().redo();\n      }\n      event.preventDefault();\n    }\n\n    /**\n     * Triggers an undo in the underlying UndoManager, if applicable.\n     *\n     * @param {Event} event\n     */\n  }, {\n    key: 'undo',\n    value: function undo(event) {\n      if (this.undoManager().canUndo()) {\n        this.undoManager().undo();\n      }\n      event.preventDefault();\n    }\n\n    /**\n     * Gets the UndoManager for this text field.\n     *\n     * @returns {UndoManager}\n     */\n  }, {\n    key: 'undoManager',\n    value: function undoManager() {\n      return this._undoManager || (this._undoManager = new _undo_manager2['default']());\n    }\n\n    /**\n     * **** Enabled/disabled support *****\n     */\n\n    /**\n     * Removes focus from this field if it has focus.\n     */\n  }, {\n    key: 'becomeFirstResponder',\n    value: function becomeFirstResponder() {\n      var _this3 = this;\n\n      this.element.focus();\n      this.rollbackInvalidChanges(function () {\n        _this3.element.select();\n        _this3._syncPlaceholder();\n      });\n    }\n\n    /**\n     * Determines whether this field has focus.\n     *\n     * @returns {boolean} true if this field has focus\n     */\n  }, {\n    key: 'hasFocus',\n    value: function hasFocus() {\n      return this.element.ownerDocument.activeElement === this.element;\n    }\n\n    /**\n     * Determines whether this field is enabled or disabled.\n     *\n     * @returns {boolean} true if this field is enabled\n     */\n  }, {\n    key: 'isEnabled',\n    value: function isEnabled() {\n      return this._enabled;\n    }\n\n    /**\n     * Sets whether this text field is enabled\n     * and syncs the placeholder to match\n     *\n     * @param {boolean} enabled\n     */\n  }, {\n    key: 'setEnabled',\n    value: function setEnabled(enabled) {\n      this._enabled = enabled;\n      this._syncPlaceholder();\n    }\n\n    /**\n     * Removes focus from this field if it has focus.\n     *\n     * @param {Event} event\n     */\n  }, {\n    key: 'resignFirstResponder',\n    value: function resignFirstResponder(event) {\n      if (event !== undefined && event !== null) {\n        event.preventDefault();\n      }\n      this.element.blur();\n      this._syncPlaceholder();\n    }\n\n    /*\n     * **** Placeholder support ****\n     */\n\n    /**\n     * Gets the disabled placeholder if one\n     * has been set.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'disabledPlaceholder',\n    value: function disabledPlaceholder() {\n      return this._disabledPlaceholder;\n    }\n\n    /**\n     * Sets the disabled placeholder.\n     *\n     * @param {string} disabledPlaceholder\n     */\n  }, {\n    key: 'setDisabledPlaceholder',\n    value: function setDisabledPlaceholder(disabledPlaceholder) {\n      this._disabledPlaceholder = disabledPlaceholder;\n      this._syncPlaceholder();\n    }\n\n    /**\n     * Gets the focused placeholder if one\n     * has been set.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'focusedPlaceholder',\n    value: function focusedPlaceholder() {\n      return this._focusedPlaceholder;\n    }\n\n    /**\n     * Sets the focused placeholder.\n     *\n     * @param {string} focusedPlaceholder\n     */\n  }, {\n    key: 'setFocusedPlaceholder',\n    value: function setFocusedPlaceholder(focusedPlaceholder) {\n      this._focusedPlaceholder = focusedPlaceholder;\n      this._syncPlaceholder();\n    }\n\n    /**\n     * Gets the placeholder if one has\n     * been set.\n     *\n     * @TODO Does this do anything?\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'placeholder',\n    value: function placeholder() {\n      return this._placeholder;\n    }\n\n    /**\n     * Sets the placeholder.\n     *\n     * @param {string} placeholder\n     */\n  }, {\n    key: 'setPlaceholder',\n    value: function setPlaceholder(placeholder) {\n      this._placeholder = placeholder;\n      this.element.setAttribute('placeholder', this._placeholder);\n    }\n\n    /**\n     * Gets the unfocused placeholder if one\n     * has been set.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: 'unfocusedPlaceholder',\n    value: function unfocusedPlaceholder() {\n      return this._unfocusedPlaceholder;\n    }\n\n    /**\n     * Sets the unfocused placeholder.\n     *\n     * @param {string} unfocusedPlaceholder\n     */\n  }, {\n    key: 'setUnfocusedPlaceholder',\n    value: function setUnfocusedPlaceholder(unfocusedPlaceholder) {\n      this._unfocusedPlaceholder = unfocusedPlaceholder;\n      this._syncPlaceholder();\n    }\n\n    /**\n     * **** Private Methods ****\n     */\n\n    /**\n     * Applies the given change as an undo/redo.\n     *\n     * @param {Object} change object with current and proposed properties\n     * @private\n     */\n  }, {\n    key: '_applyChangeFromUndoManager',\n    value: function _applyChangeFromUndoManager(change) {\n      this.undoManager().proxyFor(this)._applyChangeFromUndoManager(change);\n\n      if (this.undoManager().isUndoing()) {\n        this.setText(change.current.text);\n        this.setSelectedRange(change.current.selectedRange);\n      } else {\n        this.setText(change.proposed.text);\n        this.setSelectedRange(change.proposed.selectedRange);\n      }\n\n      this._textDidChange();\n    }\n\n    /**\n     * Handles clicks by resetting the selection affinity.\n     *\n     * @private\n     */\n  }, {\n    key: '_click',\n    value: function _click() {\n      this._manualCaret = getCaret(this.element);\n      this._selectedRange = {\n        start: this._manualCaret.start,\n        length: this._manualCaret.end - this._manualCaret.start\n      };\n      this.selectionAffinity = null;\n    }\n\n    /**\n     * Fires event on the element\n     *\n     * @param {string} eventType\n     * @private\n     */\n  }, {\n    key: '_fireEvent',\n    value: function _fireEvent(eventType) {\n      var document = this.element.ownerDocument;\n      var window = document.defaultView;\n      if (typeof window.CustomEvent === 'function') {\n        this.element.dispatchEvent(new window.CustomEvent(eventType, {}));\n      } else {\n        var _event = document.createEvent('Event');\n        _event.initEvent(eventType, false, false);\n        this.element.dispatchEvent(_event);\n      }\n    }\n\n    /**\n     * Handles gaining focus. This method delegates to other methods, and syncs\n     * the placeholder appropriately.\n     *\n     * @private\n     */\n  }, {\n    key: '_focus',\n    value: function _focus() {\n      this._textFieldDidBeginEditing();\n      this._syncPlaceholder();\n    }\n\n    /**\n     * Handles losing focus. This method delegates to other methods, and syncs the\n     * placeholder appropriately.\n     *\n     * @private\n     */\n  }, {\n    key: '_blur',\n    value: function _blur() {\n      this._textFieldDidEndEditing();\n      this._syncPlaceholder();\n    }\n\n    /**\n     * Handles keyDown events. This method essentially just delegates to other,\n     * more semantic, methods based on the modifier keys and the pressed key of the\n     * event.\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: '_keyDown',\n    value: function _keyDown(event) {\n      var _this4 = this;\n\n      if (this._didEndEditingButKeptFocus) {\n        this._textFieldDidBeginEditing();\n        this._didEndEditingButKeptFocus = false;\n      }\n\n      var action = this._bindings.actionForEvent(event);\n      if (action) {\n        switch (action) {\n          case 'undo':\n          case 'redo':\n            this[action](event);\n            break;\n\n          default:\n            this.rollbackInvalidChanges(function () {\n              return _this4[action](event);\n            });\n            break;\n        }\n      }\n    }\n\n    /**\n     * Handles inserting characters based on the typed key for normal keyboards.\n     *\n     * NOTE: Does not fire on some versions of Android, in which case we handle\n     * changes in _keyUp instead.\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: '_keyPress',\n    value: function _keyPress(event) {\n      var _this5 = this;\n\n      var keyCode = event.keyCode;\n      if (!event.metaKey && !event.ctrlKey && keyCode !== _inputSim.KEYS.ENTER && keyCode !== _inputSim.KEYS.TAB && keyCode !== _inputSim.KEYS.BACKSPACE) {\n        if (event.charCode !== 0) {\n          (function () {\n            var newText = String.fromCharCode(event.charCode || event.keyCode);\n\n            _this5._processChange({\n              currentText: _this5.text(),\n              proposedText: (0, _utils.replaceStringSelection)(newText, _this5.text(), _this5.selectedRange()),\n              onSuccess: function onSuccess(change, changeTriggeredFormatting) {\n                if (!changeTriggeredFormatting && event instanceof KeyboardEvent) {\n                  // HACK(JoeTaylor) Use Browser's native input when using the formatter\n                  // would not make a difference https://code.google.com/p/chromium/issues/detail?id=32865\n                  if (!_this5._isDirty) {\n                    _this5._valueOnFocus = change.current.text || '';\n                    _this5._isDirty = true;\n                  }\n                  _this5.undoManager().proxyFor(_this5)._applyChangeFromUndoManager(change);\n                  _this5._manualCaret = {\n                    start: change.proposed.selectedRange.start,\n                    end: change.proposed.selectedRange.start + change.proposed.selectedRange.length\n                  };\n                  _this5._needsKeyUpTextDidChangeTrigger = true;\n                } else {\n                  event.preventDefault();\n                  _this5.rollbackInvalidChanges(function () {\n                    return _this5.insertText(newText);\n                  });\n                }\n                _this5._currentValue = change.proposed.text;\n              },\n              onFail: function onFail() {\n                event.preventDefault();\n                _this5.rollbackInvalidChanges(function () {\n                  return _this5.insertText(newText);\n                });\n              }\n            });\n          })();\n        } else {\n          event.preventDefault();\n        }\n      }\n    }\n\n    /**\n     * Handles keyup events. On Some Android we need to do all input processing\n     * here because no other information comes in.\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: '_keyUp',\n    value: function _keyUp(event) {\n      var _this6 = this;\n\n      if (this._needsKeyUpTextDidChangeTrigger) {\n        this._textDidChange();\n        this._needsKeyUpTextDidChangeTrigger = false;\n      }\n      var keyCode = event.keyCode;\n      // NOTE: Certain Androids on Chrome always return 229\n      // https://code.google.com/p/chromium/issues/detail?id=118639\n      if (keyCode === 229) {\n        (function () {\n          // Text has already been changed at this point, so we check the previous text\n          // to determine whether we need to undo the change.\n          var previousText = _this6._currentValue || '';\n          _this6._processChange({\n            currentText: previousText,\n            proposedText: _this6.text(),\n            onSuccess: function onSuccess(change, changeTriggeredFormatting) {\n              if (changeTriggeredFormatting) {\n                var newText = change.proposed.text;\n                _this6.setSelectedRange(change.proposed.selectedRange);\n                _this6.setText(newText);\n              }\n              if (!_this6._isDirty) {\n                _this6._valueOnFocus = change.current.text || '';\n                _this6._isDirty = true;\n              }\n              _this6.undoManager().proxyFor(_this6)._applyChangeFromUndoManager(change);\n              _this6._textDidChange();\n              _this6._currentValue = change.proposed.text;\n            },\n            onFail: function onFail() {\n              // Need to rollback the letter input in the Keyup event because it is not valid,\n              // so we set text to the previous state (as collected from the UndoManager).\n              _this6.setText(previousText);\n            }\n          });\n        })();\n      } else {\n        this.rollbackInvalidChanges(function () {\n          if (event.keyCode === _inputSim.KEYS.TAB) {\n            _this6.selectAll(event);\n          }\n        });\n      }\n    }\n\n    /**\n     * Checks if a change is valid and calls `onSuccess` if so,\n     * and `onFail` if not.\n     *\n     * @param {object} options\n     * @param {string} options.currentText\n     * @param {string} options.proposedText\n     * @param {function} options.onSuccess\n     * @param {function=} options.onFail\n     * @private\n     */\n  }, {\n    key: '_processChange',\n    value: function _processChange(_ref) {\n      var currentText = _ref.currentText;\n      var proposedText = _ref.proposedText;\n      var onSuccess = _ref.onSuccess;\n      var _ref$onFail = _ref.onFail;\n      var onFail = _ref$onFail === undefined ? function () {} : _ref$onFail;\n\n      var current = {\n        text: currentText,\n        selectedRange: this.selectedRange()\n      };\n      var proposed = {\n        text: proposedText,\n        selectedRange: { start: current.selectedRange.start + 1, length: 0 }\n      };\n      var change = this.hasChangesAndIsValid(current, proposed);\n      var changeTriggeredFormatting = change && (change.proposed.text !== proposed.text || change.proposed.selectedRange.start !== proposed.selectedRange.start || change.proposed.selectedRange.length !== proposed.selectedRange.length);\n\n      if (change) {\n        onSuccess(change, changeTriggeredFormatting);\n      } else {\n        onFail();\n      }\n    }\n\n    /**\n     * Handles paste events.\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: '_paste',\n    value: function _paste(event) {\n      var _this7 = this;\n\n      event.preventDefault();\n      this.rollbackInvalidChanges(function () {\n        _this7.readSelectionFromPasteboard(event.clipboardData);\n      });\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: '_syncPlaceholder',\n    value: function _syncPlaceholder() {\n      if (!this._enabled) {\n        var disabledPlaceholder = this._disabledPlaceholder;\n        if (disabledPlaceholder !== undefined && disabledPlaceholder !== null) {\n          this.setPlaceholder(disabledPlaceholder);\n        }\n      } else if (this.hasFocus()) {\n        var focusedPlaceholder = this._focusedPlaceholder;\n        if (focusedPlaceholder !== undefined && focusedPlaceholder !== null) {\n          this.setPlaceholder(focusedPlaceholder);\n        }\n      } else {\n        var unfocusedPlaceholder = this._unfocusedPlaceholder;\n        if (unfocusedPlaceholder !== undefined && unfocusedPlaceholder !== null) {\n          this.setPlaceholder(unfocusedPlaceholder);\n        }\n      }\n    }\n  }]);\n\n  return TextField;\n})(_inputSim.Input);\n\nvar TextFieldStateChange = (function () {\n  /**\n   * @param {TextField} field\n   */\n\n  function TextFieldStateChange(field) {\n    _classCallCheck(this, TextFieldStateChange);\n\n    this.field = field;\n  }\n\n  /**\n   * Builds a new {TextFieldStateChange} that will allow you to\n   * compute differences, and see the current vs proposed changes.\n   *\n   * @param {TextField} field\n   * @param {Function} callback called when you want changes to the field\n   *    take place. Current will be calculated before this callback.\n   *    Proposed will be calculated after this callback.\n   *\n   * @returns {Object} change object with current and proposed properties\n   */\n\n  /**\n   * Determines whether this field has changes.\n   *\n   * @returns {boolean} true if either the current text doesn't match the proposed text\n   *    or the current selection range doesn't match the proposed selection range\n   */\n\n  _createClass(TextFieldStateChange, [{\n    key: 'hasChanges',\n    value: function hasChanges() {\n      this.recomputeDiff();\n      return this.current.text !== this.proposed.text || this.current.selectedRange.start !== this.proposed.selectedRange.start || this.current.selectedRange.length !== this.proposed.selectedRange.length;\n    }\n\n    /**\n     * Updates {TextFieldStateChange} inserted and {TextFieldStateChange} deleted\n     * based on proposed and current\n     */\n  }, {\n    key: 'recomputeDiff',\n    value: function recomputeDiff() {\n      if (this.proposed.text !== this.current.text) {\n        var ctext = this.current.text;\n        var ptext = this.proposed.text;\n        var sharedPrefixLength = 0;\n        var sharedSuffixLength = 0;\n        var minTextLength = Math.min(ctext.length, ptext.length);\n        var i = undefined;\n\n        for (i = 0; i < minTextLength; i++) {\n          if (ptext[i] === ctext[i]) {\n            sharedPrefixLength = i + 1;\n          } else {\n            break;\n          }\n        }\n\n        for (i = 0; i < minTextLength - sharedPrefixLength; i++) {\n          if (ptext[ptext.length - 1 - i] === ctext[ctext.length - 1 - i]) {\n            sharedSuffixLength = i + 1;\n          } else {\n            break;\n          }\n        }\n\n        var inserted = {\n          start: sharedPrefixLength,\n          end: ptext.length - sharedSuffixLength\n        };\n        var deleted = {\n          start: sharedPrefixLength,\n          end: ctext.length - sharedSuffixLength\n        };\n        inserted.text = ptext.substring(inserted.start, inserted.end);\n        deleted.text = ctext.substring(deleted.start, deleted.end);\n        this.inserted = inserted;\n        this.deleted = deleted;\n      } else {\n        this.inserted = {\n          start: this.proposed.selectedRange.start,\n          end: this.proposed.selectedRange.start + this.proposed.selectedRange.length,\n          text: ''\n        };\n        this.deleted = {\n          start: this.current.selectedRange.start,\n          end: this.current.selectedRange.start + this.current.selectedRange.length,\n          text: ''\n        };\n      }\n    }\n  }]);\n\n  return TextFieldStateChange;\n})();\n\nTextFieldStateChange.build = function (field, callback) {\n  var change = new this(field);\n  change.current = {\n    text: field.text(),\n    selectedRange: field.selectedRange()\n  };\n  callback();\n  change.proposed = {\n    text: field.text(),\n    selectedRange: field.selectedRange()\n  };\n  change.recomputeDiff();\n  return change;\n};\n\nexports['default'] = TextField;\nmodule.exports = exports['default'];\n\n},{\"./caret\":8,\"./formatter\":14,\"./undo_manager\":21,\"./utils\":22,\"input-sim\":2}],21:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _utils = _dereq_('./utils');\n\n/**\n * UndoManager is a general-purpose recorder of operations for undo and redo.\n *\n * Registering an undo action is done by specifying the changed object, along\n * with a method to invoke to revert its state and the arguments for that\n * method. When performing undo an UndoManager saves the operations reverted so\n * that you can redo the undos.\n */\n\nvar UndoManager = (function () {\n  function UndoManager() {\n    _classCallCheck(this, UndoManager);\n\n    /** @private */\n    this._undos = [];\n    /** @private */\n    this._redos = [];\n    /** @private */\n    this._isUndoing = false;\n    /** @private */\n    this._isRedoing = false;\n  }\n\n  /**\n   * Determines whether there are any undo actions on the stack.\n   *\n   * @returns {boolean}\n   */\n\n  _createClass(UndoManager, [{\n    key: 'canUndo',\n    value: function canUndo() {\n      return this._undos.length !== 0;\n    }\n\n    /**\n     * Determines whether there are any redo actions on the stack.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: 'canRedo',\n    value: function canRedo() {\n      return this._redos.length !== 0;\n    }\n\n    /**\n     * Indicates whether or not this manager is currently processing an undo.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isUndoing',\n    value: function isUndoing() {\n      return this._isUndoing;\n    }\n\n    /**\n     * Indicates whether or not this manager is currently processing a redo.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isRedoing',\n    value: function isRedoing() {\n      return this._isRedoing;\n    }\n\n    /**\n     * Manually registers an simple undo action with the given args.\n     *\n     * If this undo manager is currently undoing then this will register a redo\n     * action instead. If this undo manager is neither undoing or redoing then the\n     * redo stack will be cleared.\n     *\n     * @param {Object} target call `selector` on this object\n     * @param {string} selector the method name to call on `target`\n     * @param {...Object} args arguments to pass when calling `selector` on `target`\n     */\n  }, {\n    key: 'registerUndo',\n    value: function registerUndo(target, selector) {\n      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      if (this._isUndoing) {\n        this._appendRedo.apply(this, [target, selector].concat(args));\n      } else {\n        if (!this._isRedoing) {\n          this._redos.length = 0;\n        }\n        this._appendUndo.apply(this, [target, selector].concat(args));\n      }\n    }\n\n    /**\n     * Appends an undo action to the internal stack.\n     *\n     * @param {Object} target call `selector` on this object\n     * @param {string} selector the method name to call on `target`\n     * @param {...Object} args arguments to pass when calling `selector` on `target`\n     * @private\n     */\n  }, {\n    key: '_appendUndo',\n    value: function _appendUndo(target, selector) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      this._undos.push({\n        target: target,\n        selector: selector,\n        args: args\n      });\n    }\n\n    /**\n     * Appends a redo action to the internal stack.\n     *\n     * @param {Object} target call `selector` on this object\n     * @param {string} selector the method name to call on `target`\n     * @param {...Object} args arguments to pass when calling `selector` on `target`\n     * @private\n     */\n  }, {\n    key: '_appendRedo',\n    value: function _appendRedo(target, selector) {\n      for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        args[_key3 - 2] = arguments[_key3];\n      }\n\n      this._redos.push({\n        target: target,\n        selector: selector,\n        args: args\n      });\n    }\n\n    /**\n     * Performs the top-most undo action on the stack.\n     *\n     * @throws {Error} Raises an error if there are no available undo actions.\n     */\n  }, {\n    key: 'undo',\n    value: function undo() {\n      if (!this.canUndo()) {\n        throw new Error('there are no registered undos');\n      }\n      var data = this._undos.pop();\n      var target = data.target;\n      var selector = data.selector;\n      var args = data.args;\n      this._isUndoing = true;\n      target[selector].apply(target, args);\n      this._isUndoing = false;\n    }\n\n    /**\n     * Performs the top-most redo action on the stack.\n     *\n     * @throws {Error} Raises an error if there are no available redo actions.\n     */\n  }, {\n    key: 'redo',\n    value: function redo() {\n      if (!this.canRedo()) {\n        throw new Error('there are no registered redos');\n      }\n      var data = this._redos.pop();\n      var target = data.target;\n      var selector = data.selector;\n      var args = data.args;\n      this._isRedoing = true;\n      target[selector].apply(target, args);\n      this._isRedoing = false;\n    }\n\n    /**\n     * Returns a proxy object based on target that will register undo/redo actions\n     * by calling methods on the proxy.\n     *\n     * @example\n     *     setSize(size) {\n     *       this.undoManager.proxyFor(this).setSize(this._size);\n     *       this._size = size;\n     *     }\n     *\n     * @param {Object} target call `selector` on this object\n     * @returns {Object}\n     */\n  }, {\n    key: 'proxyFor',\n    value: function proxyFor(target) {\n      var proxy = {};\n      var self = this;\n\n      function proxyMethod(selector) {\n        return function () {\n          for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n\n          self.registerUndo.apply(self, [target, selector].concat(args));\n        };\n      }\n\n      (0, _utils.getAllPropertyNames)(target).forEach(function (selector) {\n        // don't trigger anything that has a getter\n        if ((0, _utils.hasGetter)(target, selector)) {\n          return;\n        }\n\n        // don't try to proxy properties that aren't functions\n        if (typeof target[selector] !== 'function') {\n          return;\n        }\n\n        // set up a proxy function to register an undo\n        proxy[selector] = proxyMethod(selector);\n      });\n\n      return proxy;\n    }\n  }]);\n\n  return UndoManager;\n})();\n\nexports['default'] = UndoManager;\nmodule.exports = exports['default'];\n\n},{\"./utils\":22}],22:[function(_dereq_,module,exports){\n/**\n * @const\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.isDigits = isDigits;\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\nexports.zpad = zpad;\nexports.zpad2 = zpad2;\nexports.bind = bind;\nexports.replaceStringSelection = replaceStringSelection;\nexports.forEach = forEach;\nexports.hasGetter = hasGetter;\nexports.getAllPropertyNames = getAllPropertyNames;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar DIGITS_PATTERN = /^\\d*$/;\n\n/**\n * @const\n * @private\n */\nvar SURROUNDING_SPACE_PATTERN = /(^\\s+|\\s+$)/;\n\n/**\n * @param {string} string\n * @returns {boolean}\n */\n\nfunction isDigits(string) {\n  return DIGITS_PATTERN.test(string);\n}\n\n/**\n * @param {string} prefix\n * @param {string} string\n * @returns {boolean}\n */\n\nfunction startsWith(prefix, string) {\n  return string.slice(0, prefix.length) === prefix;\n}\n\n/**\n * @param {string} suffix\n * @param {string} string\n * @returns {boolean}\n */\n\nfunction endsWith(suffix, string) {\n  return string.slice(string.length - suffix.length) === suffix;\n}\n\n/**\n * @param {string} string\n * @returns {string}\n */\nvar trim = typeof ''.trim === 'function' ? function (string) {\n  return string.trim();\n} : function (string) {\n  return string.replace(SURROUNDING_SPACE_PATTERN, '');\n};\n\nexports.trim = trim;\n/**\n * Will pad n with `0` up until length.\n *\n * @example\n *     zpad(16, '1234');\n *     // => 0000000000001234\n *\n * @param {number} length\n * @param {(string|number)} n\n * @returns {string}\n */\n\nfunction zpad(length, n) {\n  var result = '' + n;\n  while (result.length < length) {\n    result = '0' + result;\n  }\n  return result;\n}\n\n/**\n * Will pad n with `0` up until length is 2.\n *\n * @example\n *     zpad2('2');\n *     // => 02\n *\n * @param {(string|number)} n\n * @returns {string}\n */\n\nfunction zpad2(n) {\n  return zpad(2, n);\n}\n\n/**\n * PhantomJS 1.9 does not have Function.bind.\n *\n * @param {Function} fn\n * @param {*} context\n * @returns {*}\n */\n\nfunction bind(fn, context) {\n  return fn.bind(context);\n}\n\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (context) {\n    for (var _len = arguments.length, prependedArgs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      prependedArgs[_key - 1] = arguments[_key];\n    }\n\n    var self = this;\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return self.apply(context, prependedArgs.concat(args));\n    };\n  };\n}\n\n/**\n * Replaces the characters within the selection with given text.\n *\n * @example\n *     // 12|34567|8\n *     replaceStringSelection('12345678', '00', { start: 2, length: 5 });\n *     // 12|00|8\n *\n * @param   {string} replacement\n * @param   {string} text\n * @param   {object} {start: number, length: number}\n * @returns {string}\n */\n\nfunction replaceStringSelection(replacement, text, range) {\n  var end = range.start + range.length;\n  return text.substring(0, range.start) + replacement + text.substring(end);\n}\n\nvar hasOwnProp = Object.prototype.hasOwnProperty;\n/**\n * @param {*} iterable\n * @param {Function} iterator\n */\n\nfunction forEach(iterable, iterator) {\n  if (iterable && typeof iterable.forEach === 'function') {\n    iterable.forEach(iterator);\n  } else if (({}).toString.call(iterable) === '[object Array]') {\n    for (var i = 0, l = iterable.length; i < l; i++) {\n      iterator.call(null, iterable[i], i, iterable);\n    }\n  } else {\n    for (var key in iterable) {\n      if (hasOwnProp.call(iterable, key)) {\n        iterator.call(null, iterable[key], key, iterable);\n      }\n    }\n  }\n}\n\nvar getOwnPropertyNames = (function () {\n  var getOwnPropertyNames = Object.getOwnPropertyNames;\n\n  try {\n    Object.getOwnPropertyNames({}, 'sq');\n  } catch (e) {\n    // IE 8\n    getOwnPropertyNames = function (object) {\n      var result = [];\n      for (var key in object) {\n        if (hasOwnProp.call(object, key)) {\n          result.push(key);\n        }\n      }\n      return result;\n    };\n  }\n\n  return getOwnPropertyNames;\n})();\n\nvar getPrototypeOf = Object.getPrototypeOf || function (object) {\n  return object.__proto__;\n};\n/**\n * @param {Object} object\n * @param {string} property\n * @returns {boolean}\n */\n\nfunction hasGetter(object, property) {\n  // Skip if getOwnPropertyDescriptor throws (IE8)\n  try {\n    Object.getOwnPropertyDescriptor({}, 'sq');\n  } catch (e) {\n    return false;\n  }\n\n  var descriptor = undefined;\n\n  if (object && object.constructor && object.constructor.prototype) {\n    descriptor = Object.getOwnPropertyDescriptor(object.constructor.prototype, property);\n  }\n\n  if (!descriptor) {\n    descriptor = Object.getOwnPropertyDescriptor(object, property);\n  }\n\n  if (descriptor && descriptor.get) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @param {Object} object\n * @returns {?string[]}\n */\n\nfunction getAllPropertyNames(object) {\n  if (object === null || object === undefined) {\n    return [];\n  }\n\n  var result = getOwnPropertyNames(object);\n\n  var prototype = object.constructor && object.constructor.prototype;\n  while (prototype) {\n    result.push.apply(result, _toConsumableArray(getOwnPropertyNames(prototype)));\n    prototype = getPrototypeOf(prototype);\n  }\n\n  return result;\n}\n\n},{}]},{},[15])(15)\n});\n//# sourceMappingURL=field-kit.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _fieldKit = __webpack_require__(16);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @extends DelimitedTextFormatter\n */\nvar DateFormatter = function (_DelimitedTextFormatt) {\n  _inherits(DateFormatter, _DelimitedTextFormatt);\n\n  function DateFormatter() {\n    _classCallCheck(this, DateFormatter);\n\n    var _this = _possibleConstructorReturn(this, (DateFormatter.__proto__ || Object.getPrototypeOf(DateFormatter)).call(this, '/'));\n\n    _this.maximumLength = 10;\n    return _this;\n  }\n\n  /**\n   * @param {number} index\n   * @returns {boolean}\n   */\n\n\n  _createClass(DateFormatter, [{\n    key: 'hasDelimiterAtIndex',\n    value: function hasDelimiterAtIndex(index) {\n      return index === 2 || index === 5;\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @param {function(string)} error\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change, error) {\n      if (!error) {\n        error = function error() {};\n      } // eslint-disable-line no-param-reassign\n\n      var isBackspace = change.proposed.text.length < change.current.text.length;\n      var newText = change.proposed.text;\n\n      if (change.inserted.text === this.delimiter && change.current.text === '1') {\n        newText = '01' + this.delimiter;\n      } else if (change.inserted.text === this.delimiter && /^(\\d{2})(.)(\\d)(.)$/.test(newText)) {\n        var lastChar = newText.substr(newText.length - 2);\n        newText = newText.slice(0, -2) + '0' + lastChar;\n      } else if (change.inserted.text.length > 0 && !/^\\d$/.test(change.inserted.text)) {\n        error('date-formatter.only-digits-allowed');\n        return false;\n      } else {\n        if (isBackspace) {\n          if (change.deleted.text === this.delimiter) {\n            newText = newText.slice(0, -1);\n          }\n          if (newText === '0') {\n            newText = '';\n          }\n          if (/^(\\d{2})(.)(0)$/.test(newText)) {\n            newText = newText.slice(0, -2);\n          }\n        }\n\n        // prepend month starting with 2-9 with a 0\n        if (/^[2-9]$/.test(newText)) {\n          newText = '0' + newText;\n        }\n\n        // prepend day starting with 4-9 with a 0\n        if (/^(\\d{2})(.)([4-9])$/.test(newText)) {\n          newText = newText.slice(0, -1) + '0' + change.inserted.text;\n        }\n\n        // don't allow month over 12\n        if (/^1[3-9]$/.test(newText)) {\n          error('date-formatter.invalid-month');\n          return false;\n        }\n\n        // don't allow day over 31\n        if (/^(\\d{2})(.)(3[2-9])$/.test(newText)) {\n          error('date-formatter.invalid-day');\n          return false;\n        }\n\n        // don't allow 00 as day\n        if (newText === '00') {\n          error('date-formatter.invalid-month');\n          return false;\n        }\n\n        // don't allow 00 as month\n        if (/^(\\d{2})(.)(00)$/.test(newText)) {\n          error('date-formatter.invalid-month');\n          return false;\n        }\n\n        // add delimiter after valid month\n        if (/^(0[1-9]|1[0-2])$/.test(newText)) {\n          newText += this.delimiter;\n        }\n\n        // add delimiter after valid month and day\n        if (/^(\\d{2})(.)(\\d{2})$/.test(newText)) {\n          newText += this.delimiter;\n        }\n\n        // don't allow year to start with 0 or 3+\n        if (/^(\\d{2})(.)(\\d{2})(.)((0|[3-9]))$/.test(newText)) {\n          error('date-formatter.invalid-year');\n          return false;\n        }\n\n        var match = newText.match(/^(\\d{2})(.)(\\d{2})(.)(\\d{4}).*$/);\n        if (match && match[2] === this.delimiter && match[4] === this.delimiter) {\n          newText = match[1] + this.delimiter + match[3] + this.delimiter + match[5];\n        }\n      }\n\n      /* eslint-disable no-param-reassign */\n      change.proposed.text = newText;\n      change.proposed.selectedRange = { start: newText.length, length: 0 };\n      /* eslint-enable no-param-reassign */\n\n      return true;\n    }\n  }]);\n\n  return DateFormatter;\n}(_fieldKit.DelimitedTextFormatter);\n\nexports.default = DateFormatter;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvYXBwL21vZHVsZXMvZGF0ZS1mb3JtYXR0ZXIuanM/NWIzYyIsIndlYnBhY2s6Ly8vP2Q0MWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVsaW1pdGVkVGV4dEZvcm1hdHRlciB9IGZyb20gJ2ZpZWxkLWtpdCc7XG5cbi8qKlxuICogQGV4dGVuZHMgRGVsaW1pdGVkVGV4dEZvcm1hdHRlclxuICovXG5jbGFzcyBEYXRlRm9ybWF0dGVyIGV4dGVuZHMgRGVsaW1pdGVkVGV4dEZvcm1hdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCcvJyk7XG4gICAgdGhpcy5tYXhpbXVtTGVuZ3RoID0gMTA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaGFzRGVsaW1pdGVyQXRJbmRleChpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA9PT0gMiB8fCBpbmRleCA9PT0gNTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIGNoYW5nZSBzaG91bGQgYmUgYWxsb3dlZCBhbmQsIGlmIHNvLCB3aGV0aGVyXG4gICAqIGl0IHNob3VsZCBiZSBhbHRlcmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRGaWVsZFN0YXRlQ2hhbmdlfSBjaGFuZ2VcbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBlcnJvclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ2hhbmdlVmFsaWQoY2hhbmdlLCBlcnJvcikge1xuICAgIGlmICghZXJyb3IpIHsgZXJyb3IgPSBmdW5jdGlvbigpIHt9OyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuICAgIGNvbnN0IGlzQmFja3NwYWNlID0gY2hhbmdlLnByb3Bvc2VkLnRleHQubGVuZ3RoIDwgY2hhbmdlLmN1cnJlbnQudGV4dC5sZW5ndGg7XG4gICAgbGV0IG5ld1RleHQgPSBjaGFuZ2UucHJvcG9zZWQudGV4dDtcblxuICAgIGlmIChjaGFuZ2UuaW5zZXJ0ZWQudGV4dCA9PT0gdGhpcy5kZWxpbWl0ZXIgJiYgY2hhbmdlLmN1cnJlbnQudGV4dCA9PT0gJzEnKSB7XG4gICAgICBuZXdUZXh0ID0gYDAxJHt0aGlzLmRlbGltaXRlcn1gO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLmluc2VydGVkLnRleHQgPT09IHRoaXMuZGVsaW1pdGVyICYmIC9eKFxcZHsyfSkoLikoXFxkKSguKSQvLnRlc3QobmV3VGV4dCkpIHtcbiAgICAgIGNvbnN0IGxhc3RDaGFyID0gbmV3VGV4dC5zdWJzdHIobmV3VGV4dC5sZW5ndGggLSAyKTtcbiAgICAgIG5ld1RleHQgPSBgJHtuZXdUZXh0LnNsaWNlKDAsIC0yKX0wJHtsYXN0Q2hhcn1gO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLmluc2VydGVkLnRleHQubGVuZ3RoID4gMCAmJiAhL15cXGQkLy50ZXN0KGNoYW5nZS5pbnNlcnRlZC50ZXh0KSkge1xuICAgICAgZXJyb3IoJ2RhdGUtZm9ybWF0dGVyLm9ubHktZGlnaXRzLWFsbG93ZWQnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzQmFja3NwYWNlKSB7XG4gICAgICAgIGlmIChjaGFuZ2UuZGVsZXRlZC50ZXh0ID09PSB0aGlzLmRlbGltaXRlcikge1xuICAgICAgICAgIG5ld1RleHQgPSBuZXdUZXh0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VGV4dCA9PT0gJzAnKSB7XG4gICAgICAgICAgbmV3VGV4dCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXihcXGR7Mn0pKC4pKDApJC8udGVzdChuZXdUZXh0KSkge1xuICAgICAgICAgIG5ld1RleHQgPSBuZXdUZXh0LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwcmVwZW5kIG1vbnRoIHN0YXJ0aW5nIHdpdGggMi05IHdpdGggYSAwXG4gICAgICBpZiAoL15bMi05XSQvLnRlc3QobmV3VGV4dCkpIHtcbiAgICAgICAgbmV3VGV4dCA9IGAwJHtuZXdUZXh0fWA7XG4gICAgICB9XG5cbiAgICAgIC8vIHByZXBlbmQgZGF5IHN0YXJ0aW5nIHdpdGggNC05IHdpdGggYSAwXG4gICAgICBpZiAoL14oXFxkezJ9KSguKShbNC05XSkkLy50ZXN0KG5ld1RleHQpKSB7XG4gICAgICAgIG5ld1RleHQgPSBgJHtuZXdUZXh0LnNsaWNlKDAsIC0xKX0wJHtjaGFuZ2UuaW5zZXJ0ZWQudGV4dH1gO1xuICAgICAgfVxuXG4gICAgICAvLyBkb24ndCBhbGxvdyBtb250aCBvdmVyIDEyXG4gICAgICBpZiAoL14xWzMtOV0kLy50ZXN0KG5ld1RleHQpKSB7XG4gICAgICAgIGVycm9yKCdkYXRlLWZvcm1hdHRlci5pbnZhbGlkLW1vbnRoJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gZG9uJ3QgYWxsb3cgZGF5IG92ZXIgMzFcbiAgICAgIGlmICgvXihcXGR7Mn0pKC4pKDNbMi05XSkkLy50ZXN0KG5ld1RleHQpKSB7XG4gICAgICAgIGVycm9yKCdkYXRlLWZvcm1hdHRlci5pbnZhbGlkLWRheScpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIGRvbid0IGFsbG93IDAwIGFzIGRheVxuICAgICAgaWYgKG5ld1RleHQgPT09ICcwMCcpIHtcbiAgICAgICAgZXJyb3IoJ2RhdGUtZm9ybWF0dGVyLmludmFsaWQtbW9udGgnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBkb24ndCBhbGxvdyAwMCBhcyBtb250aFxuICAgICAgaWYgKC9eKFxcZHsyfSkoLikoMDApJC8udGVzdChuZXdUZXh0KSkge1xuICAgICAgICBlcnJvcignZGF0ZS1mb3JtYXR0ZXIuaW52YWxpZC1tb250aCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBkZWxpbWl0ZXIgYWZ0ZXIgdmFsaWQgbW9udGhcbiAgICAgIGlmICgvXigwWzEtOV18MVswLTJdKSQvLnRlc3QobmV3VGV4dCkpIHtcbiAgICAgICAgbmV3VGV4dCArPSB0aGlzLmRlbGltaXRlcjtcbiAgICAgIH1cblxuICAgICAgLy8gYWRkIGRlbGltaXRlciBhZnRlciB2YWxpZCBtb250aCBhbmQgZGF5XG4gICAgICBpZiAoL14oXFxkezJ9KSguKShcXGR7Mn0pJC8udGVzdChuZXdUZXh0KSkge1xuICAgICAgICBuZXdUZXh0ICs9IHRoaXMuZGVsaW1pdGVyO1xuICAgICAgfVxuXG4gICAgICAvLyBkb24ndCBhbGxvdyB5ZWFyIHRvIHN0YXJ0IHdpdGggMCBvciAzK1xuICAgICAgaWYgKC9eKFxcZHsyfSkoLikoXFxkezJ9KSguKSgoMHxbMy05XSkpJC8udGVzdChuZXdUZXh0KSkge1xuICAgICAgICBlcnJvcignZGF0ZS1mb3JtYXR0ZXIuaW52YWxpZC15ZWFyJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWF0Y2ggPSBuZXdUZXh0Lm1hdGNoKC9eKFxcZHsyfSkoLikoXFxkezJ9KSguKShcXGR7NH0pLiokLyk7XG4gICAgICBpZiAobWF0Y2ggJiYgKG1hdGNoWzJdID09PSB0aGlzLmRlbGltaXRlcikgJiYgKG1hdGNoWzRdID09PSB0aGlzLmRlbGltaXRlcikpIHtcbiAgICAgICAgbmV3VGV4dCA9IG1hdGNoWzFdICsgdGhpcy5kZWxpbWl0ZXIgKyBtYXRjaFszXSArIHRoaXMuZGVsaW1pdGVyICsgbWF0Y2hbNV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICBjaGFuZ2UucHJvcG9zZWQudGV4dCA9IG5ld1RleHQ7XG4gICAgY2hhbmdlLnByb3Bvc2VkLnNlbGVjdGVkUmFuZ2UgPSB7IHN0YXJ0OiBuZXdUZXh0Lmxlbmd0aCwgbGVuZ3RoOiAwIH07XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0ZUZvcm1hdHRlcjtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGpzL2FwcC9tb2R1bGVzL2RhdGUtZm9ybWF0dGVyLmpzXG4gKiovIiwidW5kZWZpbmVkXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogXG4gKiovIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7Ozs7Ozs7QUFDQTs7O0FBR0E7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQ0ZBO0FBR0E7QUFDQTtBQUNBOzs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBR0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _fieldKit = __webpack_require__(16);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @const\n * @private\n */\nvar DIGITS_PATTERN = /^\\d*$/;\n\n/**\n * @extends DelimitedTextFormatter\n */\n\nvar ZipCodeFormatter = function (_DelimitedTextFormatt) {\n  _inherits(ZipCodeFormatter, _DelimitedTextFormatt);\n\n  function ZipCodeFormatter() {\n    _classCallCheck(this, ZipCodeFormatter);\n\n    var _this = _possibleConstructorReturn(this, (ZipCodeFormatter.__proto__ || Object.getPrototypeOf(ZipCodeFormatter)).call(this, '-', true));\n\n    _this.maximumLength = 9 + 1;\n    return _this;\n  }\n\n  /**\n   * @param {number} index\n   * @returns {boolean}\n   */\n\n\n  _createClass(ZipCodeFormatter, [{\n    key: 'hasDelimiterAtIndex',\n    value: function hasDelimiterAtIndex(index) {\n      return index === 5;\n    }\n\n    /**\n     * Determines whether the given change should be allowed and, if so, whether\n     * it should be altered.\n     *\n     * @param {TextFieldStateChange} change\n     * @param {function(string)} error\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isChangeValid',\n    value: function isChangeValid(change, error) {\n      if (DIGITS_PATTERN.test(change.inserted.text)) {\n        return _get(ZipCodeFormatter.prototype.__proto__ || Object.getPrototypeOf(ZipCodeFormatter.prototype), 'isChangeValid', this).call(this, change, error);\n      }\n\n      return false;\n    }\n  }]);\n\n  return ZipCodeFormatter;\n}(_fieldKit.DelimitedTextFormatter);\n\nexports.default = ZipCodeFormatter;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvYXBwL21vZHVsZXMvemlwLWNvZGUtZm9ybWF0dGVyLmpzP2U4NzMiLCJ3ZWJwYWNrOi8vLz9kNDFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlbGltaXRlZFRleHRGb3JtYXR0ZXIgfSBmcm9tICdmaWVsZC1raXQnO1xuXG4vKipcbiAqIEBjb25zdFxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgRElHSVRTX1BBVFRFUk4gPSAvXlxcZCokLztcblxuLyoqXG4gKiBAZXh0ZW5kcyBEZWxpbWl0ZWRUZXh0Rm9ybWF0dGVyXG4gKi9cbmNsYXNzIFppcENvZGVGb3JtYXR0ZXIgZXh0ZW5kcyBEZWxpbWl0ZWRUZXh0Rm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJy0nLCB0cnVlKTtcbiAgICB0aGlzLm1heGltdW1MZW5ndGggPSA5ICsgMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBoYXNEZWxpbWl0ZXJBdEluZGV4KGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4ID09PSA1O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gY2hhbmdlIHNob3VsZCBiZSBhbGxvd2VkIGFuZCwgaWYgc28sIHdoZXRoZXJcbiAgICogaXQgc2hvdWxkIGJlIGFsdGVyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7VGV4dEZpZWxkU3RhdGVDaGFuZ2V9IGNoYW5nZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGVycm9yXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNDaGFuZ2VWYWxpZChjaGFuZ2UsIGVycm9yKSB7XG4gICAgaWYgKERJR0lUU19QQVRURVJOLnRlc3QoY2hhbmdlLmluc2VydGVkLnRleHQpKSB7XG4gICAgICByZXR1cm4gc3VwZXIuaXNDaGFuZ2VWYWxpZChjaGFuZ2UsIGVycm9yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgWmlwQ29kZUZvcm1hdHRlcjtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGpzL2FwcC9tb2R1bGVzL3ppcC1jb2RlLWZvcm1hdHRlci5qc1xuICoqLyIsInVuZGVmaW5lZFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIFxuICoqLyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7Ozs7Ozs7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTs7OztBQUdBOzs7QUNDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFGQTtBQUdBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFHQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 19 */
/***/ function(module, exports) {

	eval("'use strict';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var financeCntnr = document.querySelector('.js-finance-choice-cntnr');\n\n  if (financeCntnr) {\n    (function () {\n      var radios = financeCntnr.querySelectorAll('input[type=\"radio\"]');\n      var label = document.querySelector('.js-finance-label');\n\n      Array.prototype.forEach.call(radios, function (el) {\n        el.addEventListener('change', function () {\n          label.textContent = el.parentElement.textContent;\n        });\n      });\n    })();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvYXBwL2lkdi1maW5hbmNlLWhlbHBlci5qcz9jYjk5Iiwid2VicGFjazovLy8/ZDQxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBjb25zdCBmaW5hbmNlQ250bnIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZmluYW5jZS1jaG9pY2UtY250bnInKTtcblxuICBpZiAoZmluYW5jZUNudG5yKSB7XG4gICAgY29uc3QgcmFkaW9zID0gZmluYW5jZUNudG5yLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpO1xuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZpbmFuY2UtbGFiZWwnKTtcblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwocmFkaW9zLCAoZWwpID0+IHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBlbC5wYXJlbnRFbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKioganMvYXBwL2lkdi1maW5hbmNlLWhlbHBlci5qc1xuICoqLyIsInVuZGVmaW5lZFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIFxuICoqLyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQ0NBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBU0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n__webpack_require__(14);\n\nvar _fieldKit = __webpack_require__(16);\n\nvar fields = document.querySelectorAll(\"[class*='floating-container'] input\");\n\nif (fields) {\n  fields.forEach(function (f) {\n    var field = new _fieldKit.TextField(f);\n\n    field.setDelegate({\n      textFieldDidEndEditing: function textFieldDidEndEditing(field) {\n        if (field.value() != '') {\n          f.classList.add('active');\n        } else {\n          f.classList.remove('active');\n        }\n      },\n      textFieldDidBeginEditing: function textFieldDidBeginEditing(field) {\n        fields.forEach(function (f) {\n          if (f != document.activeElement) {\n            f.classList.remove('active');\n          }\n        });\n      },\n      textDidChange: function textDidChange(field) {\n        fields.forEach(function (f) {\n          if (f != document.activeElement) {\n            f.value = '';\n          }\n        });\n      }\n    });\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvbW9ja3VwL2ZpbmFuY2lhbC1mb3JtLmpzPzBlZTkiLCJ3ZWJwYWNrOi8vLz9kNDFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnY2xhc3NsaXN0LmpzJztcbmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gJ2ZpZWxkLWtpdCc7XG5cbmNvbnN0IGZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbY2xhc3MqPSdmbG9hdGluZy1jb250YWluZXInXSBpbnB1dFwiKTtcblxuaWYgKGZpZWxkcykge1xuICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgY29uc3QgZmllbGQgPSBuZXcgVGV4dEZpZWxkKGYpO1xuXG4gICAgZmllbGQuc2V0RGVsZWdhdGUoe1xuICAgICAgdGV4dEZpZWxkRGlkRW5kRWRpdGluZzogZnVuY3Rpb24oZmllbGQpIHtcbiAgICAgICAgaWYoZmllbGQudmFsdWUoKSAhPSAnJyl7XG4gICAgICAgICAgZi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGV4dEZpZWxkRGlkQmVnaW5FZGl0aW5nOiBmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgICAgICAgaWYoZiAhPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICBmLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7ICBcbiAgICAgIH0sXG4gICAgICB0ZXh0RGlkQ2hhbmdlOiBmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgICAgICAgaWYoZiAhPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICBmLnZhbHVlID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9KTsgIFxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGpzL21vY2t1cC9maW5hbmNpYWwtZm9ybS5qc1xuICoqLyIsInVuZGVmaW5lZFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIFxuICoqLyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUNDQTtBRENBO0FDQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckJBO0FBdUJBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);